// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gripql.proto

package gripql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Condition int32

const (
	Condition_UNKNOWN_CONDITION Condition = 0
	Condition_EQ                Condition = 1
	Condition_NEQ               Condition = 2
	Condition_GT                Condition = 3
	Condition_GTE               Condition = 4
	Condition_LT                Condition = 5
	Condition_LTE               Condition = 6
	Condition_INSIDE            Condition = 7
	Condition_OUTSIDE           Condition = 8
	Condition_BETWEEN           Condition = 9
	Condition_WITHIN            Condition = 10
	Condition_WITHOUT           Condition = 11
	Condition_CONTAINS          Condition = 12
)

var Condition_name = map[int32]string{
	0:  "UNKNOWN_CONDITION",
	1:  "EQ",
	2:  "NEQ",
	3:  "GT",
	4:  "GTE",
	5:  "LT",
	6:  "LTE",
	7:  "INSIDE",
	8:  "OUTSIDE",
	9:  "BETWEEN",
	10: "WITHIN",
	11: "WITHOUT",
	12: "CONTAINS",
}
var Condition_value = map[string]int32{
	"UNKNOWN_CONDITION": 0,
	"EQ":                1,
	"NEQ":               2,
	"GT":                3,
	"GTE":               4,
	"LT":                5,
	"LTE":               6,
	"INSIDE":            7,
	"OUTSIDE":           8,
	"BETWEEN":           9,
	"WITHIN":            10,
	"WITHOUT":           11,
	"CONTAINS":          12,
}

func (x Condition) String() string {
	return proto.EnumName(Condition_name, int32(x))
}
func (Condition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{0}
}

type FieldType int32

const (
	FieldType_UNKNOWN FieldType = 0
	FieldType_STRING  FieldType = 1
	FieldType_NUMERIC FieldType = 2
	FieldType_BOOL    FieldType = 3
)

var FieldType_name = map[int32]string{
	0: "UNKNOWN",
	1: "STRING",
	2: "NUMERIC",
	3: "BOOL",
}
var FieldType_value = map[string]int32{
	"UNKNOWN": 0,
	"STRING":  1,
	"NUMERIC": 2,
	"BOOL":    3,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{1}
}

type Graph struct {
	Graph                string    `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Vertices             []*Vertex `protobuf:"bytes,2,rep,name=vertices,proto3" json:"vertices,omitempty"`
	Edges                []*Edge   `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}
func (*Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{0}
}
func (m *Graph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Graph.Unmarshal(m, b)
}
func (m *Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Graph.Marshal(b, m, deterministic)
}
func (dst *Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph.Merge(dst, src)
}
func (m *Graph) XXX_Size() int {
	return xxx_messageInfo_Graph.Size(m)
}
func (m *Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_Graph proto.InternalMessageInfo

func (m *Graph) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *Graph) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

func (m *Graph) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type GraphQuery struct {
	Graph                string            `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Query                []*GraphStatement `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GraphQuery) Reset()         { *m = GraphQuery{} }
func (m *GraphQuery) String() string { return proto.CompactTextString(m) }
func (*GraphQuery) ProtoMessage()    {}
func (*GraphQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{1}
}
func (m *GraphQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphQuery.Unmarshal(m, b)
}
func (m *GraphQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphQuery.Marshal(b, m, deterministic)
}
func (dst *GraphQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphQuery.Merge(dst, src)
}
func (m *GraphQuery) XXX_Size() int {
	return xxx_messageInfo_GraphQuery.Size(m)
}
func (m *GraphQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GraphQuery proto.InternalMessageInfo

func (m *GraphQuery) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphQuery) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type QuerySet struct {
	Query                []*GraphStatement `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *QuerySet) Reset()         { *m = QuerySet{} }
func (m *QuerySet) String() string { return proto.CompactTextString(m) }
func (*QuerySet) ProtoMessage()    {}
func (*QuerySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{2}
}
func (m *QuerySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySet.Unmarshal(m, b)
}
func (m *QuerySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySet.Marshal(b, m, deterministic)
}
func (dst *QuerySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySet.Merge(dst, src)
}
func (m *QuerySet) XXX_Size() int {
	return xxx_messageInfo_QuerySet.Size(m)
}
func (m *QuerySet) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySet.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySet proto.InternalMessageInfo

func (m *QuerySet) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type MatchQuerySet struct {
	Queries              []*QuerySet `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MatchQuerySet) Reset()         { *m = MatchQuerySet{} }
func (m *MatchQuerySet) String() string { return proto.CompactTextString(m) }
func (*MatchQuerySet) ProtoMessage()    {}
func (*MatchQuerySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{3}
}
func (m *MatchQuerySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchQuerySet.Unmarshal(m, b)
}
func (m *MatchQuerySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchQuerySet.Marshal(b, m, deterministic)
}
func (dst *MatchQuerySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchQuerySet.Merge(dst, src)
}
func (m *MatchQuerySet) XXX_Size() int {
	return xxx_messageInfo_MatchQuerySet.Size(m)
}
func (m *MatchQuerySet) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchQuerySet.DiscardUnknown(m)
}

var xxx_messageInfo_MatchQuerySet proto.InternalMessageInfo

func (m *MatchQuerySet) GetQueries() []*QuerySet {
	if m != nil {
		return m.Queries
	}
	return nil
}

type GraphStatement struct {
	// Types that are valid to be assigned to Statement:
	//	*GraphStatement_V
	//	*GraphStatement_E
	//	*GraphStatement_In
	//	*GraphStatement_Out
	//	*GraphStatement_Both
	//	*GraphStatement_InE
	//	*GraphStatement_OutE
	//	*GraphStatement_BothE
	//	*GraphStatement_InV
	//	*GraphStatement_OutV
	//	*GraphStatement_BothV
	//	*GraphStatement_As
	//	*GraphStatement_Select
	//	*GraphStatement_Limit
	//	*GraphStatement_Skip
	//	*GraphStatement_Range
	//	*GraphStatement_Match
	//	*GraphStatement_Has
	//	*GraphStatement_HasLabel
	//	*GraphStatement_HasKey
	//	*GraphStatement_HasId
	//	*GraphStatement_Count
	//	*GraphStatement_Fields
	//	*GraphStatement_Distinct
	//	*GraphStatement_Aggregate
	//	*GraphStatement_Render
	Statement            isGraphStatement_Statement `protobuf_oneof:"statement"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GraphStatement) Reset()         { *m = GraphStatement{} }
func (m *GraphStatement) String() string { return proto.CompactTextString(m) }
func (*GraphStatement) ProtoMessage()    {}
func (*GraphStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{4}
}
func (m *GraphStatement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphStatement.Unmarshal(m, b)
}
func (m *GraphStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphStatement.Marshal(b, m, deterministic)
}
func (dst *GraphStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphStatement.Merge(dst, src)
}
func (m *GraphStatement) XXX_Size() int {
	return xxx_messageInfo_GraphStatement.Size(m)
}
func (m *GraphStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphStatement.DiscardUnknown(m)
}

var xxx_messageInfo_GraphStatement proto.InternalMessageInfo

type isGraphStatement_Statement interface {
	isGraphStatement_Statement()
}

type GraphStatement_V struct {
	V *_struct.ListValue `protobuf:"bytes,1,opt,name=v,proto3,oneof"`
}
type GraphStatement_E struct {
	E *_struct.ListValue `protobuf:"bytes,2,opt,name=e,proto3,oneof"`
}
type GraphStatement_In struct {
	In *_struct.ListValue `protobuf:"bytes,10,opt,name=in,proto3,oneof"`
}
type GraphStatement_Out struct {
	Out *_struct.ListValue `protobuf:"bytes,11,opt,name=out,proto3,oneof"`
}
type GraphStatement_Both struct {
	Both *_struct.ListValue `protobuf:"bytes,14,opt,name=both,proto3,oneof"`
}
type GraphStatement_InE struct {
	InE *_struct.ListValue `protobuf:"bytes,12,opt,name=in_e,json=inE,proto3,oneof"`
}
type GraphStatement_OutE struct {
	OutE *_struct.ListValue `protobuf:"bytes,13,opt,name=out_e,json=outE,proto3,oneof"`
}
type GraphStatement_BothE struct {
	BothE *_struct.ListValue `protobuf:"bytes,15,opt,name=both_e,json=bothE,proto3,oneof"`
}
type GraphStatement_InV struct {
	InV *_struct.ListValue `protobuf:"bytes,16,opt,name=in_v,json=inV,proto3,oneof"`
}
type GraphStatement_OutV struct {
	OutV *_struct.ListValue `protobuf:"bytes,17,opt,name=out_v,json=outV,proto3,oneof"`
}
type GraphStatement_BothV struct {
	BothV *_struct.ListValue `protobuf:"bytes,18,opt,name=both_v,json=bothV,proto3,oneof"`
}
type GraphStatement_As struct {
	As string `protobuf:"bytes,20,opt,name=as,proto3,oneof"`
}
type GraphStatement_Select struct {
	Select *SelectStatement `protobuf:"bytes,21,opt,name=select,proto3,oneof"`
}
type GraphStatement_Limit struct {
	Limit uint32 `protobuf:"varint,24,opt,name=limit,proto3,oneof"`
}
type GraphStatement_Skip struct {
	Skip uint32 `protobuf:"varint,25,opt,name=skip,proto3,oneof"`
}
type GraphStatement_Range struct {
	Range *Range `protobuf:"bytes,33,opt,name=range,proto3,oneof"`
}
type GraphStatement_Match struct {
	Match *MatchQuerySet `protobuf:"bytes,28,opt,name=match,proto3,oneof"`
}
type GraphStatement_Has struct {
	Has *HasExpression `protobuf:"bytes,29,opt,name=has,proto3,oneof"`
}
type GraphStatement_HasLabel struct {
	HasLabel *_struct.ListValue `protobuf:"bytes,34,opt,name=has_label,json=hasLabel,proto3,oneof"`
}
type GraphStatement_HasKey struct {
	HasKey *_struct.ListValue `protobuf:"bytes,35,opt,name=has_key,json=hasKey,proto3,oneof"`
}
type GraphStatement_HasId struct {
	HasId *_struct.ListValue `protobuf:"bytes,36,opt,name=has_id,json=hasId,proto3,oneof"`
}
type GraphStatement_Count struct {
	Count string `protobuf:"bytes,30,opt,name=count,proto3,oneof"`
}
type GraphStatement_Fields struct {
	Fields *_struct.ListValue `protobuf:"bytes,26,opt,name=fields,proto3,oneof"`
}
type GraphStatement_Distinct struct {
	Distinct *_struct.ListValue `protobuf:"bytes,27,opt,name=distinct,proto3,oneof"`
}
type GraphStatement_Aggregate struct {
	Aggregate *Aggregations `protobuf:"bytes,31,opt,name=aggregate,proto3,oneof"`
}
type GraphStatement_Render struct {
	Render *_struct.Value `protobuf:"bytes,32,opt,name=render,proto3,oneof"`
}

func (*GraphStatement_V) isGraphStatement_Statement()         {}
func (*GraphStatement_E) isGraphStatement_Statement()         {}
func (*GraphStatement_In) isGraphStatement_Statement()        {}
func (*GraphStatement_Out) isGraphStatement_Statement()       {}
func (*GraphStatement_Both) isGraphStatement_Statement()      {}
func (*GraphStatement_InE) isGraphStatement_Statement()       {}
func (*GraphStatement_OutE) isGraphStatement_Statement()      {}
func (*GraphStatement_BothE) isGraphStatement_Statement()     {}
func (*GraphStatement_InV) isGraphStatement_Statement()       {}
func (*GraphStatement_OutV) isGraphStatement_Statement()      {}
func (*GraphStatement_BothV) isGraphStatement_Statement()     {}
func (*GraphStatement_As) isGraphStatement_Statement()        {}
func (*GraphStatement_Select) isGraphStatement_Statement()    {}
func (*GraphStatement_Limit) isGraphStatement_Statement()     {}
func (*GraphStatement_Skip) isGraphStatement_Statement()      {}
func (*GraphStatement_Range) isGraphStatement_Statement()     {}
func (*GraphStatement_Match) isGraphStatement_Statement()     {}
func (*GraphStatement_Has) isGraphStatement_Statement()       {}
func (*GraphStatement_HasLabel) isGraphStatement_Statement()  {}
func (*GraphStatement_HasKey) isGraphStatement_Statement()    {}
func (*GraphStatement_HasId) isGraphStatement_Statement()     {}
func (*GraphStatement_Count) isGraphStatement_Statement()     {}
func (*GraphStatement_Fields) isGraphStatement_Statement()    {}
func (*GraphStatement_Distinct) isGraphStatement_Statement()  {}
func (*GraphStatement_Aggregate) isGraphStatement_Statement() {}
func (*GraphStatement_Render) isGraphStatement_Statement()    {}

func (m *GraphStatement) GetStatement() isGraphStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *GraphStatement) GetV() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_V); ok {
		return x.V
	}
	return nil
}

func (m *GraphStatement) GetE() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_E); ok {
		return x.E
	}
	return nil
}

func (m *GraphStatement) GetIn() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_In); ok {
		return x.In
	}
	return nil
}

func (m *GraphStatement) GetOut() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Out); ok {
		return x.Out
	}
	return nil
}

func (m *GraphStatement) GetBoth() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Both); ok {
		return x.Both
	}
	return nil
}

func (m *GraphStatement) GetInE() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_InE); ok {
		return x.InE
	}
	return nil
}

func (m *GraphStatement) GetOutE() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_OutE); ok {
		return x.OutE
	}
	return nil
}

func (m *GraphStatement) GetBothE() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_BothE); ok {
		return x.BothE
	}
	return nil
}

func (m *GraphStatement) GetInV() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_InV); ok {
		return x.InV
	}
	return nil
}

func (m *GraphStatement) GetOutV() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_OutV); ok {
		return x.OutV
	}
	return nil
}

func (m *GraphStatement) GetBothV() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_BothV); ok {
		return x.BothV
	}
	return nil
}

func (m *GraphStatement) GetAs() string {
	if x, ok := m.GetStatement().(*GraphStatement_As); ok {
		return x.As
	}
	return ""
}

func (m *GraphStatement) GetSelect() *SelectStatement {
	if x, ok := m.GetStatement().(*GraphStatement_Select); ok {
		return x.Select
	}
	return nil
}

func (m *GraphStatement) GetLimit() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Limit); ok {
		return x.Limit
	}
	return 0
}

func (m *GraphStatement) GetSkip() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Skip); ok {
		return x.Skip
	}
	return 0
}

func (m *GraphStatement) GetRange() *Range {
	if x, ok := m.GetStatement().(*GraphStatement_Range); ok {
		return x.Range
	}
	return nil
}

func (m *GraphStatement) GetMatch() *MatchQuerySet {
	if x, ok := m.GetStatement().(*GraphStatement_Match); ok {
		return x.Match
	}
	return nil
}

func (m *GraphStatement) GetHas() *HasExpression {
	if x, ok := m.GetStatement().(*GraphStatement_Has); ok {
		return x.Has
	}
	return nil
}

func (m *GraphStatement) GetHasLabel() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasLabel); ok {
		return x.HasLabel
	}
	return nil
}

func (m *GraphStatement) GetHasKey() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasKey); ok {
		return x.HasKey
	}
	return nil
}

func (m *GraphStatement) GetHasId() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasId); ok {
		return x.HasId
	}
	return nil
}

func (m *GraphStatement) GetCount() string {
	if x, ok := m.GetStatement().(*GraphStatement_Count); ok {
		return x.Count
	}
	return ""
}

func (m *GraphStatement) GetFields() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Fields); ok {
		return x.Fields
	}
	return nil
}

func (m *GraphStatement) GetDistinct() *_struct.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (m *GraphStatement) GetAggregate() *Aggregations {
	if x, ok := m.GetStatement().(*GraphStatement_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (m *GraphStatement) GetRender() *_struct.Value {
	if x, ok := m.GetStatement().(*GraphStatement_Render); ok {
		return x.Render
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphStatement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphStatement_OneofMarshaler, _GraphStatement_OneofUnmarshaler, _GraphStatement_OneofSizer, []interface{}{
		(*GraphStatement_V)(nil),
		(*GraphStatement_E)(nil),
		(*GraphStatement_In)(nil),
		(*GraphStatement_Out)(nil),
		(*GraphStatement_Both)(nil),
		(*GraphStatement_InE)(nil),
		(*GraphStatement_OutE)(nil),
		(*GraphStatement_BothE)(nil),
		(*GraphStatement_InV)(nil),
		(*GraphStatement_OutV)(nil),
		(*GraphStatement_BothV)(nil),
		(*GraphStatement_As)(nil),
		(*GraphStatement_Select)(nil),
		(*GraphStatement_Limit)(nil),
		(*GraphStatement_Skip)(nil),
		(*GraphStatement_Range)(nil),
		(*GraphStatement_Match)(nil),
		(*GraphStatement_Has)(nil),
		(*GraphStatement_HasLabel)(nil),
		(*GraphStatement_HasKey)(nil),
		(*GraphStatement_HasId)(nil),
		(*GraphStatement_Count)(nil),
		(*GraphStatement_Fields)(nil),
		(*GraphStatement_Distinct)(nil),
		(*GraphStatement_Aggregate)(nil),
		(*GraphStatement_Render)(nil),
	}
}

func _GraphStatement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V); err != nil {
			return err
		}
	case *GraphStatement_E:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.E); err != nil {
			return err
		}
	case *GraphStatement_In:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.In); err != nil {
			return err
		}
	case *GraphStatement_Out:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Out); err != nil {
			return err
		}
	case *GraphStatement_Both:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Both); err != nil {
			return err
		}
	case *GraphStatement_InE:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InE); err != nil {
			return err
		}
	case *GraphStatement_OutE:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutE); err != nil {
			return err
		}
	case *GraphStatement_BothE:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BothE); err != nil {
			return err
		}
	case *GraphStatement_InV:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InV); err != nil {
			return err
		}
	case *GraphStatement_OutV:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutV); err != nil {
			return err
		}
	case *GraphStatement_BothV:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BothV); err != nil {
			return err
		}
	case *GraphStatement_As:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.As)
	case *GraphStatement_Select:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *GraphStatement_Limit:
		b.EncodeVarint(24<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Limit))
	case *GraphStatement_Skip:
		b.EncodeVarint(25<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Skip))
	case *GraphStatement_Range:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *GraphStatement_Match:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Match); err != nil {
			return err
		}
	case *GraphStatement_Has:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Has); err != nil {
			return err
		}
	case *GraphStatement_HasLabel:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasLabel); err != nil {
			return err
		}
	case *GraphStatement_HasKey:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasKey); err != nil {
			return err
		}
	case *GraphStatement_HasId:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasId); err != nil {
			return err
		}
	case *GraphStatement_Count:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Count)
	case *GraphStatement_Fields:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fields); err != nil {
			return err
		}
	case *GraphStatement_Distinct:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distinct); err != nil {
			return err
		}
	case *GraphStatement_Aggregate:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregate); err != nil {
			return err
		}
	case *GraphStatement_Render:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphStatement.Statement has unexpected type %T", x)
	}
	return nil
}

func _GraphStatement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphStatement)
	switch tag {
	case 1: // statement.v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_V{msg}
		return true, err
	case 2: // statement.e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_E{msg}
		return true, err
	case 10: // statement.in
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_In{msg}
		return true, err
	case 11: // statement.out
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Out{msg}
		return true, err
	case 14: // statement.both
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Both{msg}
		return true, err
	case 12: // statement.in_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_InE{msg}
		return true, err
	case 13: // statement.out_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_OutE{msg}
		return true, err
	case 15: // statement.both_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_BothE{msg}
		return true, err
	case 16: // statement.in_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_InV{msg}
		return true, err
	case 17: // statement.out_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_OutV{msg}
		return true, err
	case 18: // statement.both_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_BothV{msg}
		return true, err
	case 20: // statement.as
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_As{x}
		return true, err
	case 21: // statement.select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Select{msg}
		return true, err
	case 24: // statement.limit
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Limit{uint32(x)}
		return true, err
	case 25: // statement.skip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Skip{uint32(x)}
		return true, err
	case 33: // statement.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Range{msg}
		return true, err
	case 28: // statement.match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MatchQuerySet)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Match{msg}
		return true, err
	case 29: // statement.has
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpression)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Has{msg}
		return true, err
	case 34: // statement.has_label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasLabel{msg}
		return true, err
	case 35: // statement.has_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasKey{msg}
		return true, err
	case 36: // statement.has_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasId{msg}
		return true, err
	case 30: // statement.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_Count{x}
		return true, err
	case 26: // statement.fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Fields{msg}
		return true, err
	case 27: // statement.distinct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Distinct{msg}
		return true, err
	case 31: // statement.aggregate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Aggregations)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Aggregate{msg}
		return true, err
	case 32: // statement.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.Value)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Render{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphStatement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		s := proto.Size(x.V)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_E:
		s := proto.Size(x.E)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_In:
		s := proto.Size(x.In)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Out:
		s := proto.Size(x.Out)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Both:
		s := proto.Size(x.Both)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_InE:
		s := proto.Size(x.InE)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_OutE:
		s := proto.Size(x.OutE)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_BothE:
		s := proto.Size(x.BothE)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_InV:
		s := proto.Size(x.InV)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_OutV:
		s := proto.Size(x.OutV)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_BothV:
		s := proto.Size(x.BothV)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_As:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.As)))
		n += len(x.As)
	case *GraphStatement_Select:
		s := proto.Size(x.Select)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Limit:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.Limit))
	case *GraphStatement_Skip:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.Skip))
	case *GraphStatement_Range:
		s := proto.Size(x.Range)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Match:
		s := proto.Size(x.Match)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Has:
		s := proto.Size(x.Has)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasLabel:
		s := proto.Size(x.HasLabel)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasKey:
		s := proto.Size(x.HasKey)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasId:
		s := proto.Size(x.HasId)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Count:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Count)))
		n += len(x.Count)
	case *GraphStatement_Fields:
		s := proto.Size(x.Fields)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Distinct:
		s := proto.Size(x.Distinct)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Aggregate:
		s := proto.Size(x.Aggregate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Render:
		s := proto.Size(x.Render)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Range struct {
	Start                int32    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  int32    `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{5}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (dst *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(dst, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Range) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

type AggregationsRequest struct {
	Graph                string       `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Aggregations         []*Aggregate `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AggregationsRequest) Reset()         { *m = AggregationsRequest{} }
func (m *AggregationsRequest) String() string { return proto.CompactTextString(m) }
func (*AggregationsRequest) ProtoMessage()    {}
func (*AggregationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{6}
}
func (m *AggregationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregationsRequest.Unmarshal(m, b)
}
func (m *AggregationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregationsRequest.Marshal(b, m, deterministic)
}
func (dst *AggregationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationsRequest.Merge(dst, src)
}
func (m *AggregationsRequest) XXX_Size() int {
	return xxx_messageInfo_AggregationsRequest.Size(m)
}
func (m *AggregationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationsRequest proto.InternalMessageInfo

func (m *AggregationsRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *AggregationsRequest) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregations struct {
	Aggregations         []*Aggregate `protobuf:"bytes,1,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Aggregations) Reset()         { *m = Aggregations{} }
func (m *Aggregations) String() string { return proto.CompactTextString(m) }
func (*Aggregations) ProtoMessage()    {}
func (*Aggregations) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{7}
}
func (m *Aggregations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Aggregations.Unmarshal(m, b)
}
func (m *Aggregations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Aggregations.Marshal(b, m, deterministic)
}
func (dst *Aggregations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregations.Merge(dst, src)
}
func (m *Aggregations) XXX_Size() int {
	return xxx_messageInfo_Aggregations.Size(m)
}
func (m *Aggregations) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregations.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregations proto.InternalMessageInfo

func (m *Aggregations) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregate struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Aggregation:
	//	*Aggregate_Term
	//	*Aggregate_Percentile
	//	*Aggregate_Histogram
	Aggregation          isAggregate_Aggregation `protobuf_oneof:"aggregation"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Aggregate) Reset()         { *m = Aggregate{} }
func (m *Aggregate) String() string { return proto.CompactTextString(m) }
func (*Aggregate) ProtoMessage()    {}
func (*Aggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{8}
}
func (m *Aggregate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Aggregate.Unmarshal(m, b)
}
func (m *Aggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Aggregate.Marshal(b, m, deterministic)
}
func (dst *Aggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregate.Merge(dst, src)
}
func (m *Aggregate) XXX_Size() int {
	return xxx_messageInfo_Aggregate.Size(m)
}
func (m *Aggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregate.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregate proto.InternalMessageInfo

type isAggregate_Aggregation interface {
	isAggregate_Aggregation()
}

type Aggregate_Term struct {
	Term *TermAggregation `protobuf:"bytes,2,opt,name=term,proto3,oneof"`
}
type Aggregate_Percentile struct {
	Percentile *PercentileAggregation `protobuf:"bytes,3,opt,name=percentile,proto3,oneof"`
}
type Aggregate_Histogram struct {
	Histogram *HistogramAggregation `protobuf:"bytes,4,opt,name=histogram,proto3,oneof"`
}

func (*Aggregate_Term) isAggregate_Aggregation()       {}
func (*Aggregate_Percentile) isAggregate_Aggregation() {}
func (*Aggregate_Histogram) isAggregate_Aggregation()  {}

func (m *Aggregate) GetAggregation() isAggregate_Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Aggregate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Aggregate) GetTerm() *TermAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Term); ok {
		return x.Term
	}
	return nil
}

func (m *Aggregate) GetPercentile() *PercentileAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Percentile); ok {
		return x.Percentile
	}
	return nil
}

func (m *Aggregate) GetHistogram() *HistogramAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Histogram); ok {
		return x.Histogram
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Aggregate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Aggregate_OneofMarshaler, _Aggregate_OneofUnmarshaler, _Aggregate_OneofSizer, []interface{}{
		(*Aggregate_Term)(nil),
		(*Aggregate_Percentile)(nil),
		(*Aggregate_Histogram)(nil),
	}
}

func _Aggregate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Term); err != nil {
			return err
		}
	case *Aggregate_Percentile:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Percentile); err != nil {
			return err
		}
	case *Aggregate_Histogram:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Histogram); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Aggregate.Aggregation has unexpected type %T", x)
	}
	return nil
}

func _Aggregate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Aggregate)
	switch tag {
	case 2: // aggregation.term
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TermAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Term{msg}
		return true, err
	case 3: // aggregation.percentile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PercentileAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Percentile{msg}
		return true, err
	case 4: // aggregation.histogram
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HistogramAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Histogram{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Aggregate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		s := proto.Size(x.Term)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Percentile:
		s := proto.Size(x.Percentile)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Histogram:
		s := proto.Size(x.Histogram)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TermAggregation struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Size                 uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermAggregation) Reset()         { *m = TermAggregation{} }
func (m *TermAggregation) String() string { return proto.CompactTextString(m) }
func (*TermAggregation) ProtoMessage()    {}
func (*TermAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{9}
}
func (m *TermAggregation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermAggregation.Unmarshal(m, b)
}
func (m *TermAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermAggregation.Marshal(b, m, deterministic)
}
func (dst *TermAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermAggregation.Merge(dst, src)
}
func (m *TermAggregation) XXX_Size() int {
	return xxx_messageInfo_TermAggregation.Size(m)
}
func (m *TermAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_TermAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_TermAggregation proto.InternalMessageInfo

func (m *TermAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TermAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *TermAggregation) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PercentileAggregation struct {
	Label                string    `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Field                string    `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Percents             []float64 `protobuf:"fixed64,3,rep,packed,name=percents,proto3" json:"percents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PercentileAggregation) Reset()         { *m = PercentileAggregation{} }
func (m *PercentileAggregation) String() string { return proto.CompactTextString(m) }
func (*PercentileAggregation) ProtoMessage()    {}
func (*PercentileAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{10}
}
func (m *PercentileAggregation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PercentileAggregation.Unmarshal(m, b)
}
func (m *PercentileAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PercentileAggregation.Marshal(b, m, deterministic)
}
func (dst *PercentileAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PercentileAggregation.Merge(dst, src)
}
func (m *PercentileAggregation) XXX_Size() int {
	return xxx_messageInfo_PercentileAggregation.Size(m)
}
func (m *PercentileAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_PercentileAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_PercentileAggregation proto.InternalMessageInfo

func (m *PercentileAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PercentileAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PercentileAggregation) GetPercents() []float64 {
	if m != nil {
		return m.Percents
	}
	return nil
}

type HistogramAggregation struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Interval             uint32   `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistogramAggregation) Reset()         { *m = HistogramAggregation{} }
func (m *HistogramAggregation) String() string { return proto.CompactTextString(m) }
func (*HistogramAggregation) ProtoMessage()    {}
func (*HistogramAggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{11}
}
func (m *HistogramAggregation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HistogramAggregation.Unmarshal(m, b)
}
func (m *HistogramAggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HistogramAggregation.Marshal(b, m, deterministic)
}
func (dst *HistogramAggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistogramAggregation.Merge(dst, src)
}
func (m *HistogramAggregation) XXX_Size() int {
	return xxx_messageInfo_HistogramAggregation.Size(m)
}
func (m *HistogramAggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_HistogramAggregation.DiscardUnknown(m)
}

var xxx_messageInfo_HistogramAggregation proto.InternalMessageInfo

func (m *HistogramAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *HistogramAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *HistogramAggregation) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type NamedAggregationResult struct {
	Aggregations         map[string]*AggregationResult `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *NamedAggregationResult) Reset()         { *m = NamedAggregationResult{} }
func (m *NamedAggregationResult) String() string { return proto.CompactTextString(m) }
func (*NamedAggregationResult) ProtoMessage()    {}
func (*NamedAggregationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{12}
}
func (m *NamedAggregationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedAggregationResult.Unmarshal(m, b)
}
func (m *NamedAggregationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedAggregationResult.Marshal(b, m, deterministic)
}
func (dst *NamedAggregationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedAggregationResult.Merge(dst, src)
}
func (m *NamedAggregationResult) XXX_Size() int {
	return xxx_messageInfo_NamedAggregationResult.Size(m)
}
func (m *NamedAggregationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedAggregationResult.DiscardUnknown(m)
}

var xxx_messageInfo_NamedAggregationResult proto.InternalMessageInfo

func (m *NamedAggregationResult) GetAggregations() map[string]*AggregationResult {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type AggregationResult struct {
	Buckets              []*AggregationResultBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *AggregationResult) Reset()         { *m = AggregationResult{} }
func (m *AggregationResult) String() string { return proto.CompactTextString(m) }
func (*AggregationResult) ProtoMessage()    {}
func (*AggregationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{13}
}
func (m *AggregationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregationResult.Unmarshal(m, b)
}
func (m *AggregationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregationResult.Marshal(b, m, deterministic)
}
func (dst *AggregationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationResult.Merge(dst, src)
}
func (m *AggregationResult) XXX_Size() int {
	return xxx_messageInfo_AggregationResult.Size(m)
}
func (m *AggregationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationResult.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationResult proto.InternalMessageInfo

func (m *AggregationResult) GetBuckets() []*AggregationResultBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type AggregationResultBucket struct {
	Key                  *_struct.Value `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                float64        `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AggregationResultBucket) Reset()         { *m = AggregationResultBucket{} }
func (m *AggregationResultBucket) String() string { return proto.CompactTextString(m) }
func (*AggregationResultBucket) ProtoMessage()    {}
func (*AggregationResultBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{14}
}
func (m *AggregationResultBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregationResultBucket.Unmarshal(m, b)
}
func (m *AggregationResultBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregationResultBucket.Marshal(b, m, deterministic)
}
func (dst *AggregationResultBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregationResultBucket.Merge(dst, src)
}
func (m *AggregationResultBucket) XXX_Size() int {
	return xxx_messageInfo_AggregationResultBucket.Size(m)
}
func (m *AggregationResultBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregationResultBucket.DiscardUnknown(m)
}

var xxx_messageInfo_AggregationResultBucket proto.InternalMessageInfo

func (m *AggregationResultBucket) GetKey() *_struct.Value {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AggregationResultBucket) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type HasExpressionList struct {
	Expressions          []*HasExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *HasExpressionList) Reset()         { *m = HasExpressionList{} }
func (m *HasExpressionList) String() string { return proto.CompactTextString(m) }
func (*HasExpressionList) ProtoMessage()    {}
func (*HasExpressionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{15}
}
func (m *HasExpressionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasExpressionList.Unmarshal(m, b)
}
func (m *HasExpressionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasExpressionList.Marshal(b, m, deterministic)
}
func (dst *HasExpressionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasExpressionList.Merge(dst, src)
}
func (m *HasExpressionList) XXX_Size() int {
	return xxx_messageInfo_HasExpressionList.Size(m)
}
func (m *HasExpressionList) XXX_DiscardUnknown() {
	xxx_messageInfo_HasExpressionList.DiscardUnknown(m)
}

var xxx_messageInfo_HasExpressionList proto.InternalMessageInfo

func (m *HasExpressionList) GetExpressions() []*HasExpression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type HasExpression struct {
	// Types that are valid to be assigned to Expression:
	//	*HasExpression_And
	//	*HasExpression_Or
	//	*HasExpression_Not
	//	*HasExpression_Condition
	Expression           isHasExpression_Expression `protobuf_oneof:"expression"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *HasExpression) Reset()         { *m = HasExpression{} }
func (m *HasExpression) String() string { return proto.CompactTextString(m) }
func (*HasExpression) ProtoMessage()    {}
func (*HasExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{16}
}
func (m *HasExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasExpression.Unmarshal(m, b)
}
func (m *HasExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasExpression.Marshal(b, m, deterministic)
}
func (dst *HasExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasExpression.Merge(dst, src)
}
func (m *HasExpression) XXX_Size() int {
	return xxx_messageInfo_HasExpression.Size(m)
}
func (m *HasExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_HasExpression.DiscardUnknown(m)
}

var xxx_messageInfo_HasExpression proto.InternalMessageInfo

type isHasExpression_Expression interface {
	isHasExpression_Expression()
}

type HasExpression_And struct {
	And *HasExpressionList `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}
type HasExpression_Or struct {
	Or *HasExpressionList `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}
type HasExpression_Not struct {
	Not *HasExpression `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}
type HasExpression_Condition struct {
	Condition *HasCondition `protobuf:"bytes,4,opt,name=condition,proto3,oneof"`
}

func (*HasExpression_And) isHasExpression_Expression()       {}
func (*HasExpression_Or) isHasExpression_Expression()        {}
func (*HasExpression_Not) isHasExpression_Expression()       {}
func (*HasExpression_Condition) isHasExpression_Expression() {}

func (m *HasExpression) GetExpression() isHasExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *HasExpression) GetAnd() *HasExpressionList {
	if x, ok := m.GetExpression().(*HasExpression_And); ok {
		return x.And
	}
	return nil
}

func (m *HasExpression) GetOr() *HasExpressionList {
	if x, ok := m.GetExpression().(*HasExpression_Or); ok {
		return x.Or
	}
	return nil
}

func (m *HasExpression) GetNot() *HasExpression {
	if x, ok := m.GetExpression().(*HasExpression_Not); ok {
		return x.Not
	}
	return nil
}

func (m *HasExpression) GetCondition() *HasCondition {
	if x, ok := m.GetExpression().(*HasExpression_Condition); ok {
		return x.Condition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HasExpression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HasExpression_OneofMarshaler, _HasExpression_OneofUnmarshaler, _HasExpression_OneofSizer, []interface{}{
		(*HasExpression_And)(nil),
		(*HasExpression_Or)(nil),
		(*HasExpression_Not)(nil),
		(*HasExpression_Condition)(nil),
	}
}

func _HasExpression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HasExpression)
	// expression
	switch x := m.Expression.(type) {
	case *HasExpression_And:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.And); err != nil {
			return err
		}
	case *HasExpression_Or:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Or); err != nil {
			return err
		}
	case *HasExpression_Not:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Not); err != nil {
			return err
		}
	case *HasExpression_Condition:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Condition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HasExpression.Expression has unexpected type %T", x)
	}
	return nil
}

func _HasExpression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HasExpression)
	switch tag {
	case 1: // expression.and
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_And{msg}
		return true, err
	case 2: // expression.or
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Or{msg}
		return true, err
	case 3: // expression.not
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpression)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Not{msg}
		return true, err
	case 4: // expression.condition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasCondition)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Condition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HasExpression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HasExpression)
	// expression
	switch x := m.Expression.(type) {
	case *HasExpression_And:
		s := proto.Size(x.And)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Or:
		s := proto.Size(x.Or)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Not:
		s := proto.Size(x.Not)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Condition:
		s := proto.Size(x.Condition)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HasCondition struct {
	Key                  string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                *_struct.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Condition            Condition      `protobuf:"varint,3,opt,name=condition,proto3,enum=gripql.Condition" json:"condition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HasCondition) Reset()         { *m = HasCondition{} }
func (m *HasCondition) String() string { return proto.CompactTextString(m) }
func (*HasCondition) ProtoMessage()    {}
func (*HasCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{17}
}
func (m *HasCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HasCondition.Unmarshal(m, b)
}
func (m *HasCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HasCondition.Marshal(b, m, deterministic)
}
func (dst *HasCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HasCondition.Merge(dst, src)
}
func (m *HasCondition) XXX_Size() int {
	return xxx_messageInfo_HasCondition.Size(m)
}
func (m *HasCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_HasCondition.DiscardUnknown(m)
}

var xxx_messageInfo_HasCondition proto.InternalMessageInfo

func (m *HasCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HasCondition) GetValue() *_struct.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HasCondition) GetCondition() Condition {
	if m != nil {
		return m.Condition
	}
	return Condition_UNKNOWN_CONDITION
}

type SelectStatement struct {
	Marks                []string `protobuf:"bytes,1,rep,name=marks,proto3" json:"marks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectStatement) Reset()         { *m = SelectStatement{} }
func (m *SelectStatement) String() string { return proto.CompactTextString(m) }
func (*SelectStatement) ProtoMessage()    {}
func (*SelectStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{18}
}
func (m *SelectStatement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectStatement.Unmarshal(m, b)
}
func (m *SelectStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectStatement.Marshal(b, m, deterministic)
}
func (dst *SelectStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectStatement.Merge(dst, src)
}
func (m *SelectStatement) XXX_Size() int {
	return xxx_messageInfo_SelectStatement.Size(m)
}
func (m *SelectStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectStatement.DiscardUnknown(m)
}

var xxx_messageInfo_SelectStatement proto.InternalMessageInfo

func (m *SelectStatement) GetMarks() []string {
	if m != nil {
		return m.Marks
	}
	return nil
}

type Selection struct {
	// Types that are valid to be assigned to Result:
	//	*Selection_Vertex
	//	*Selection_Edge
	Result               isSelection_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Selection) Reset()         { *m = Selection{} }
func (m *Selection) String() string { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()    {}
func (*Selection) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{19}
}
func (m *Selection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selection.Unmarshal(m, b)
}
func (m *Selection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selection.Marshal(b, m, deterministic)
}
func (dst *Selection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selection.Merge(dst, src)
}
func (m *Selection) XXX_Size() int {
	return xxx_messageInfo_Selection.Size(m)
}
func (m *Selection) XXX_DiscardUnknown() {
	xxx_messageInfo_Selection.DiscardUnknown(m)
}

var xxx_messageInfo_Selection proto.InternalMessageInfo

type isSelection_Result interface {
	isSelection_Result()
}

type Selection_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3,oneof"`
}
type Selection_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}

func (*Selection_Vertex) isSelection_Result() {}
func (*Selection_Edge) isSelection_Result()   {}

func (m *Selection) GetResult() isSelection_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Selection) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*Selection_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *Selection) GetEdge() *Edge {
	if x, ok := m.GetResult().(*Selection_Edge); ok {
		return x.Edge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Selection) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Selection_OneofMarshaler, _Selection_OneofUnmarshaler, _Selection_OneofSizer, []interface{}{
		(*Selection_Vertex)(nil),
		(*Selection_Edge)(nil),
	}
}

func _Selection_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *Selection_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Selection.Result has unexpected type %T", x)
	}
	return nil
}

func _Selection_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Selection)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Edge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Selection_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		s := proto.Size(x.Vertex)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selection_Edge:
		s := proto.Size(x.Edge)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Selections struct {
	Selections           map[string]*Selection `protobuf:"bytes,1,rep,name=selections,proto3" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Selections) Reset()         { *m = Selections{} }
func (m *Selections) String() string { return proto.CompactTextString(m) }
func (*Selections) ProtoMessage()    {}
func (*Selections) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{20}
}
func (m *Selections) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selections.Unmarshal(m, b)
}
func (m *Selections) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selections.Marshal(b, m, deterministic)
}
func (dst *Selections) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selections.Merge(dst, src)
}
func (m *Selections) XXX_Size() int {
	return xxx_messageInfo_Selections.Size(m)
}
func (m *Selections) XXX_DiscardUnknown() {
	xxx_messageInfo_Selections.DiscardUnknown(m)
}

var xxx_messageInfo_Selections proto.InternalMessageInfo

func (m *Selections) GetSelections() map[string]*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type Vertex struct {
	Gid                  string          `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Label                string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Vertex) Reset()         { *m = Vertex{} }
func (m *Vertex) String() string { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()    {}
func (*Vertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{21}
}
func (m *Vertex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vertex.Unmarshal(m, b)
}
func (m *Vertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vertex.Marshal(b, m, deterministic)
}
func (dst *Vertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vertex.Merge(dst, src)
}
func (m *Vertex) XXX_Size() int {
	return xxx_messageInfo_Vertex.Size(m)
}
func (m *Vertex) XXX_DiscardUnknown() {
	xxx_messageInfo_Vertex.DiscardUnknown(m)
}

var xxx_messageInfo_Vertex proto.InternalMessageInfo

func (m *Vertex) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Vertex) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Vertex) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type Edge struct {
	Gid                  string          `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Label                string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	From                 string          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   string          `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Edge) Reset()         { *m = Edge{} }
func (m *Edge) String() string { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()    {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{22}
}
func (m *Edge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edge.Unmarshal(m, b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
}
func (dst *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(dst, src)
}
func (m *Edge) XXX_Size() int {
	return xxx_messageInfo_Edge.Size(m)
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (m *Edge) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Edge) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Edge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Edge) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Edge) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*QueryResult_Vertex
	//	*QueryResult_Edge
	//	*QueryResult_Aggregations
	//	*QueryResult_Selections
	//	*QueryResult_Render
	//	*QueryResult_Count
	Result               isQueryResult_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *QueryResult) Reset()         { *m = QueryResult{} }
func (m *QueryResult) String() string { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()    {}
func (*QueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{23}
}
func (m *QueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResult.Unmarshal(m, b)
}
func (m *QueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResult.Marshal(b, m, deterministic)
}
func (dst *QueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResult.Merge(dst, src)
}
func (m *QueryResult) XXX_Size() int {
	return xxx_messageInfo_QueryResult.Size(m)
}
func (m *QueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResult proto.InternalMessageInfo

type isQueryResult_Result interface {
	isQueryResult_Result()
}

type QueryResult_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3,oneof"`
}
type QueryResult_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}
type QueryResult_Aggregations struct {
	Aggregations *NamedAggregationResult `protobuf:"bytes,3,opt,name=aggregations,proto3,oneof"`
}
type QueryResult_Selections struct {
	Selections *Selections `protobuf:"bytes,4,opt,name=selections,proto3,oneof"`
}
type QueryResult_Render struct {
	Render *_struct.Value `protobuf:"bytes,5,opt,name=render,proto3,oneof"`
}
type QueryResult_Count struct {
	Count uint32 `protobuf:"varint,6,opt,name=count,proto3,oneof"`
}

func (*QueryResult_Vertex) isQueryResult_Result()       {}
func (*QueryResult_Edge) isQueryResult_Result()         {}
func (*QueryResult_Aggregations) isQueryResult_Result() {}
func (*QueryResult_Selections) isQueryResult_Result()   {}
func (*QueryResult_Render) isQueryResult_Result()       {}
func (*QueryResult_Count) isQueryResult_Result()        {}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryResult) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*QueryResult_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *QueryResult) GetEdge() *Edge {
	if x, ok := m.GetResult().(*QueryResult_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *QueryResult) GetAggregations() *NamedAggregationResult {
	if x, ok := m.GetResult().(*QueryResult_Aggregations); ok {
		return x.Aggregations
	}
	return nil
}

func (m *QueryResult) GetSelections() *Selections {
	if x, ok := m.GetResult().(*QueryResult_Selections); ok {
		return x.Selections
	}
	return nil
}

func (m *QueryResult) GetRender() *_struct.Value {
	if x, ok := m.GetResult().(*QueryResult_Render); ok {
		return x.Render
	}
	return nil
}

func (m *QueryResult) GetCount() uint32 {
	if x, ok := m.GetResult().(*QueryResult_Count); ok {
		return x.Count
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryResult_OneofMarshaler, _QueryResult_OneofUnmarshaler, _QueryResult_OneofSizer, []interface{}{
		(*QueryResult_Vertex)(nil),
		(*QueryResult_Edge)(nil),
		(*QueryResult_Aggregations)(nil),
		(*QueryResult_Selections)(nil),
		(*QueryResult_Render)(nil),
		(*QueryResult_Count)(nil),
	}
}

func _QueryResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *QueryResult_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case *QueryResult_Aggregations:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregations); err != nil {
			return err
		}
	case *QueryResult_Selections:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selections); err != nil {
			return err
		}
	case *QueryResult_Render:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case *QueryResult_Count:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Count))
	case nil:
	default:
		return fmt.Errorf("QueryResult.Result has unexpected type %T", x)
	}
	return nil
}

func _QueryResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryResult)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Edge{msg}
		return true, err
	case 3: // result.aggregations
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NamedAggregationResult)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Aggregations{msg}
		return true, err
	case 4: // result.selections
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selections)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Selections{msg}
		return true, err
	case 5: // result.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(_struct.Value)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Render{msg}
		return true, err
	case 6: // result.count
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Result = &QueryResult_Count{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _QueryResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		s := proto.Size(x.Vertex)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Edge:
		s := proto.Size(x.Edge)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Aggregations:
		s := proto.Size(x.Aggregations)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Selections:
		s := proto.Size(x.Selections)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Render:
		s := proto.Size(x.Render)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Count:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Count))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EditResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EditResult) Reset()         { *m = EditResult{} }
func (m *EditResult) String() string { return proto.CompactTextString(m) }
func (*EditResult) ProtoMessage()    {}
func (*EditResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{24}
}
func (m *EditResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EditResult.Unmarshal(m, b)
}
func (m *EditResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EditResult.Marshal(b, m, deterministic)
}
func (dst *EditResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditResult.Merge(dst, src)
}
func (m *EditResult) XXX_Size() int {
	return xxx_messageInfo_EditResult.Size(m)
}
func (m *EditResult) XXX_DiscardUnknown() {
	xxx_messageInfo_EditResult.DiscardUnknown(m)
}

var xxx_messageInfo_EditResult proto.InternalMessageInfo

func (m *EditResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GraphElement struct {
	Graph                string   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Vertex               *Vertex  `protobuf:"bytes,2,opt,name=vertex,proto3" json:"vertex,omitempty"`
	Edge                 *Edge    `protobuf:"bytes,3,opt,name=edge,proto3" json:"edge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphElement) Reset()         { *m = GraphElement{} }
func (m *GraphElement) String() string { return proto.CompactTextString(m) }
func (*GraphElement) ProtoMessage()    {}
func (*GraphElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{25}
}
func (m *GraphElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphElement.Unmarshal(m, b)
}
func (m *GraphElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphElement.Marshal(b, m, deterministic)
}
func (dst *GraphElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphElement.Merge(dst, src)
}
func (m *GraphElement) XXX_Size() int {
	return xxx_messageInfo_GraphElement.Size(m)
}
func (m *GraphElement) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphElement.DiscardUnknown(m)
}

var xxx_messageInfo_GraphElement proto.InternalMessageInfo

func (m *GraphElement) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphElement) GetVertex() *Vertex {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *GraphElement) GetEdge() *Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

type GraphID struct {
	Graph                string   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphID) Reset()         { *m = GraphID{} }
func (m *GraphID) String() string { return proto.CompactTextString(m) }
func (*GraphID) ProtoMessage()    {}
func (*GraphID) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{26}
}
func (m *GraphID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphID.Unmarshal(m, b)
}
func (m *GraphID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphID.Marshal(b, m, deterministic)
}
func (dst *GraphID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphID.Merge(dst, src)
}
func (m *GraphID) XXX_Size() int {
	return xxx_messageInfo_GraphID.Size(m)
}
func (m *GraphID) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphID.DiscardUnknown(m)
}

var xxx_messageInfo_GraphID proto.InternalMessageInfo

func (m *GraphID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type ElementID struct {
	Graph                string   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ElementID) Reset()         { *m = ElementID{} }
func (m *ElementID) String() string { return proto.CompactTextString(m) }
func (*ElementID) ProtoMessage()    {}
func (*ElementID) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{27}
}
func (m *ElementID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ElementID.Unmarshal(m, b)
}
func (m *ElementID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ElementID.Marshal(b, m, deterministic)
}
func (dst *ElementID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElementID.Merge(dst, src)
}
func (m *ElementID) XXX_Size() int {
	return xxx_messageInfo_ElementID.Size(m)
}
func (m *ElementID) XXX_DiscardUnknown() {
	xxx_messageInfo_ElementID.DiscardUnknown(m)
}

var xxx_messageInfo_ElementID proto.InternalMessageInfo

func (m *ElementID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *ElementID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IndexID struct {
	Graph                string   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Label                string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Field                string   `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IndexID) Reset()         { *m = IndexID{} }
func (m *IndexID) String() string { return proto.CompactTextString(m) }
func (*IndexID) ProtoMessage()    {}
func (*IndexID) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{28}
}
func (m *IndexID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexID.Unmarshal(m, b)
}
func (m *IndexID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexID.Marshal(b, m, deterministic)
}
func (dst *IndexID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexID.Merge(dst, src)
}
func (m *IndexID) XXX_Size() int {
	return xxx_messageInfo_IndexID.Size(m)
}
func (m *IndexID) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexID.DiscardUnknown(m)
}

var xxx_messageInfo_IndexID proto.InternalMessageInfo

func (m *IndexID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *IndexID) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *IndexID) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type Timestamp struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timestamp) Reset()         { *m = Timestamp{} }
func (m *Timestamp) String() string { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()    {}
func (*Timestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{29}
}
func (m *Timestamp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Timestamp.Unmarshal(m, b)
}
func (m *Timestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Timestamp.Marshal(b, m, deterministic)
}
func (dst *Timestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timestamp.Merge(dst, src)
}
func (m *Timestamp) XXX_Size() int {
	return xxx_messageInfo_Timestamp.Size(m)
}
func (m *Timestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_Timestamp.DiscardUnknown(m)
}

var xxx_messageInfo_Timestamp proto.InternalMessageInfo

func (m *Timestamp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// Each data field in the vertices/edges will be mapped to a FieldType.
// The `Gid` field is not used in the schema.
// The `Label` field identifies the vertex/edge type.
//
// Example:
//
// {
//   "vertices": [
//     {
//       "label": "Human",
//       "data": {
// 	      "name": "STRING",
// 	      "height": "NUMERIC",
// 	      "mass": "NUMERIC",
// 	      "age": "NUMERIC",
// 	      "homePlanet": "STRING"
//       }
//     },
//     {
//       "label": "Droid",
//       "data": {
// 	      "name": "STRING",
// 	      "primaryFunction": "STRING"
//       }
//     },
//   ],
//   "edges": [
//     {
//       "label": "Owner",
//       "from": "Human",
//       "to": "Droid",
//       "data" : {
// 	      "years": "NUMERIC"
//       }
//     }
//   ]
// }
type GraphSchema struct {
	Vertices             []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	Edges                []*Edge   `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GraphSchema) Reset()         { *m = GraphSchema{} }
func (m *GraphSchema) String() string { return proto.CompactTextString(m) }
func (*GraphSchema) ProtoMessage()    {}
func (*GraphSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{30}
}
func (m *GraphSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphSchema.Unmarshal(m, b)
}
func (m *GraphSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphSchema.Marshal(b, m, deterministic)
}
func (dst *GraphSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphSchema.Merge(dst, src)
}
func (m *GraphSchema) XXX_Size() int {
	return xxx_messageInfo_GraphSchema.Size(m)
}
func (m *GraphSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphSchema.DiscardUnknown(m)
}

var xxx_messageInfo_GraphSchema proto.InternalMessageInfo

func (m *GraphSchema) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

func (m *GraphSchema) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_gripql_e7dfd1bd7b02b794, []int{31}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Graph)(nil), "gripql.Graph")
	proto.RegisterType((*GraphQuery)(nil), "gripql.GraphQuery")
	proto.RegisterType((*QuerySet)(nil), "gripql.QuerySet")
	proto.RegisterType((*MatchQuerySet)(nil), "gripql.MatchQuerySet")
	proto.RegisterType((*GraphStatement)(nil), "gripql.GraphStatement")
	proto.RegisterType((*Range)(nil), "gripql.Range")
	proto.RegisterType((*AggregationsRequest)(nil), "gripql.AggregationsRequest")
	proto.RegisterType((*Aggregations)(nil), "gripql.Aggregations")
	proto.RegisterType((*Aggregate)(nil), "gripql.Aggregate")
	proto.RegisterType((*TermAggregation)(nil), "gripql.TermAggregation")
	proto.RegisterType((*PercentileAggregation)(nil), "gripql.PercentileAggregation")
	proto.RegisterType((*HistogramAggregation)(nil), "gripql.HistogramAggregation")
	proto.RegisterType((*NamedAggregationResult)(nil), "gripql.NamedAggregationResult")
	proto.RegisterMapType((map[string]*AggregationResult)(nil), "gripql.NamedAggregationResult.AggregationsEntry")
	proto.RegisterType((*AggregationResult)(nil), "gripql.AggregationResult")
	proto.RegisterType((*AggregationResultBucket)(nil), "gripql.AggregationResultBucket")
	proto.RegisterType((*HasExpressionList)(nil), "gripql.HasExpressionList")
	proto.RegisterType((*HasExpression)(nil), "gripql.HasExpression")
	proto.RegisterType((*HasCondition)(nil), "gripql.HasCondition")
	proto.RegisterType((*SelectStatement)(nil), "gripql.SelectStatement")
	proto.RegisterType((*Selection)(nil), "gripql.Selection")
	proto.RegisterType((*Selections)(nil), "gripql.Selections")
	proto.RegisterMapType((map[string]*Selection)(nil), "gripql.Selections.SelectionsEntry")
	proto.RegisterType((*Vertex)(nil), "gripql.Vertex")
	proto.RegisterType((*Edge)(nil), "gripql.Edge")
	proto.RegisterType((*QueryResult)(nil), "gripql.QueryResult")
	proto.RegisterType((*EditResult)(nil), "gripql.EditResult")
	proto.RegisterType((*GraphElement)(nil), "gripql.GraphElement")
	proto.RegisterType((*GraphID)(nil), "gripql.GraphID")
	proto.RegisterType((*ElementID)(nil), "gripql.ElementID")
	proto.RegisterType((*IndexID)(nil), "gripql.IndexID")
	proto.RegisterType((*Timestamp)(nil), "gripql.Timestamp")
	proto.RegisterType((*GraphSchema)(nil), "gripql.GraphSchema")
	proto.RegisterType((*Empty)(nil), "gripql.Empty")
	proto.RegisterEnum("gripql.Condition", Condition_name, Condition_value)
	proto.RegisterEnum("gripql.FieldType", FieldType_name, FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error)
	Aggregate(ctx context.Context, in *AggregationsRequest, opts ...grpc.CallOption) (*NamedAggregationResult, error)
	GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error)
	GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error)
	GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error)
	ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_ListGraphsClient, error)
	ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (Query_ListIndicesClient, error)
	GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*GraphSchema, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/gripql.Query/Traversal", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryTraversalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_TraversalClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryTraversalClient struct {
	grpc.ClientStream
}

func (x *queryTraversalClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) Aggregate(ctx context.Context, in *AggregationsRequest, opts ...grpc.CallOption) (*NamedAggregationResult, error) {
	out := new(NamedAggregationResult)
	err := c.cc.Invoke(ctx, "/gripql.Query/Aggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_ListGraphsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[1], "/gripql.Query/ListGraphs", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListGraphsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListGraphsClient interface {
	Recv() (*GraphID, error)
	grpc.ClientStream
}

type queryListGraphsClient struct {
	grpc.ClientStream
}

func (x *queryListGraphsClient) Recv() (*GraphID, error) {
	m := new(GraphID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (Query_ListIndicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[2], "/gripql.Query/ListIndices", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListIndicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListIndicesClient interface {
	Recv() (*IndexID, error)
	grpc.ClientStream
}

type queryListIndicesClient struct {
	grpc.ClientStream
}

func (x *queryListIndicesClient) Recv() (*IndexID, error) {
	m := new(IndexID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*GraphSchema, error) {
	out := new(GraphSchema)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Traversal(*GraphQuery, Query_TraversalServer) error
	Aggregate(context.Context, *AggregationsRequest) (*NamedAggregationResult, error)
	GetVertex(context.Context, *ElementID) (*Vertex, error)
	GetEdge(context.Context, *ElementID) (*Edge, error)
	GetTimestamp(context.Context, *GraphID) (*Timestamp, error)
	ListGraphs(*Empty, Query_ListGraphsServer) error
	ListIndices(*GraphID, Query_ListIndicesServer) error
	GetSchema(context.Context, *GraphID) (*GraphSchema, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Traversal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Traversal(m, &queryTraversalServer{stream})
}

type Query_TraversalServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryTraversalServer struct {
	grpc.ServerStream
}

func (x *queryTraversalServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Aggregate(ctx, req.(*AggregationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestamp(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGraphs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListGraphs(m, &queryListGraphsServer{stream})
}

type Query_ListGraphsServer interface {
	Send(*GraphID) error
	grpc.ServerStream
}

type queryListGraphsServer struct {
	grpc.ServerStream
}

func (x *queryListGraphsServer) Send(m *GraphID) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_ListIndices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListIndices(m, &queryListIndicesServer{stream})
}

type Query_ListIndicesServer interface {
	Send(*IndexID) error
	grpc.ServerStream
}

type queryListIndicesServer struct {
	grpc.ServerStream
}

func (x *queryListIndicesServer) Send(m *IndexID) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aggregate",
			Handler:    _Query_Aggregate_Handler,
		},
		{
			MethodName: "GetVertex",
			Handler:    _Query_GetVertex_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _Query_GetEdge_Handler,
		},
		{
			MethodName: "GetTimestamp",
			Handler:    _Query_GetTimestamp_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Traversal",
			Handler:       _Query_Traversal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListGraphs",
			Handler:       _Query_ListGraphs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIndices",
			Handler:       _Query_ListIndices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripql.proto",
}

// EditClient is the client API for Edit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EditClient interface {
	AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error)
	AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
}

type editClient struct {
	cc *grpc.ClientConn
}

func NewEditClient(cc *grpc.ClientConn) EditClient {
	return &editClient{cc}
}

func (c *editClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Edit_serviceDesc.Streams[0], "/gripql.Edit/BulkAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &editBulkAddClient{stream}
	return x, nil
}

type Edit_BulkAddClient interface {
	Send(*GraphElement) error
	CloseAndRecv() (*EditResult, error)
	grpc.ClientStream
}

type editBulkAddClient struct {
	grpc.ClientStream
}

func (x *editBulkAddClient) Send(m *GraphElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *editBulkAddClient) CloseAndRecv() (*EditResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EditResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *editClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditServer is the server API for Edit service.
type EditServer interface {
	AddVertex(context.Context, *GraphElement) (*EditResult, error)
	AddEdge(context.Context, *GraphElement) (*EditResult, error)
	BulkAdd(Edit_BulkAddServer) error
	AddGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteVertex(context.Context, *ElementID) (*EditResult, error)
	DeleteEdge(context.Context, *ElementID) (*EditResult, error)
	AddIndex(context.Context, *IndexID) (*EditResult, error)
	DeleteIndex(context.Context, *IndexID) (*EditResult, error)
}

func RegisterEditServer(s *grpc.Server, srv EditServer) {
	s.RegisterService(&_Edit_serviceDesc, srv)
}

func _Edit_AddVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddVertex(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddEdge(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_BulkAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EditServer).BulkAdd(&editBulkAddServer{stream})
}

type Edit_BulkAddServer interface {
	SendAndClose(*EditResult) error
	Recv() (*GraphElement, error)
	grpc.ServerStream
}

type editBulkAddServer struct {
	grpc.ServerStream
}

func (x *editBulkAddServer) SendAndClose(m *EditResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *editBulkAddServer) Recv() (*GraphElement, error) {
	m := new(GraphElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Edit_AddGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Edit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Edit",
	HandlerType: (*EditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVertex",
			Handler:    _Edit_AddVertex_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _Edit_AddEdge_Handler,
		},
		{
			MethodName: "AddGraph",
			Handler:    _Edit_AddGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Edit_DeleteGraph_Handler,
		},
		{
			MethodName: "DeleteVertex",
			Handler:    _Edit_DeleteVertex_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _Edit_DeleteEdge_Handler,
		},
		{
			MethodName: "AddIndex",
			Handler:    _Edit_AddIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _Edit_DeleteIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkAdd",
			Handler:       _Edit_BulkAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gripql.proto",
}

func init() { proto.RegisterFile("gripql.proto", fileDescriptor_gripql_e7dfd1bd7b02b794) }

var fileDescriptor_gripql_e7dfd1bd7b02b794 = []byte{
	// 2077 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0xc0, 0x5f, 0x1c, 0x52, 0x32, 0xb4, 0x96, 0x6d, 0x88, 0x91, 0x2d, 0x75, 0xe3, 0xc4,
	0x32, 0x63, 0x8b, 0xb2, 0xe3, 0x4c, 0x1d, 0xa5, 0x33, 0x1d, 0xc9, 0x42, 0x25, 0xd6, 0x32, 0x65,
	0x43, 0x94, 0xdc, 0xa4, 0x4d, 0x35, 0x10, 0xb1, 0x26, 0x31, 0x22, 0x01, 0x1a, 0x58, 0x72, 0xac,
	0x7a, 0x3c, 0x99, 0xe9, 0x2b, 0xf4, 0x09, 0x9a, 0xdb, 0xbe, 0x45, 0x2e, 0x7b, 0xdb, 0xbb, 0x4e,
	0x2f, 0xfb, 0x20, 0x9d, 0x5d, 0x2c, 0x40, 0x40, 0x04, 0x6d, 0x68, 0xa6, 0x57, 0xe4, 0xee, 0x7e,
	0xe7, 0x3b, 0x67, 0xcf, 0xdf, 0xee, 0x02, 0xaa, 0x5d, 0xcf, 0x1e, 0xbe, 0xed, 0x6f, 0x0c, 0x3d,
	0x97, 0xba, 0xa8, 0x18, 0x8c, 0x6a, 0x2b, 0x5d, 0xd7, 0xed, 0xf6, 0x49, 0xc3, 0x1c, 0xda, 0x0d,
	0xd3, 0x71, 0x5c, 0x6a, 0x52, 0xdb, 0x75, 0xfc, 0x00, 0x15, 0xad, 0xf2, 0xd1, 0xd9, 0xe8, 0x4d,
	0xc3, 0xa7, 0xde, 0xa8, 0x43, 0x83, 0x55, 0x3c, 0x80, 0xc2, 0x9e, 0x67, 0x0e, 0x7b, 0x68, 0x09,
	0x0a, 0x5d, 0xf6, 0x47, 0x93, 0xd6, 0xa4, 0x75, 0xc5, 0x08, 0x06, 0xa8, 0x0e, 0xe5, 0x31, 0xf1,
	0xa8, 0xdd, 0x21, 0xbe, 0x26, 0xaf, 0xe5, 0xd6, 0x2b, 0x8f, 0x17, 0x36, 0x84, 0x0d, 0x27, 0xc4,
	0xa3, 0xe4, 0x9d, 0x11, 0xad, 0x23, 0x0c, 0x05, 0x62, 0x75, 0x89, 0xaf, 0xe5, 0x38, 0xb0, 0x1a,
	0x02, 0x75, 0xab, 0x4b, 0x8c, 0x60, 0x09, 0xbf, 0x04, 0xe0, 0xea, 0x5e, 0x8d, 0x88, 0x77, 0x31,
	0x43, 0xe7, 0x03, 0x28, 0xbc, 0x65, 0xcb, 0x42, 0xe1, 0xcd, 0x90, 0x87, 0x0b, 0x1e, 0x51, 0x93,
	0x92, 0x01, 0x71, 0xa8, 0x11, 0x80, 0xf0, 0x53, 0x28, 0x73, 0xb2, 0x23, 0x42, 0x27, 0x92, 0x52,
	0x16, 0xc9, 0xef, 0x60, 0xfe, 0x85, 0x49, 0x3b, 0xbd, 0x48, 0xbc, 0x0e, 0x25, 0xb6, 0x62, 0x13,
	0x5f, 0x10, 0xa8, 0x21, 0x41, 0x08, 0x31, 0x42, 0x00, 0xfe, 0x45, 0x81, 0x85, 0x24, 0x2d, 0xaa,
	0x83, 0x34, 0xe6, 0x3b, 0xa9, 0x3c, 0xae, 0x6d, 0x04, 0x4e, 0xdf, 0x08, 0x9d, 0xbe, 0x71, 0x60,
	0xfb, 0xf4, 0xc4, 0xec, 0x8f, 0xc8, 0xfe, 0x9c, 0x21, 0x8d, 0x19, 0x96, 0x68, 0x72, 0x16, 0x2c,
	0x41, 0x0f, 0x40, 0xb6, 0x1d, 0x0d, 0x32, 0x80, 0x65, 0xdb, 0x41, 0x1b, 0x90, 0x73, 0x47, 0x54,
	0xab, 0x64, 0x80, 0x33, 0x20, 0xda, 0x84, 0xfc, 0x99, 0x4b, 0x7b, 0xda, 0x42, 0x06, 0x01, 0x8e,
	0x44, 0x0d, 0xc8, 0xdb, 0xce, 0x29, 0xd1, 0xaa, 0x59, 0x54, 0xd8, 0x8e, 0x8e, 0x1e, 0x41, 0xc1,
	0x1d, 0xd1, 0x53, 0xa2, 0xcd, 0x67, 0xd1, 0xe1, 0x8e, 0xa8, 0x8e, 0xbe, 0x86, 0x22, 0xd3, 0x75,
	0x4a, 0xb4, 0x6b, 0x19, 0x64, 0x0a, 0x0c, 0xab, 0x0b, 0xc3, 0xc6, 0x9a, 0x9a, 0xcd, 0xb0, 0x93,
	0xd0, 0xb0, 0xb1, 0xb6, 0x98, 0xd1, 0xb0, 0x93, 0xc8, 0xb0, 0xb1, 0x86, 0xb2, 0x1a, 0x76, 0x82,
	0x54, 0x90, 0x4d, 0x5f, 0x5b, 0x62, 0x49, 0xce, 0xa2, 0x64, 0xfa, 0xe8, 0x11, 0x14, 0x7d, 0xd2,
	0x27, 0x1d, 0xaa, 0xdd, 0xe0, 0x34, 0xb7, 0xc2, 0x4c, 0x3b, 0xe2, 0xb3, 0x51, 0x52, 0xed, 0xcf,
	0x19, 0x02, 0x88, 0x6e, 0x42, 0xa1, 0x6f, 0x0f, 0x6c, 0xaa, 0x69, 0x6b, 0xd2, 0xfa, 0x3c, 0x23,
	0xe7, 0x43, 0xb4, 0x04, 0x79, 0xff, 0xdc, 0x1e, 0x6a, 0xcb, 0x62, 0x9a, 0x8f, 0xd0, 0x17, 0x50,
	0xf0, 0x4c, 0xa7, 0x4b, 0xb4, 0x5f, 0x71, 0xfe, 0xf9, 0x90, 0xdf, 0x60, 0x93, 0x4c, 0x98, 0xaf,
	0xa2, 0x87, 0x50, 0x18, 0xb0, 0x1a, 0xd0, 0x56, 0x38, 0xec, 0x46, 0x08, 0x4b, 0x14, 0x06, 0x83,
	0x73, 0x14, 0xba, 0x0f, 0xb9, 0x9e, 0xe9, 0x6b, 0xb7, 0x93, 0xe0, 0x7d, 0xd3, 0xd7, 0xdf, 0x0d,
	0x3d, 0xe2, 0xfb, 0xb6, 0xeb, 0x30, 0xdf, 0xf6, 0x4c, 0x1f, 0x7d, 0x0b, 0x4a, 0xcf, 0xf4, 0x4f,
	0xfb, 0xe6, 0x19, 0xe9, 0x6b, 0x38, 0x83, 0xaf, 0xca, 0x3d, 0xd3, 0x3f, 0x60, 0x68, 0xf4, 0x0d,
	0x94, 0x98, 0xe8, 0x39, 0xb9, 0xd0, 0x3e, 0xcf, 0x20, 0x58, 0xec, 0x99, 0xfe, 0x73, 0x72, 0xc1,
	0x42, 0xc3, 0xc4, 0x6c, 0x4b, 0xbb, 0x9b, 0x25, 0x34, 0x3d, 0xd3, 0x6f, 0x5a, 0xcc, 0xab, 0x1d,
	0x77, 0xe4, 0x50, 0xed, 0x8e, 0x88, 0x4e, 0x30, 0x44, 0x4f, 0xa0, 0xf8, 0xc6, 0x26, 0x7d, 0xcb,
	0xd7, 0x6a, 0x59, 0x4c, 0x08, 0xb0, 0xe8, 0x29, 0x94, 0x2d, 0xdb, 0xa7, 0xb6, 0xd3, 0xa1, 0xda,
	0x67, 0x59, 0xf6, 0x1c, 0xa2, 0xd1, 0x13, 0x50, 0xcc, 0x6e, 0xd7, 0x23, 0x5d, 0x93, 0x12, 0x6d,
	0x95, 0x8b, 0x2e, 0x85, 0xfe, 0xdd, 0x16, 0x0b, 0xac, 0xa9, 0xef, 0xcf, 0x19, 0x13, 0x20, 0xda,
	0x84, 0xa2, 0x47, 0x1c, 0x8b, 0x78, 0xda, 0x1a, 0x17, 0xb9, 0x39, 0xa5, 0x2d, 0xb2, 0x30, 0xc0,
	0xed, 0x54, 0x40, 0xf1, 0xc3, 0xe4, 0xc2, 0x0d, 0x28, 0xf0, 0x7c, 0x60, 0x8d, 0xd8, 0xa7, 0xa6,
	0x47, 0x79, 0xfb, 0x2a, 0x18, 0xc1, 0x00, 0xa9, 0x90, 0x23, 0x8e, 0xc5, 0xdb, 0x54, 0xc1, 0x60,
	0x7f, 0xf1, 0x19, 0x5c, 0x8f, 0x1b, 0x63, 0x90, 0xb7, 0x23, 0xe2, 0xd3, 0x19, 0x7d, 0xfc, 0x1b,
	0xa8, 0x9a, 0x31, 0xb0, 0x68, 0xe7, 0x8b, 0x97, 0x77, 0x45, 0x8c, 0x04, 0x0c, 0xeb, 0x50, 0x8d,
	0xeb, 0x98, 0xa2, 0x91, 0xb2, 0xd1, 0xfc, 0x47, 0x02, 0x25, 0x5a, 0x43, 0x08, 0xf2, 0x8e, 0x39,
	0x20, 0xc2, 0x40, 0xfe, 0x1f, 0x3d, 0x84, 0x3c, 0x25, 0xde, 0x40, 0xb4, 0xe1, 0xa8, 0x02, 0xdb,
	0xc4, 0x1b, 0xc4, 0x0c, 0x60, 0x15, 0xc5, 0x60, 0xe8, 0xb7, 0x00, 0x43, 0xe2, 0x75, 0x88, 0x43,
	0xed, 0x3e, 0xd1, 0x72, 0x5c, 0xe8, 0x76, 0x28, 0xf4, 0x32, 0x5a, 0x49, 0x8a, 0xc6, 0x44, 0xd0,
	0x6f, 0x40, 0xe9, 0xd9, 0x3e, 0x75, 0xbb, 0x9e, 0x39, 0xd0, 0xf2, 0x5c, 0x7e, 0x25, 0x2a, 0xa1,
	0x70, 0x21, 0x29, 0x3e, 0x11, 0xd8, 0x99, 0x87, 0x4a, 0x6c, 0x7f, 0xf8, 0x15, 0x5c, 0xbb, 0x64,
	0x28, 0x8b, 0x42, 0x50, 0x6d, 0x22, 0x0a, 0x7c, 0xc0, 0x66, 0x79, 0x72, 0xf2, 0x6d, 0x2a, 0x46,
	0x30, 0x60, 0xfe, 0xf0, 0xed, 0xbf, 0x04, 0xdb, 0x98, 0x37, 0xf8, 0x7f, 0x7c, 0x0a, 0x37, 0x52,
	0xb7, 0x71, 0x25, 0xe2, 0x1a, 0x94, 0xc5, 0x96, 0x83, 0x7b, 0x80, 0x64, 0x44, 0x63, 0xfc, 0x67,
	0x58, 0x4a, 0xdb, 0xe7, 0x55, 0xf9, 0x6d, 0x87, 0x12, 0x6f, 0x6c, 0xf6, 0x85, 0xf1, 0xd1, 0x18,
	0xff, 0x53, 0x82, 0x9b, 0x2d, 0x73, 0x40, 0xac, 0x18, 0xb9, 0x41, 0xfc, 0x51, 0x9f, 0xa2, 0xf6,
	0xa5, 0x24, 0x0a, 0xae, 0x28, 0x9b, 0xa1, 0xfb, 0xd3, 0xa5, 0x12, 0x85, 0xa7, 0x3b, 0xd4, 0xbb,
	0x48, 0xe6, 0x58, 0xed, 0x07, 0x58, 0x9c, 0x82, 0xb0, 0xaa, 0x61, 0x9d, 0x2b, 0xd8, 0x0b, 0xfb,
	0x8b, 0x1a, 0x50, 0x18, 0xb3, 0x32, 0x14, 0x99, 0xb6, 0x9c, 0x52, 0xd7, 0x81, 0x42, 0x23, 0xc0,
	0x6d, 0xc9, 0x4f, 0x25, 0xdc, 0x4a, 0x70, 0x8b, 0x6d, 0x7c, 0x0b, 0xa5, 0xb3, 0x51, 0xe7, 0x9c,
	0xd0, 0xb0, 0x9a, 0x56, 0x67, 0x72, 0xed, 0x70, 0x9c, 0x11, 0xe2, 0xf1, 0xf7, 0x70, 0x6b, 0x06,
	0x06, 0xad, 0x4f, 0x2c, 0x9e, 0xd9, 0x42, 0x82, 0x9d, 0x2c, 0xc5, 0x77, 0x22, 0x09, 0x73, 0xf1,
	0x01, 0x2c, 0x26, 0x8e, 0x00, 0xd6, 0xe1, 0xd0, 0xaf, 0xa1, 0x42, 0xa2, 0x99, 0xb0, 0x6a, 0xd3,
	0x8f, 0x0c, 0x23, 0x8e, 0xc4, 0xff, 0x96, 0x60, 0x3e, 0xb1, 0x8c, 0x1e, 0x42, 0xce, 0x74, 0x2c,
	0x61, 0xdf, 0x72, 0x2a, 0x05, 0x53, 0xc9, 0x4e, 0x1e, 0xd3, 0xb1, 0xd0, 0x57, 0x20, 0xbb, 0xde,
	0x65, 0x5f, 0xa7, 0xa1, 0x65, 0xd7, 0x63, 0x27, 0x9a, 0xe3, 0x52, 0x51, 0xce, 0xb3, 0x4f, 0x34,
	0xc7, 0xe5, 0x2d, 0xba, 0xe3, 0x3a, 0x96, 0xcd, 0xfc, 0x27, 0xea, 0x77, 0x29, 0x26, 0xf0, 0x2c,
	0x5c, 0x63, 0x75, 0x1b, 0x01, 0x77, 0xaa, 0x00, 0x93, 0xdd, 0xe1, 0x9f, 0xa0, 0x1a, 0x87, 0xa6,
	0x24, 0xcb, 0x83, 0x64, 0xb2, 0xcc, 0x0a, 0x47, 0x00, 0x42, 0x8d, 0xb8, 0x4d, 0x6c, 0x13, 0x0b,
	0x93, 0xce, 0x18, 0x69, 0x89, 0x99, 0x83, 0xef, 0xc1, 0xb5, 0x4b, 0x57, 0x0c, 0x16, 0xd4, 0x81,
	0xe9, 0x9d, 0x07, 0x31, 0x52, 0x8c, 0x60, 0x80, 0x3b, 0xa0, 0x04, 0x40, 0x66, 0xe6, 0x3a, 0x14,
	0xc7, 0xfc, 0xba, 0x2f, 0x82, 0x70, 0xe9, 0x11, 0xc0, 0xce, 0x97, 0x60, 0x1d, 0x61, 0xc8, 0xb3,
	0x9b, 0xbe, 0xb0, 0x3e, 0xf1, 0x06, 0x60, 0x9d, 0x94, 0xad, 0xed, 0x94, 0xd9, 0xa9, 0xc5, 0xf2,
	0x0f, 0xff, 0x2c, 0x01, 0x44, 0x5a, 0x7c, 0xb4, 0x03, 0xe0, 0x47, 0x23, 0x91, 0x32, 0x38, 0x79,
	0x33, 0xe2, 0x0f, 0x9b, 0xc9, 0xdf, 0xa0, 0x2a, 0x63, 0x52, 0xb5, 0x97, 0xe1, 0x06, 0x3f, 0x56,
	0x91, 0xf7, 0x92, 0x4e, 0x5e, 0x9c, 0xd2, 0x11, 0xaf, 0xc4, 0x1f, 0xa1, 0x18, 0x6c, 0x93, 0x11,
	0x75, 0x6d, 0x2b, 0x24, 0xea, 0xda, 0xd6, 0xa4, 0x75, 0xc9, 0xf1, 0xd6, 0xf5, 0x15, 0xe4, 0x2d,
	0x93, 0x9a, 0x22, 0xab, 0x6e, 0x4d, 0x85, 0xf0, 0x88, 0xbf, 0xc0, 0x0c, 0x0e, 0xc2, 0x3f, 0x41,
	0x9e, 0x79, 0x27, 0x33, 0x39, 0x82, 0xfc, 0x1b, 0xcf, 0x1d, 0x70, 0x72, 0xc5, 0xe0, 0xff, 0xd1,
	0x02, 0xc8, 0xd4, 0xe5, 0x39, 0xa9, 0x18, 0x32, 0x75, 0x23, 0x03, 0x0a, 0x59, 0x0c, 0xf8, 0x87,
	0x0c, 0x15, 0x7e, 0xd5, 0x13, 0x4d, 0xe6, 0xff, 0x1a, 0x6c, 0xb4, 0x3b, 0xd5, 0x79, 0x19, 0xf6,
	0xce, 0xc7, 0x3b, 0xef, 0xfe, 0x5c, 0xb2, 0xd3, 0xa2, 0x27, 0x89, 0xcc, 0x08, 0x8a, 0x0f, 0x4d,
	0x67, 0x06, 0x3b, 0x71, 0x27, 0xb8, 0xd8, 0xf5, 0xa8, 0x90, 0xed, 0x7a, 0x34, 0xb9, 0x0e, 0x16,
	0xc3, 0x4b, 0x36, 0x1f, 0xc6, 0x52, 0x76, 0x05, 0x40, 0xb7, 0x6c, 0x2a, 0x7c, 0xb5, 0x00, 0x72,
	0x14, 0x33, 0xd9, 0xb6, 0xb0, 0x03, 0x55, 0xfe, 0x2a, 0xd4, 0xfb, 0x51, 0x6d, 0xa5, 0xdc, 0x8c,
	0xbe, 0x8c, 0x3c, 0x2c, 0xa7, 0x79, 0x38, 0xf2, 0xef, 0x9a, 0xf0, 0x6f, 0x6e, 0xda, 0xbf, 0x81,
	0x77, 0xf1, 0x2a, 0x94, 0xb8, 0xbe, 0xe6, 0x6e, 0xba, 0x2a, 0xfc, 0x08, 0x14, 0x61, 0xcb, 0x2c,
	0x88, 0xd8, 0x83, 0x1c, 0xed, 0xe1, 0x39, 0x94, 0x9a, 0x8e, 0x45, 0xde, 0xcd, 0x14, 0x48, 0xcf,
	0xcb, 0xe8, 0xbc, 0xce, 0xc5, 0xce, 0x6b, 0x7c, 0x1f, 0x94, 0xb6, 0x3d, 0x20, 0x3e, 0x35, 0x07,
	0x43, 0xb4, 0x02, 0x0a, 0x0d, 0x07, 0x82, 0x72, 0x32, 0x81, 0x7f, 0x84, 0x4a, 0xf0, 0xa2, 0xee,
	0xf4, 0xc8, 0xc0, 0x4c, 0x7c, 0x7a, 0x90, 0xb2, 0x7e, 0x7a, 0x90, 0x67, 0x7f, 0x7a, 0x28, 0x41,
	0x41, 0x1f, 0x0c, 0xe9, 0x45, 0xfd, 0x67, 0x09, 0x94, 0x49, 0x07, 0xbe, 0x01, 0x8b, 0xc7, 0xad,
	0xe7, 0xad, 0xc3, 0xd7, 0xad, 0xd3, 0x67, 0x87, 0xad, 0xdd, 0x66, 0xbb, 0x79, 0xd8, 0x52, 0xe7,
	0x50, 0x11, 0x64, 0xfd, 0x95, 0x2a, 0xa1, 0x12, 0xe4, 0x5a, 0xfa, 0x2b, 0x55, 0x66, 0x13, 0x7b,
	0x6d, 0x35, 0xc7, 0x26, 0xf6, 0xda, 0xba, 0x9a, 0x67, 0x13, 0x07, 0x6d, 0xb5, 0xc0, 0x26, 0x0e,
	0xda, 0xba, 0x5a, 0x44, 0x00, 0xc5, 0x66, 0xeb, 0xa8, 0xb9, 0xab, 0xab, 0x25, 0x54, 0x81, 0xd2,
	0xe1, 0x71, 0x9b, 0x0f, 0xca, 0x6c, 0xb0, 0xa3, 0xb7, 0x5f, 0xeb, 0x7a, 0x4b, 0x55, 0x18, 0xea,
	0x75, 0xb3, 0xbd, 0xdf, 0x6c, 0xa9, 0xc0, 0x16, 0xd8, 0xff, 0xc3, 0xe3, 0xb6, 0x5a, 0x41, 0x55,
	0x28, 0x3f, 0x3b, 0x6c, 0xb5, 0xb7, 0x9b, 0xad, 0x23, 0xb5, 0x5a, 0xff, 0x0e, 0x94, 0xdf, 0x31,
	0x07, 0xb6, 0x2f, 0x86, 0x84, 0xe1, 0x84, 0x8d, 0xea, 0x1c, 0x23, 0x38, 0x6a, 0x1b, 0xcd, 0xd6,
	0x9e, 0x2a, 0xb1, 0x85, 0xd6, 0xf1, 0x0b, 0xdd, 0x68, 0x3e, 0x53, 0x65, 0x54, 0x86, 0xfc, 0xce,
	0xe1, 0xe1, 0x81, 0x9a, 0x7b, 0xfc, 0x4b, 0x01, 0x0a, 0xc1, 0x17, 0x96, 0x1f, 0x40, 0x69, 0x7b,
	0xe6, 0x98, 0x78, 0xbe, 0xd9, 0x47, 0x28, 0xf1, 0x3d, 0x84, 0x03, 0x6a, 0xd7, 0x13, 0x9f, 0x38,
	0x82, 0xac, 0xc6, 0xf8, 0xaf, 0xff, 0xfa, 0xef, 0xdf, 0xe4, 0x15, 0x7c, 0xab, 0x31, 0x7e, 0xd4,
	0xe0, 0x31, 0x6f, 0xbc, 0xe7, 0x3f, 0x1f, 0x1a, 0xfc, 0xd3, 0xc9, 0x96, 0x54, 0xdf, 0x94, 0xd0,
	0x30, 0x7e, 0xc1, 0xfe, 0x2c, 0xed, 0xb1, 0x22, 0xde, 0x07, 0xb5, 0x4f, 0x54, 0x3b, 0xfe, 0x92,
	0xeb, 0x5b, 0xc3, 0x9f, 0x4d, 0xeb, 0x8b, 0xde, 0x3a, 0x5b, 0x52, 0x1d, 0x1d, 0x83, 0xb2, 0x47,
	0xa8, 0x68, 0xc6, 0x51, 0xd3, 0x8e, 0xf2, 0xbb, 0x76, 0x29, 0x41, 0xf0, 0x17, 0x9c, 0x77, 0x15,
	0xdd, 0x9e, 0xe6, 0x0d, 0x2a, 0xac, 0xf1, 0xde, 0xb6, 0x3e, 0xa0, 0x43, 0x28, 0xed, 0x11, 0xca,
	0x9b, 0x70, 0x0a, 0x69, 0x22, 0x99, 0xf0, 0xe7, 0x9c, 0xf2, 0x36, 0x4a, 0x31, 0x95, 0xa5, 0x59,
	0x40, 0xf8, 0x1a, 0xaa, 0x7b, 0x84, 0x4e, 0xf2, 0xfe, 0x5a, 0xc2, 0xf1, 0xcd, 0xdd, 0x5a, 0xa4,
	0x26, 0xc2, 0x7c, 0x8c, 0x38, 0x2a, 0x11, 0xb4, 0x0d, 0xc0, 0xee, 0x2e, 0x9c, 0xc6, 0x47, 0xd1,
	0xa3, 0x9e, 0xe7, 0x75, 0xed, 0xb2, 0x16, 0xbc, 0xc8, 0x29, 0x2b, 0x48, 0x89, 0x28, 0x37, 0x25,
	0x64, 0x40, 0x85, 0x51, 0x34, 0x1d, 0x8b, 0x57, 0xce, 0x94, 0x69, 0xd1, 0x84, 0xe8, 0x01, 0x78,
	0x95, 0xb3, 0x2c, 0xa3, 0x94, 0x64, 0xb0, 0x19, 0x64, 0x53, 0x42, 0x47, 0x3c, 0x2e, 0xa2, 0x6e,
	0xa7, 0x18, 0xaf, 0x27, 0x3f, 0xc3, 0x71, 0x14, 0x5e, 0xe3, 0xac, 0x35, 0xa4, 0x4d, 0xb3, 0xfa,
	0x1c, 0xf1, 0xf8, 0xef, 0x45, 0x76, 0x30, 0xda, 0x14, 0x9d, 0x82, 0xb2, 0x6d, 0x59, 0x22, 0xea,
	0x4b, 0x09, 0x32, 0x11, 0xa5, 0x1a, 0x9a, 0xc4, 0x28, 0x6c, 0xcd, 0x78, 0x9d, 0x6b, 0xc0, 0x58,
	0x9b, 0x15, 0xfc, 0xad, 0xb0, 0xcd, 0x7e, 0x0f, 0xa5, 0x6d, 0xcb, 0xe2, 0xf1, 0xcf, 0x4e, 0x7f,
	0x97, 0xd3, 0xdf, 0xc1, 0x37, 0xd3, 0x13, 0x61, 0x2b, 0x38, 0xfd, 0xf6, 0xa1, 0xb4, 0x33, 0xea,
	0x9f, 0x6f, 0x5b, 0xd6, 0x15, 0xa8, 0x45, 0xdc, 0xf0, 0x24, 0x6e, 0xeb, 0x12, 0xfa, 0x3d, 0x94,
	0xb7, 0x2d, 0x2b, 0xf8, 0x56, 0x3b, 0xe5, 0xe2, 0x34, 0x96, 0x65, 0xce, 0x72, 0x1d, 0x2f, 0x4e,
	0x19, 0x88, 0x5e, 0x40, 0x65, 0x97, 0xf4, 0x09, 0x25, 0x57, 0xa7, 0xab, 0xa7, 0xd0, 0xfd, 0x09,
	0xaa, 0x01, 0xdd, 0xec, 0xca, 0x4c, 0x63, 0x14, 0xd5, 0x59, 0xff, 0x44, 0x75, 0xfe, 0x01, 0x20,
	0x60, 0x9f, 0x55, 0xa0, 0x69, 0xdc, 0xa2, 0x9a, 0xea, 0x1f, 0x2d, 0xd3, 0x3f, 0x72, 0x97, 0xf2,
	0x3c, 0x47, 0x97, 0xd3, 0x3e, 0x95, 0xb5, 0xce, 0x59, 0xef, 0xe2, 0xd5, 0x19, 0xa5, 0xd0, 0x78,
	0xcf, 0x8f, 0xc2, 0x0f, 0xac, 0x57, 0x75, 0x42, 0x1f, 0x5f, 0x81, 0xbf, 0xc1, 0xf9, 0xef, 0xd7,
	0xef, 0x7d, 0x82, 0xbf, 0xf1, 0x9e, 0x1f, 0xae, 0x1f, 0xce, 0x8a, 0xfc, 0x22, 0xf3, 0xf5, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0x6a, 0xb6, 0xbf, 0x18, 0x18, 0x00, 0x00,
}
