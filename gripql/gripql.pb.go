// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gripql.proto

/*
Package gripql is a generated protocol buffer package.

It is generated from these files:
	gripql.proto

It has these top-level messages:
	Graph
	GraphQuery
	QuerySet
	MatchQuerySet
	GraphStatement
	Range
	AggregationsRequest
	Aggregations
	Aggregate
	TermAggregation
	PercentileAggregation
	HistogramAggregation
	NamedAggregationResult
	AggregationResult
	AggregationResultBucket
	HasExpressionList
	HasExpression
	HasCondition
	SelectStatement
	Selection
	Selections
	Vertex
	Edge
	QueryResult
	EditResult
	GraphElement
	GraphID
	ElementID
	IndexID
	Timestamp
	Empty
	ListGraphsResponse
	ListIndicesResponse
	ListLabelsResponse
*/
package gripql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Condition int32

const (
	Condition_UNKNOWN_CONDITION Condition = 0
	Condition_EQ                Condition = 1
	Condition_NEQ               Condition = 2
	Condition_GT                Condition = 3
	Condition_GTE               Condition = 4
	Condition_LT                Condition = 5
	Condition_LTE               Condition = 6
	Condition_INSIDE            Condition = 7
	Condition_OUTSIDE           Condition = 8
	Condition_BETWEEN           Condition = 9
	Condition_WITHIN            Condition = 10
	Condition_WITHOUT           Condition = 11
	Condition_CONTAINS          Condition = 12
)

var Condition_name = map[int32]string{
	0:  "UNKNOWN_CONDITION",
	1:  "EQ",
	2:  "NEQ",
	3:  "GT",
	4:  "GTE",
	5:  "LT",
	6:  "LTE",
	7:  "INSIDE",
	8:  "OUTSIDE",
	9:  "BETWEEN",
	10: "WITHIN",
	11: "WITHOUT",
	12: "CONTAINS",
}
var Condition_value = map[string]int32{
	"UNKNOWN_CONDITION": 0,
	"EQ":                1,
	"NEQ":               2,
	"GT":                3,
	"GTE":               4,
	"LT":                5,
	"LTE":               6,
	"INSIDE":            7,
	"OUTSIDE":           8,
	"BETWEEN":           9,
	"WITHIN":            10,
	"WITHOUT":           11,
	"CONTAINS":          12,
}

func (x Condition) String() string {
	return proto.EnumName(Condition_name, int32(x))
}
func (Condition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FieldType int32

const (
	FieldType_UNKNOWN FieldType = 0
	FieldType_STRING  FieldType = 1
	FieldType_NUMERIC FieldType = 2
	FieldType_BOOL    FieldType = 3
)

var FieldType_name = map[int32]string{
	0: "UNKNOWN",
	1: "STRING",
	2: "NUMERIC",
	3: "BOOL",
}
var FieldType_value = map[string]int32{
	"UNKNOWN": 0,
	"STRING":  1,
	"NUMERIC": 2,
	"BOOL":    3,
}

func (x FieldType) String() string {
	return proto.EnumName(FieldType_name, int32(x))
}
func (FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Graph struct {
	Graph    string    `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Vertices []*Vertex `protobuf:"bytes,2,rep,name=vertices" json:"vertices,omitempty"`
	Edges    []*Edge   `protobuf:"bytes,3,rep,name=edges" json:"edges,omitempty"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (m *Graph) String() string            { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Graph) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *Graph) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

func (m *Graph) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type GraphQuery struct {
	Graph string            `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Query []*GraphStatement `protobuf:"bytes,2,rep,name=query" json:"query,omitempty"`
}

func (m *GraphQuery) Reset()                    { *m = GraphQuery{} }
func (m *GraphQuery) String() string            { return proto.CompactTextString(m) }
func (*GraphQuery) ProtoMessage()               {}
func (*GraphQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GraphQuery) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphQuery) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type QuerySet struct {
	Query []*GraphStatement `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
}

func (m *QuerySet) Reset()                    { *m = QuerySet{} }
func (m *QuerySet) String() string            { return proto.CompactTextString(m) }
func (*QuerySet) ProtoMessage()               {}
func (*QuerySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QuerySet) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type MatchQuerySet struct {
	Queries []*QuerySet `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *MatchQuerySet) Reset()                    { *m = MatchQuerySet{} }
func (m *MatchQuerySet) String() string            { return proto.CompactTextString(m) }
func (*MatchQuerySet) ProtoMessage()               {}
func (*MatchQuerySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MatchQuerySet) GetQueries() []*QuerySet {
	if m != nil {
		return m.Queries
	}
	return nil
}

type GraphStatement struct {
	// Types that are valid to be assigned to Statement:
	//	*GraphStatement_V
	//	*GraphStatement_E
	//	*GraphStatement_In
	//	*GraphStatement_Out
	//	*GraphStatement_Both
	//	*GraphStatement_InE
	//	*GraphStatement_OutE
	//	*GraphStatement_BothE
	//	*GraphStatement_InV
	//	*GraphStatement_OutV
	//	*GraphStatement_BothV
	//	*GraphStatement_As
	//	*GraphStatement_Select
	//	*GraphStatement_Limit
	//	*GraphStatement_Skip
	//	*GraphStatement_Range
	//	*GraphStatement_Match
	//	*GraphStatement_Has
	//	*GraphStatement_HasLabel
	//	*GraphStatement_HasKey
	//	*GraphStatement_HasId
	//	*GraphStatement_Count
	//	*GraphStatement_Fields
	//	*GraphStatement_Distinct
	//	*GraphStatement_Aggregate
	//	*GraphStatement_Render
	Statement isGraphStatement_Statement `protobuf_oneof:"statement"`
}

func (m *GraphStatement) Reset()                    { *m = GraphStatement{} }
func (m *GraphStatement) String() string            { return proto.CompactTextString(m) }
func (*GraphStatement) ProtoMessage()               {}
func (*GraphStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isGraphStatement_Statement interface{ isGraphStatement_Statement() }

type GraphStatement_V struct {
	V *google_protobuf1.ListValue `protobuf:"bytes,1,opt,name=v,oneof"`
}
type GraphStatement_E struct {
	E *google_protobuf1.ListValue `protobuf:"bytes,2,opt,name=e,oneof"`
}
type GraphStatement_In struct {
	In *google_protobuf1.ListValue `protobuf:"bytes,10,opt,name=in,oneof"`
}
type GraphStatement_Out struct {
	Out *google_protobuf1.ListValue `protobuf:"bytes,11,opt,name=out,oneof"`
}
type GraphStatement_Both struct {
	Both *google_protobuf1.ListValue `protobuf:"bytes,14,opt,name=both,oneof"`
}
type GraphStatement_InE struct {
	InE *google_protobuf1.ListValue `protobuf:"bytes,12,opt,name=in_e,json=inE,oneof"`
}
type GraphStatement_OutE struct {
	OutE *google_protobuf1.ListValue `protobuf:"bytes,13,opt,name=out_e,json=outE,oneof"`
}
type GraphStatement_BothE struct {
	BothE *google_protobuf1.ListValue `protobuf:"bytes,15,opt,name=both_e,json=bothE,oneof"`
}
type GraphStatement_InV struct {
	InV *google_protobuf1.ListValue `protobuf:"bytes,16,opt,name=in_v,json=inV,oneof"`
}
type GraphStatement_OutV struct {
	OutV *google_protobuf1.ListValue `protobuf:"bytes,17,opt,name=out_v,json=outV,oneof"`
}
type GraphStatement_BothV struct {
	BothV *google_protobuf1.ListValue `protobuf:"bytes,18,opt,name=both_v,json=bothV,oneof"`
}
type GraphStatement_As struct {
	As string `protobuf:"bytes,20,opt,name=as,oneof"`
}
type GraphStatement_Select struct {
	Select *SelectStatement `protobuf:"bytes,21,opt,name=select,oneof"`
}
type GraphStatement_Limit struct {
	Limit uint32 `protobuf:"varint,24,opt,name=limit,oneof"`
}
type GraphStatement_Skip struct {
	Skip uint32 `protobuf:"varint,25,opt,name=skip,oneof"`
}
type GraphStatement_Range struct {
	Range *Range `protobuf:"bytes,33,opt,name=range,oneof"`
}
type GraphStatement_Match struct {
	Match *MatchQuerySet `protobuf:"bytes,28,opt,name=match,oneof"`
}
type GraphStatement_Has struct {
	Has *HasExpression `protobuf:"bytes,29,opt,name=has,oneof"`
}
type GraphStatement_HasLabel struct {
	HasLabel *google_protobuf1.ListValue `protobuf:"bytes,34,opt,name=has_label,json=hasLabel,oneof"`
}
type GraphStatement_HasKey struct {
	HasKey *google_protobuf1.ListValue `protobuf:"bytes,35,opt,name=has_key,json=hasKey,oneof"`
}
type GraphStatement_HasId struct {
	HasId *google_protobuf1.ListValue `protobuf:"bytes,36,opt,name=has_id,json=hasId,oneof"`
}
type GraphStatement_Count struct {
	Count string `protobuf:"bytes,30,opt,name=count,oneof"`
}
type GraphStatement_Fields struct {
	Fields *google_protobuf1.ListValue `protobuf:"bytes,26,opt,name=fields,oneof"`
}
type GraphStatement_Distinct struct {
	Distinct *google_protobuf1.ListValue `protobuf:"bytes,27,opt,name=distinct,oneof"`
}
type GraphStatement_Aggregate struct {
	Aggregate *Aggregations `protobuf:"bytes,31,opt,name=aggregate,oneof"`
}
type GraphStatement_Render struct {
	Render *google_protobuf1.Value `protobuf:"bytes,32,opt,name=render,oneof"`
}

func (*GraphStatement_V) isGraphStatement_Statement()         {}
func (*GraphStatement_E) isGraphStatement_Statement()         {}
func (*GraphStatement_In) isGraphStatement_Statement()        {}
func (*GraphStatement_Out) isGraphStatement_Statement()       {}
func (*GraphStatement_Both) isGraphStatement_Statement()      {}
func (*GraphStatement_InE) isGraphStatement_Statement()       {}
func (*GraphStatement_OutE) isGraphStatement_Statement()      {}
func (*GraphStatement_BothE) isGraphStatement_Statement()     {}
func (*GraphStatement_InV) isGraphStatement_Statement()       {}
func (*GraphStatement_OutV) isGraphStatement_Statement()      {}
func (*GraphStatement_BothV) isGraphStatement_Statement()     {}
func (*GraphStatement_As) isGraphStatement_Statement()        {}
func (*GraphStatement_Select) isGraphStatement_Statement()    {}
func (*GraphStatement_Limit) isGraphStatement_Statement()     {}
func (*GraphStatement_Skip) isGraphStatement_Statement()      {}
func (*GraphStatement_Range) isGraphStatement_Statement()     {}
func (*GraphStatement_Match) isGraphStatement_Statement()     {}
func (*GraphStatement_Has) isGraphStatement_Statement()       {}
func (*GraphStatement_HasLabel) isGraphStatement_Statement()  {}
func (*GraphStatement_HasKey) isGraphStatement_Statement()    {}
func (*GraphStatement_HasId) isGraphStatement_Statement()     {}
func (*GraphStatement_Count) isGraphStatement_Statement()     {}
func (*GraphStatement_Fields) isGraphStatement_Statement()    {}
func (*GraphStatement_Distinct) isGraphStatement_Statement()  {}
func (*GraphStatement_Aggregate) isGraphStatement_Statement() {}
func (*GraphStatement_Render) isGraphStatement_Statement()    {}

func (m *GraphStatement) GetStatement() isGraphStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *GraphStatement) GetV() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_V); ok {
		return x.V
	}
	return nil
}

func (m *GraphStatement) GetE() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_E); ok {
		return x.E
	}
	return nil
}

func (m *GraphStatement) GetIn() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_In); ok {
		return x.In
	}
	return nil
}

func (m *GraphStatement) GetOut() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Out); ok {
		return x.Out
	}
	return nil
}

func (m *GraphStatement) GetBoth() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Both); ok {
		return x.Both
	}
	return nil
}

func (m *GraphStatement) GetInE() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_InE); ok {
		return x.InE
	}
	return nil
}

func (m *GraphStatement) GetOutE() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_OutE); ok {
		return x.OutE
	}
	return nil
}

func (m *GraphStatement) GetBothE() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_BothE); ok {
		return x.BothE
	}
	return nil
}

func (m *GraphStatement) GetInV() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_InV); ok {
		return x.InV
	}
	return nil
}

func (m *GraphStatement) GetOutV() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_OutV); ok {
		return x.OutV
	}
	return nil
}

func (m *GraphStatement) GetBothV() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_BothV); ok {
		return x.BothV
	}
	return nil
}

func (m *GraphStatement) GetAs() string {
	if x, ok := m.GetStatement().(*GraphStatement_As); ok {
		return x.As
	}
	return ""
}

func (m *GraphStatement) GetSelect() *SelectStatement {
	if x, ok := m.GetStatement().(*GraphStatement_Select); ok {
		return x.Select
	}
	return nil
}

func (m *GraphStatement) GetLimit() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Limit); ok {
		return x.Limit
	}
	return 0
}

func (m *GraphStatement) GetSkip() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Skip); ok {
		return x.Skip
	}
	return 0
}

func (m *GraphStatement) GetRange() *Range {
	if x, ok := m.GetStatement().(*GraphStatement_Range); ok {
		return x.Range
	}
	return nil
}

func (m *GraphStatement) GetMatch() *MatchQuerySet {
	if x, ok := m.GetStatement().(*GraphStatement_Match); ok {
		return x.Match
	}
	return nil
}

func (m *GraphStatement) GetHas() *HasExpression {
	if x, ok := m.GetStatement().(*GraphStatement_Has); ok {
		return x.Has
	}
	return nil
}

func (m *GraphStatement) GetHasLabel() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasLabel); ok {
		return x.HasLabel
	}
	return nil
}

func (m *GraphStatement) GetHasKey() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasKey); ok {
		return x.HasKey
	}
	return nil
}

func (m *GraphStatement) GetHasId() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_HasId); ok {
		return x.HasId
	}
	return nil
}

func (m *GraphStatement) GetCount() string {
	if x, ok := m.GetStatement().(*GraphStatement_Count); ok {
		return x.Count
	}
	return ""
}

func (m *GraphStatement) GetFields() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Fields); ok {
		return x.Fields
	}
	return nil
}

func (m *GraphStatement) GetDistinct() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (m *GraphStatement) GetAggregate() *Aggregations {
	if x, ok := m.GetStatement().(*GraphStatement_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (m *GraphStatement) GetRender() *google_protobuf1.Value {
	if x, ok := m.GetStatement().(*GraphStatement_Render); ok {
		return x.Render
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphStatement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphStatement_OneofMarshaler, _GraphStatement_OneofUnmarshaler, _GraphStatement_OneofSizer, []interface{}{
		(*GraphStatement_V)(nil),
		(*GraphStatement_E)(nil),
		(*GraphStatement_In)(nil),
		(*GraphStatement_Out)(nil),
		(*GraphStatement_Both)(nil),
		(*GraphStatement_InE)(nil),
		(*GraphStatement_OutE)(nil),
		(*GraphStatement_BothE)(nil),
		(*GraphStatement_InV)(nil),
		(*GraphStatement_OutV)(nil),
		(*GraphStatement_BothV)(nil),
		(*GraphStatement_As)(nil),
		(*GraphStatement_Select)(nil),
		(*GraphStatement_Limit)(nil),
		(*GraphStatement_Skip)(nil),
		(*GraphStatement_Range)(nil),
		(*GraphStatement_Match)(nil),
		(*GraphStatement_Has)(nil),
		(*GraphStatement_HasLabel)(nil),
		(*GraphStatement_HasKey)(nil),
		(*GraphStatement_HasId)(nil),
		(*GraphStatement_Count)(nil),
		(*GraphStatement_Fields)(nil),
		(*GraphStatement_Distinct)(nil),
		(*GraphStatement_Aggregate)(nil),
		(*GraphStatement_Render)(nil),
	}
}

func _GraphStatement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V); err != nil {
			return err
		}
	case *GraphStatement_E:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.E); err != nil {
			return err
		}
	case *GraphStatement_In:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.In); err != nil {
			return err
		}
	case *GraphStatement_Out:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Out); err != nil {
			return err
		}
	case *GraphStatement_Both:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Both); err != nil {
			return err
		}
	case *GraphStatement_InE:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InE); err != nil {
			return err
		}
	case *GraphStatement_OutE:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutE); err != nil {
			return err
		}
	case *GraphStatement_BothE:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BothE); err != nil {
			return err
		}
	case *GraphStatement_InV:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InV); err != nil {
			return err
		}
	case *GraphStatement_OutV:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutV); err != nil {
			return err
		}
	case *GraphStatement_BothV:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BothV); err != nil {
			return err
		}
	case *GraphStatement_As:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.As)
	case *GraphStatement_Select:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *GraphStatement_Limit:
		b.EncodeVarint(24<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Limit))
	case *GraphStatement_Skip:
		b.EncodeVarint(25<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Skip))
	case *GraphStatement_Range:
		b.EncodeVarint(33<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *GraphStatement_Match:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Match); err != nil {
			return err
		}
	case *GraphStatement_Has:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Has); err != nil {
			return err
		}
	case *GraphStatement_HasLabel:
		b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasLabel); err != nil {
			return err
		}
	case *GraphStatement_HasKey:
		b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasKey); err != nil {
			return err
		}
	case *GraphStatement_HasId:
		b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HasId); err != nil {
			return err
		}
	case *GraphStatement_Count:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Count)
	case *GraphStatement_Fields:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fields); err != nil {
			return err
		}
	case *GraphStatement_Distinct:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distinct); err != nil {
			return err
		}
	case *GraphStatement_Aggregate:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregate); err != nil {
			return err
		}
	case *GraphStatement_Render:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphStatement.Statement has unexpected type %T", x)
	}
	return nil
}

func _GraphStatement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphStatement)
	switch tag {
	case 1: // statement.v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_V{msg}
		return true, err
	case 2: // statement.e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_E{msg}
		return true, err
	case 10: // statement.in
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_In{msg}
		return true, err
	case 11: // statement.out
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Out{msg}
		return true, err
	case 14: // statement.both
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Both{msg}
		return true, err
	case 12: // statement.in_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_InE{msg}
		return true, err
	case 13: // statement.out_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_OutE{msg}
		return true, err
	case 15: // statement.both_e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_BothE{msg}
		return true, err
	case 16: // statement.in_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_InV{msg}
		return true, err
	case 17: // statement.out_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_OutV{msg}
		return true, err
	case 18: // statement.both_v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_BothV{msg}
		return true, err
	case 20: // statement.as
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_As{x}
		return true, err
	case 21: // statement.select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Select{msg}
		return true, err
	case 24: // statement.limit
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Limit{uint32(x)}
		return true, err
	case 25: // statement.skip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Skip{uint32(x)}
		return true, err
	case 33: // statement.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Range)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Range{msg}
		return true, err
	case 28: // statement.match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MatchQuerySet)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Match{msg}
		return true, err
	case 29: // statement.has
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpression)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Has{msg}
		return true, err
	case 34: // statement.has_label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasLabel{msg}
		return true, err
	case 35: // statement.has_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasKey{msg}
		return true, err
	case 36: // statement.has_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_HasId{msg}
		return true, err
	case 30: // statement.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_Count{x}
		return true, err
	case 26: // statement.fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Fields{msg}
		return true, err
	case 27: // statement.distinct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Distinct{msg}
		return true, err
	case 31: // statement.aggregate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Aggregations)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Aggregate{msg}
		return true, err
	case 32: // statement.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Value)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Render{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphStatement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		s := proto.Size(x.V)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_E:
		s := proto.Size(x.E)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_In:
		s := proto.Size(x.In)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Out:
		s := proto.Size(x.Out)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Both:
		s := proto.Size(x.Both)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_InE:
		s := proto.Size(x.InE)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_OutE:
		s := proto.Size(x.OutE)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_BothE:
		s := proto.Size(x.BothE)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_InV:
		s := proto.Size(x.InV)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_OutV:
		s := proto.Size(x.OutV)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_BothV:
		s := proto.Size(x.BothV)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_As:
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.As)))
		n += len(x.As)
	case *GraphStatement_Select:
		s := proto.Size(x.Select)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Limit:
		n += proto.SizeVarint(24<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Limit))
	case *GraphStatement_Skip:
		n += proto.SizeVarint(25<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Skip))
	case *GraphStatement_Range:
		s := proto.Size(x.Range)
		n += proto.SizeVarint(33<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Match:
		s := proto.Size(x.Match)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Has:
		s := proto.Size(x.Has)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasLabel:
		s := proto.Size(x.HasLabel)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasKey:
		s := proto.Size(x.HasKey)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_HasId:
		s := proto.Size(x.HasId)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Count:
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Count)))
		n += len(x.Count)
	case *GraphStatement_Fields:
		s := proto.Size(x.Fields)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Distinct:
		s := proto.Size(x.Distinct)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Aggregate:
		s := proto.Size(x.Aggregate)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Render:
		s := proto.Size(x.Render)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Range struct {
	Start int32 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Stop  int32 `protobuf:"varint,2,opt,name=stop" json:"stop,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Range) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Range) GetStop() int32 {
	if m != nil {
		return m.Stop
	}
	return 0
}

type AggregationsRequest struct {
	Graph        string       `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Aggregations []*Aggregate `protobuf:"bytes,2,rep,name=aggregations" json:"aggregations,omitempty"`
}

func (m *AggregationsRequest) Reset()                    { *m = AggregationsRequest{} }
func (m *AggregationsRequest) String() string            { return proto.CompactTextString(m) }
func (*AggregationsRequest) ProtoMessage()               {}
func (*AggregationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AggregationsRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *AggregationsRequest) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregations struct {
	Aggregations []*Aggregate `protobuf:"bytes,1,rep,name=aggregations" json:"aggregations,omitempty"`
}

func (m *Aggregations) Reset()                    { *m = Aggregations{} }
func (m *Aggregations) String() string            { return proto.CompactTextString(m) }
func (*Aggregations) ProtoMessage()               {}
func (*Aggregations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Aggregations) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregate struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Aggregation:
	//	*Aggregate_Term
	//	*Aggregate_Percentile
	//	*Aggregate_Histogram
	Aggregation isAggregate_Aggregation `protobuf_oneof:"aggregation"`
}

func (m *Aggregate) Reset()                    { *m = Aggregate{} }
func (m *Aggregate) String() string            { return proto.CompactTextString(m) }
func (*Aggregate) ProtoMessage()               {}
func (*Aggregate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isAggregate_Aggregation interface{ isAggregate_Aggregation() }

type Aggregate_Term struct {
	Term *TermAggregation `protobuf:"bytes,2,opt,name=term,oneof"`
}
type Aggregate_Percentile struct {
	Percentile *PercentileAggregation `protobuf:"bytes,3,opt,name=percentile,oneof"`
}
type Aggregate_Histogram struct {
	Histogram *HistogramAggregation `protobuf:"bytes,4,opt,name=histogram,oneof"`
}

func (*Aggregate_Term) isAggregate_Aggregation()       {}
func (*Aggregate_Percentile) isAggregate_Aggregation() {}
func (*Aggregate_Histogram) isAggregate_Aggregation()  {}

func (m *Aggregate) GetAggregation() isAggregate_Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Aggregate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Aggregate) GetTerm() *TermAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Term); ok {
		return x.Term
	}
	return nil
}

func (m *Aggregate) GetPercentile() *PercentileAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Percentile); ok {
		return x.Percentile
	}
	return nil
}

func (m *Aggregate) GetHistogram() *HistogramAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Histogram); ok {
		return x.Histogram
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Aggregate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Aggregate_OneofMarshaler, _Aggregate_OneofUnmarshaler, _Aggregate_OneofSizer, []interface{}{
		(*Aggregate_Term)(nil),
		(*Aggregate_Percentile)(nil),
		(*Aggregate_Histogram)(nil),
	}
}

func _Aggregate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Term); err != nil {
			return err
		}
	case *Aggregate_Percentile:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Percentile); err != nil {
			return err
		}
	case *Aggregate_Histogram:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Histogram); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Aggregate.Aggregation has unexpected type %T", x)
	}
	return nil
}

func _Aggregate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Aggregate)
	switch tag {
	case 2: // aggregation.term
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TermAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Term{msg}
		return true, err
	case 3: // aggregation.percentile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PercentileAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Percentile{msg}
		return true, err
	case 4: // aggregation.histogram
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HistogramAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Histogram{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Aggregate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		s := proto.Size(x.Term)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Percentile:
		s := proto.Size(x.Percentile)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Histogram:
		s := proto.Size(x.Histogram)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TermAggregation struct {
	Field string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *TermAggregation) Reset()                    { *m = TermAggregation{} }
func (m *TermAggregation) String() string            { return proto.CompactTextString(m) }
func (*TermAggregation) ProtoMessage()               {}
func (*TermAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TermAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *TermAggregation) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PercentileAggregation struct {
	Field    string    `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Percents []float64 `protobuf:"fixed64,3,rep,packed,name=percents" json:"percents,omitempty"`
}

func (m *PercentileAggregation) Reset()                    { *m = PercentileAggregation{} }
func (m *PercentileAggregation) String() string            { return proto.CompactTextString(m) }
func (*PercentileAggregation) ProtoMessage()               {}
func (*PercentileAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PercentileAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PercentileAggregation) GetPercents() []float64 {
	if m != nil {
		return m.Percents
	}
	return nil
}

type HistogramAggregation struct {
	Field    string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
}

func (m *HistogramAggregation) Reset()                    { *m = HistogramAggregation{} }
func (m *HistogramAggregation) String() string            { return proto.CompactTextString(m) }
func (*HistogramAggregation) ProtoMessage()               {}
func (*HistogramAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *HistogramAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *HistogramAggregation) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type NamedAggregationResult struct {
	Aggregations map[string]*AggregationResult `protobuf:"bytes,3,rep,name=aggregations" json:"aggregations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NamedAggregationResult) Reset()                    { *m = NamedAggregationResult{} }
func (m *NamedAggregationResult) String() string            { return proto.CompactTextString(m) }
func (*NamedAggregationResult) ProtoMessage()               {}
func (*NamedAggregationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NamedAggregationResult) GetAggregations() map[string]*AggregationResult {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type AggregationResult struct {
	Buckets []*AggregationResultBucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (m *AggregationResult) Reset()                    { *m = AggregationResult{} }
func (m *AggregationResult) String() string            { return proto.CompactTextString(m) }
func (*AggregationResult) ProtoMessage()               {}
func (*AggregationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AggregationResult) GetBuckets() []*AggregationResultBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type AggregationResultBucket struct {
	Key   *google_protobuf1.Value `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value float64                 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *AggregationResultBucket) Reset()                    { *m = AggregationResultBucket{} }
func (m *AggregationResultBucket) String() string            { return proto.CompactTextString(m) }
func (*AggregationResultBucket) ProtoMessage()               {}
func (*AggregationResultBucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AggregationResultBucket) GetKey() *google_protobuf1.Value {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AggregationResultBucket) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type HasExpressionList struct {
	Expressions []*HasExpression `protobuf:"bytes,1,rep,name=expressions" json:"expressions,omitempty"`
}

func (m *HasExpressionList) Reset()                    { *m = HasExpressionList{} }
func (m *HasExpressionList) String() string            { return proto.CompactTextString(m) }
func (*HasExpressionList) ProtoMessage()               {}
func (*HasExpressionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *HasExpressionList) GetExpressions() []*HasExpression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type HasExpression struct {
	// Types that are valid to be assigned to Expression:
	//	*HasExpression_And
	//	*HasExpression_Or
	//	*HasExpression_Not
	//	*HasExpression_Condition
	Expression isHasExpression_Expression `protobuf_oneof:"expression"`
}

func (m *HasExpression) Reset()                    { *m = HasExpression{} }
func (m *HasExpression) String() string            { return proto.CompactTextString(m) }
func (*HasExpression) ProtoMessage()               {}
func (*HasExpression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type isHasExpression_Expression interface{ isHasExpression_Expression() }

type HasExpression_And struct {
	And *HasExpressionList `protobuf:"bytes,1,opt,name=and,oneof"`
}
type HasExpression_Or struct {
	Or *HasExpressionList `protobuf:"bytes,2,opt,name=or,oneof"`
}
type HasExpression_Not struct {
	Not *HasExpression `protobuf:"bytes,3,opt,name=not,oneof"`
}
type HasExpression_Condition struct {
	Condition *HasCondition `protobuf:"bytes,4,opt,name=condition,oneof"`
}

func (*HasExpression_And) isHasExpression_Expression()       {}
func (*HasExpression_Or) isHasExpression_Expression()        {}
func (*HasExpression_Not) isHasExpression_Expression()       {}
func (*HasExpression_Condition) isHasExpression_Expression() {}

func (m *HasExpression) GetExpression() isHasExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *HasExpression) GetAnd() *HasExpressionList {
	if x, ok := m.GetExpression().(*HasExpression_And); ok {
		return x.And
	}
	return nil
}

func (m *HasExpression) GetOr() *HasExpressionList {
	if x, ok := m.GetExpression().(*HasExpression_Or); ok {
		return x.Or
	}
	return nil
}

func (m *HasExpression) GetNot() *HasExpression {
	if x, ok := m.GetExpression().(*HasExpression_Not); ok {
		return x.Not
	}
	return nil
}

func (m *HasExpression) GetCondition() *HasCondition {
	if x, ok := m.GetExpression().(*HasExpression_Condition); ok {
		return x.Condition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HasExpression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HasExpression_OneofMarshaler, _HasExpression_OneofUnmarshaler, _HasExpression_OneofSizer, []interface{}{
		(*HasExpression_And)(nil),
		(*HasExpression_Or)(nil),
		(*HasExpression_Not)(nil),
		(*HasExpression_Condition)(nil),
	}
}

func _HasExpression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HasExpression)
	// expression
	switch x := m.Expression.(type) {
	case *HasExpression_And:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.And); err != nil {
			return err
		}
	case *HasExpression_Or:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Or); err != nil {
			return err
		}
	case *HasExpression_Not:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Not); err != nil {
			return err
		}
	case *HasExpression_Condition:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Condition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HasExpression.Expression has unexpected type %T", x)
	}
	return nil
}

func _HasExpression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HasExpression)
	switch tag {
	case 1: // expression.and
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_And{msg}
		return true, err
	case 2: // expression.or
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Or{msg}
		return true, err
	case 3: // expression.not
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasExpression)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Not{msg}
		return true, err
	case 4: // expression.condition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HasCondition)
		err := b.DecodeMessage(msg)
		m.Expression = &HasExpression_Condition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HasExpression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HasExpression)
	// expression
	switch x := m.Expression.(type) {
	case *HasExpression_And:
		s := proto.Size(x.And)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Or:
		s := proto.Size(x.Or)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Not:
		s := proto.Size(x.Not)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HasExpression_Condition:
		s := proto.Size(x.Condition)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HasCondition struct {
	Key       string                  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value     *google_protobuf1.Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Condition Condition               `protobuf:"varint,3,opt,name=condition,enum=gripql.Condition" json:"condition,omitempty"`
}

func (m *HasCondition) Reset()                    { *m = HasCondition{} }
func (m *HasCondition) String() string            { return proto.CompactTextString(m) }
func (*HasCondition) ProtoMessage()               {}
func (*HasCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *HasCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HasCondition) GetValue() *google_protobuf1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HasCondition) GetCondition() Condition {
	if m != nil {
		return m.Condition
	}
	return Condition_UNKNOWN_CONDITION
}

type SelectStatement struct {
	Marks []string `protobuf:"bytes,1,rep,name=marks" json:"marks,omitempty"`
}

func (m *SelectStatement) Reset()                    { *m = SelectStatement{} }
func (m *SelectStatement) String() string            { return proto.CompactTextString(m) }
func (*SelectStatement) ProtoMessage()               {}
func (*SelectStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SelectStatement) GetMarks() []string {
	if m != nil {
		return m.Marks
	}
	return nil
}

type Selection struct {
	// Types that are valid to be assigned to Result:
	//	*Selection_Vertex
	//	*Selection_Edge
	Result isSelection_Result `protobuf_oneof:"result"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type isSelection_Result interface{ isSelection_Result() }

type Selection_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,oneof"`
}
type Selection_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,oneof"`
}

func (*Selection_Vertex) isSelection_Result() {}
func (*Selection_Edge) isSelection_Result()   {}

func (m *Selection) GetResult() isSelection_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Selection) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*Selection_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *Selection) GetEdge() *Edge {
	if x, ok := m.GetResult().(*Selection_Edge); ok {
		return x.Edge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Selection) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Selection_OneofMarshaler, _Selection_OneofUnmarshaler, _Selection_OneofSizer, []interface{}{
		(*Selection_Vertex)(nil),
		(*Selection_Edge)(nil),
	}
}

func _Selection_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *Selection_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Selection.Result has unexpected type %T", x)
	}
	return nil
}

func _Selection_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Selection)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Edge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Selection_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		s := proto.Size(x.Vertex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selection_Edge:
		s := proto.Size(x.Edge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Selections struct {
	Selections map[string]*Selection `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Selections) Reset()                    { *m = Selections{} }
func (m *Selections) String() string            { return proto.CompactTextString(m) }
func (*Selections) ProtoMessage()               {}
func (*Selections) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Selections) GetSelections() map[string]*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type Vertex struct {
	Gid   string                   `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Label string                   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Data  *google_protobuf1.Struct `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Vertex) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Vertex) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Vertex) GetData() *google_protobuf1.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type Edge struct {
	Gid   string                   `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Label string                   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	From  string                   `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To    string                   `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Data  *google_protobuf1.Struct `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Edge) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Edge) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Edge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Edge) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Edge) GetData() *google_protobuf1.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*QueryResult_Vertex
	//	*QueryResult_Edge
	//	*QueryResult_Aggregations
	//	*QueryResult_Selections
	//	*QueryResult_Render
	//	*QueryResult_Count
	Result isQueryResult_Result `protobuf_oneof:"result"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type isQueryResult_Result interface{ isQueryResult_Result() }

type QueryResult_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,oneof"`
}
type QueryResult_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,oneof"`
}
type QueryResult_Aggregations struct {
	Aggregations *NamedAggregationResult `protobuf:"bytes,3,opt,name=aggregations,oneof"`
}
type QueryResult_Selections struct {
	Selections *Selections `protobuf:"bytes,4,opt,name=selections,oneof"`
}
type QueryResult_Render struct {
	Render *google_protobuf1.Value `protobuf:"bytes,5,opt,name=render,oneof"`
}
type QueryResult_Count struct {
	Count uint32 `protobuf:"varint,6,opt,name=count,oneof"`
}

func (*QueryResult_Vertex) isQueryResult_Result()       {}
func (*QueryResult_Edge) isQueryResult_Result()         {}
func (*QueryResult_Aggregations) isQueryResult_Result() {}
func (*QueryResult_Selections) isQueryResult_Result()   {}
func (*QueryResult_Render) isQueryResult_Result()       {}
func (*QueryResult_Count) isQueryResult_Result()        {}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryResult) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*QueryResult_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *QueryResult) GetEdge() *Edge {
	if x, ok := m.GetResult().(*QueryResult_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *QueryResult) GetAggregations() *NamedAggregationResult {
	if x, ok := m.GetResult().(*QueryResult_Aggregations); ok {
		return x.Aggregations
	}
	return nil
}

func (m *QueryResult) GetSelections() *Selections {
	if x, ok := m.GetResult().(*QueryResult_Selections); ok {
		return x.Selections
	}
	return nil
}

func (m *QueryResult) GetRender() *google_protobuf1.Value {
	if x, ok := m.GetResult().(*QueryResult_Render); ok {
		return x.Render
	}
	return nil
}

func (m *QueryResult) GetCount() uint32 {
	if x, ok := m.GetResult().(*QueryResult_Count); ok {
		return x.Count
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryResult_OneofMarshaler, _QueryResult_OneofUnmarshaler, _QueryResult_OneofSizer, []interface{}{
		(*QueryResult_Vertex)(nil),
		(*QueryResult_Edge)(nil),
		(*QueryResult_Aggregations)(nil),
		(*QueryResult_Selections)(nil),
		(*QueryResult_Render)(nil),
		(*QueryResult_Count)(nil),
	}
}

func _QueryResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *QueryResult_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case *QueryResult_Aggregations:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregations); err != nil {
			return err
		}
	case *QueryResult_Selections:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selections); err != nil {
			return err
		}
	case *QueryResult_Render:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case *QueryResult_Count:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Count))
	case nil:
	default:
		return fmt.Errorf("QueryResult.Result has unexpected type %T", x)
	}
	return nil
}

func _QueryResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryResult)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Edge{msg}
		return true, err
	case 3: // result.aggregations
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NamedAggregationResult)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Aggregations{msg}
		return true, err
	case 4: // result.selections
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selections)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Selections{msg}
		return true, err
	case 5: // result.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Value)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Render{msg}
		return true, err
	case 6: // result.count
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Result = &QueryResult_Count{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _QueryResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		s := proto.Size(x.Vertex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Edge:
		s := proto.Size(x.Edge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Aggregations:
		s := proto.Size(x.Aggregations)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Selections:
		s := proto.Size(x.Selections)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Render:
		s := proto.Size(x.Render)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Count:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Count))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EditResult struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *EditResult) Reset()                    { *m = EditResult{} }
func (m *EditResult) String() string            { return proto.CompactTextString(m) }
func (*EditResult) ProtoMessage()               {}
func (*EditResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *EditResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GraphElement struct {
	Graph  string  `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Vertex *Vertex `protobuf:"bytes,2,opt,name=vertex" json:"vertex,omitempty"`
	Edge   *Edge   `protobuf:"bytes,3,opt,name=edge" json:"edge,omitempty"`
}

func (m *GraphElement) Reset()                    { *m = GraphElement{} }
func (m *GraphElement) String() string            { return proto.CompactTextString(m) }
func (*GraphElement) ProtoMessage()               {}
func (*GraphElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GraphElement) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphElement) GetVertex() *Vertex {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *GraphElement) GetEdge() *Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

type GraphID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *GraphID) Reset()                    { *m = GraphID{} }
func (m *GraphID) String() string            { return proto.CompactTextString(m) }
func (*GraphID) ProtoMessage()               {}
func (*GraphID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GraphID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type ElementID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ElementID) Reset()                    { *m = ElementID{} }
func (m *ElementID) String() string            { return proto.CompactTextString(m) }
func (*ElementID) ProtoMessage()               {}
func (*ElementID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ElementID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *ElementID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IndexID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Field string `protobuf:"bytes,3,opt,name=field" json:"field,omitempty"`
}

func (m *IndexID) Reset()                    { *m = IndexID{} }
func (m *IndexID) String() string            { return proto.CompactTextString(m) }
func (*IndexID) ProtoMessage()               {}
func (*IndexID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *IndexID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *IndexID) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *IndexID) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type Timestamp struct {
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Timestamp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type ListGraphsResponse struct {
	Graphs []string `protobuf:"bytes,1,rep,name=graphs" json:"graphs,omitempty"`
}

func (m *ListGraphsResponse) Reset()                    { *m = ListGraphsResponse{} }
func (m *ListGraphsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGraphsResponse) ProtoMessage()               {}
func (*ListGraphsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ListGraphsResponse) GetGraphs() []string {
	if m != nil {
		return m.Graphs
	}
	return nil
}

type ListIndicesResponse struct {
	Indices []*IndexID `protobuf:"bytes,1,rep,name=indices" json:"indices,omitempty"`
}

func (m *ListIndicesResponse) Reset()                    { *m = ListIndicesResponse{} }
func (m *ListIndicesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListIndicesResponse) ProtoMessage()               {}
func (*ListIndicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ListIndicesResponse) GetIndices() []*IndexID {
	if m != nil {
		return m.Indices
	}
	return nil
}

type ListLabelsResponse struct {
	VertexLabels []string `protobuf:"bytes,1,rep,name=vertex_labels,json=vertexLabels" json:"vertex_labels,omitempty"`
	EdgeLabels   []string `protobuf:"bytes,2,rep,name=edge_labels,json=edgeLabels" json:"edge_labels,omitempty"`
}

func (m *ListLabelsResponse) Reset()                    { *m = ListLabelsResponse{} }
func (m *ListLabelsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListLabelsResponse) ProtoMessage()               {}
func (*ListLabelsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListLabelsResponse) GetVertexLabels() []string {
	if m != nil {
		return m.VertexLabels
	}
	return nil
}

func (m *ListLabelsResponse) GetEdgeLabels() []string {
	if m != nil {
		return m.EdgeLabels
	}
	return nil
}

func init() {
	proto.RegisterType((*Graph)(nil), "gripql.Graph")
	proto.RegisterType((*GraphQuery)(nil), "gripql.GraphQuery")
	proto.RegisterType((*QuerySet)(nil), "gripql.QuerySet")
	proto.RegisterType((*MatchQuerySet)(nil), "gripql.MatchQuerySet")
	proto.RegisterType((*GraphStatement)(nil), "gripql.GraphStatement")
	proto.RegisterType((*Range)(nil), "gripql.Range")
	proto.RegisterType((*AggregationsRequest)(nil), "gripql.AggregationsRequest")
	proto.RegisterType((*Aggregations)(nil), "gripql.Aggregations")
	proto.RegisterType((*Aggregate)(nil), "gripql.Aggregate")
	proto.RegisterType((*TermAggregation)(nil), "gripql.TermAggregation")
	proto.RegisterType((*PercentileAggregation)(nil), "gripql.PercentileAggregation")
	proto.RegisterType((*HistogramAggregation)(nil), "gripql.HistogramAggregation")
	proto.RegisterType((*NamedAggregationResult)(nil), "gripql.NamedAggregationResult")
	proto.RegisterType((*AggregationResult)(nil), "gripql.AggregationResult")
	proto.RegisterType((*AggregationResultBucket)(nil), "gripql.AggregationResultBucket")
	proto.RegisterType((*HasExpressionList)(nil), "gripql.HasExpressionList")
	proto.RegisterType((*HasExpression)(nil), "gripql.HasExpression")
	proto.RegisterType((*HasCondition)(nil), "gripql.HasCondition")
	proto.RegisterType((*SelectStatement)(nil), "gripql.SelectStatement")
	proto.RegisterType((*Selection)(nil), "gripql.Selection")
	proto.RegisterType((*Selections)(nil), "gripql.Selections")
	proto.RegisterType((*Vertex)(nil), "gripql.Vertex")
	proto.RegisterType((*Edge)(nil), "gripql.Edge")
	proto.RegisterType((*QueryResult)(nil), "gripql.QueryResult")
	proto.RegisterType((*EditResult)(nil), "gripql.EditResult")
	proto.RegisterType((*GraphElement)(nil), "gripql.GraphElement")
	proto.RegisterType((*GraphID)(nil), "gripql.GraphID")
	proto.RegisterType((*ElementID)(nil), "gripql.ElementID")
	proto.RegisterType((*IndexID)(nil), "gripql.IndexID")
	proto.RegisterType((*Timestamp)(nil), "gripql.Timestamp")
	proto.RegisterType((*Empty)(nil), "gripql.Empty")
	proto.RegisterType((*ListGraphsResponse)(nil), "gripql.ListGraphsResponse")
	proto.RegisterType((*ListIndicesResponse)(nil), "gripql.ListIndicesResponse")
	proto.RegisterType((*ListLabelsResponse)(nil), "gripql.ListLabelsResponse")
	proto.RegisterEnum("gripql.Condition", Condition_name, Condition_value)
	proto.RegisterEnum("gripql.FieldType", FieldType_name, FieldType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error)
	GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error)
	GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error)
	GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error)
	GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Graph, error)
	ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListGraphsResponse, error)
	ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListIndicesResponse, error)
	ListLabels(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListLabelsResponse, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[0], c.cc, "/gripql.Query/Traversal", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryTraversalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_TraversalClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryTraversalClient struct {
	grpc.ClientStream
}

func (x *queryTraversalClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := grpc.Invoke(ctx, "/gripql.Query/GetVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := grpc.Invoke(ctx, "/gripql.Query/GetEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := grpc.Invoke(ctx, "/gripql.Query/GetTimestamp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := grpc.Invoke(ctx, "/gripql.Query/GetSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListGraphsResponse, error) {
	out := new(ListGraphsResponse)
	err := grpc.Invoke(ctx, "/gripql.Query/ListGraphs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListIndicesResponse, error) {
	out := new(ListIndicesResponse)
	err := grpc.Invoke(ctx, "/gripql.Query/ListIndices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListLabels(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	out := new(ListLabelsResponse)
	err := grpc.Invoke(ctx, "/gripql.Query/ListLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	Traversal(*GraphQuery, Query_TraversalServer) error
	GetVertex(context.Context, *ElementID) (*Vertex, error)
	GetEdge(context.Context, *ElementID) (*Edge, error)
	GetTimestamp(context.Context, *GraphID) (*Timestamp, error)
	GetSchema(context.Context, *GraphID) (*Graph, error)
	ListGraphs(context.Context, *Empty) (*ListGraphsResponse, error)
	ListIndices(context.Context, *GraphID) (*ListIndicesResponse, error)
	ListLabels(context.Context, *GraphID) (*ListLabelsResponse, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Traversal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Traversal(m, &queryTraversalServer{stream})
}

type Query_TraversalServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryTraversalServer struct {
	grpc.ServerStream
}

func (x *queryTraversalServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestamp(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGraphs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListIndices(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListLabels(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVertex",
			Handler:    _Query_GetVertex_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _Query_GetEdge_Handler,
		},
		{
			MethodName: "GetTimestamp",
			Handler:    _Query_GetTimestamp_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
		{
			MethodName: "ListGraphs",
			Handler:    _Query_ListGraphs_Handler,
		},
		{
			MethodName: "ListIndices",
			Handler:    _Query_ListIndices_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _Query_ListLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Traversal",
			Handler:       _Query_Traversal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripql.proto",
}

// Client API for Edit service

type EditClient interface {
	AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error)
	AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	AddSchema(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*EditResult, error)
}

type editClient struct {
	cc *grpc.ClientConn
}

func NewEditClient(cc *grpc.ClientConn) EditClient {
	return &editClient{cc}
}

func (c *editClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/AddVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/AddEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Edit_serviceDesc.Streams[0], c.cc, "/gripql.Edit/BulkAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &editBulkAddClient{stream}
	return x, nil
}

type Edit_BulkAddClient interface {
	Send(*GraphElement) error
	CloseAndRecv() (*EditResult, error)
	grpc.ClientStream
}

type editBulkAddClient struct {
	grpc.ClientStream
}

func (x *editBulkAddClient) Send(m *GraphElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *editBulkAddClient) CloseAndRecv() (*EditResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EditResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *editClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/AddGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/DeleteGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/DeleteVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/DeleteEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/AddIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/DeleteIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddSchema(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/gripql.Edit/AddSchema", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Edit service

type EditServer interface {
	AddVertex(context.Context, *GraphElement) (*EditResult, error)
	AddEdge(context.Context, *GraphElement) (*EditResult, error)
	BulkAdd(Edit_BulkAddServer) error
	AddGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteVertex(context.Context, *ElementID) (*EditResult, error)
	DeleteEdge(context.Context, *ElementID) (*EditResult, error)
	AddIndex(context.Context, *IndexID) (*EditResult, error)
	DeleteIndex(context.Context, *IndexID) (*EditResult, error)
	AddSchema(context.Context, *Graph) (*EditResult, error)
}

func RegisterEditServer(s *grpc.Server, srv EditServer) {
	s.RegisterService(&_Edit_serviceDesc, srv)
}

func _Edit_AddVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddVertex(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddEdge(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_BulkAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EditServer).BulkAdd(&editBulkAddServer{stream})
}

type Edit_BulkAddServer interface {
	SendAndClose(*EditResult) error
	Recv() (*GraphElement, error)
	grpc.ServerStream
}

type editBulkAddServer struct {
	grpc.ServerStream
}

func (x *editBulkAddServer) SendAndClose(m *EditResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *editBulkAddServer) Recv() (*GraphElement, error) {
	m := new(GraphElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Edit_AddGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Graph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddSchema(ctx, req.(*Graph))
	}
	return interceptor(ctx, in, info, handler)
}

var _Edit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Edit",
	HandlerType: (*EditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVertex",
			Handler:    _Edit_AddVertex_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _Edit_AddEdge_Handler,
		},
		{
			MethodName: "AddGraph",
			Handler:    _Edit_AddGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Edit_DeleteGraph_Handler,
		},
		{
			MethodName: "DeleteVertex",
			Handler:    _Edit_DeleteVertex_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _Edit_DeleteEdge_Handler,
		},
		{
			MethodName: "AddIndex",
			Handler:    _Edit_AddIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _Edit_DeleteIndex_Handler,
		},
		{
			MethodName: "AddSchema",
			Handler:    _Edit_AddSchema_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkAdd",
			Handler:       _Edit_BulkAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gripql.proto",
}

func init() { proto.RegisterFile("gripql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x73, 0xd3, 0xd8,
	0x15, 0x8f, 0xe4, 0x7f, 0xd1, 0xb1, 0x13, 0x94, 0x4b, 0x08, 0xc2, 0x1b, 0x48, 0x7a, 0x61, 0x4b,
	0xf0, 0x42, 0x0c, 0x2c, 0x3b, 0x65, 0x43, 0x67, 0xda, 0x84, 0xb8, 0x89, 0x97, 0xe0, 0x80, 0x62,
	0xa0, 0x4b, 0xb7, 0x93, 0x51, 0xac, 0x8b, 0xad, 0x89, 0x2d, 0x19, 0xe9, 0xda, 0x43, 0xca, 0x30,
	0x3b, 0xd3, 0xaf, 0xd0, 0x6f, 0xb0, 0xaf, 0xfd, 0x04, 0x7d, 0xed, 0x63, 0x5f, 0xfb, 0xd6, 0xe9,
	0x63, 0x3f, 0x43, 0x9f, 0x3b, 0xf7, 0x8f, 0x64, 0x29, 0x96, 0xb3, 0x62, 0xa6, 0x4f, 0xd1, 0xb9,
	0xf7, 0x77, 0x7e, 0xe7, 0xdc, 0xf3, 0xef, 0xde, 0x18, 0x2a, 0x5d, 0xdf, 0x19, 0xbe, 0xef, 0x6f,
	0x0e, 0x7d, 0x8f, 0x7a, 0xa8, 0x28, 0xa4, 0xea, 0x6a, 0xd7, 0xf3, 0xba, 0x7d, 0x52, 0xb7, 0x86,
	0x4e, 0xdd, 0x72, 0x5d, 0x8f, 0x5a, 0xd4, 0xf1, 0xdc, 0x40, 0xa0, 0xa2, 0x5d, 0x2e, 0x9d, 0x8c,
	0xde, 0xd5, 0x03, 0xea, 0x8f, 0x3a, 0x54, 0xec, 0xe2, 0x01, 0x14, 0xf6, 0x7c, 0x6b, 0xd8, 0x43,
	0xcb, 0x50, 0xe8, 0xb2, 0x0f, 0x43, 0x59, 0x57, 0x36, 0x34, 0x53, 0x08, 0xa8, 0x06, 0xf3, 0x63,
	0xe2, 0x53, 0xa7, 0x43, 0x02, 0x43, 0x5d, 0xcf, 0x6d, 0x94, 0x1f, 0x2e, 0x6e, 0x4a, 0x1f, 0x5e,
	0x13, 0x9f, 0x92, 0x0f, 0x66, 0xb4, 0x8f, 0x30, 0x14, 0x88, 0xdd, 0x25, 0x81, 0x91, 0xe3, 0xc0,
	0x4a, 0x08, 0x6c, 0xd8, 0x5d, 0x62, 0x8a, 0x2d, 0xfc, 0x02, 0x80, 0x9b, 0x7b, 0x39, 0x22, 0xfe,
	0xd9, 0x0c, 0x9b, 0x77, 0xa1, 0xf0, 0x9e, 0x6d, 0x4b, 0x83, 0x2b, 0x21, 0x0f, 0x57, 0x3c, 0xa2,
	0x16, 0x25, 0x03, 0xe2, 0x52, 0x53, 0x80, 0xf0, 0x63, 0x98, 0xe7, 0x64, 0x47, 0x84, 0x4e, 0x34,
	0x95, 0x2c, 0x9a, 0x4f, 0x60, 0xe1, 0xb9, 0x45, 0x3b, 0xbd, 0x48, 0xbd, 0x06, 0x25, 0xb6, 0xe3,
	0x90, 0x40, 0x12, 0xe8, 0x21, 0x41, 0x08, 0x31, 0x43, 0x00, 0xfe, 0xbb, 0x06, 0x8b, 0x49, 0x5a,
	0x54, 0x03, 0x65, 0xcc, 0x4f, 0x52, 0x7e, 0x58, 0xdd, 0x14, 0x41, 0xdf, 0x0c, 0x83, 0xbe, 0x79,
	0xe0, 0x04, 0xf4, 0xb5, 0xd5, 0x1f, 0x91, 0xfd, 0x39, 0x53, 0x19, 0x33, 0x2c, 0x31, 0xd4, 0x2c,
	0x58, 0x82, 0xee, 0x82, 0xea, 0xb8, 0x06, 0x64, 0x00, 0xab, 0x8e, 0x8b, 0x36, 0x21, 0xe7, 0x8d,
	0xa8, 0x51, 0xce, 0x00, 0x67, 0x40, 0x74, 0x1f, 0xf2, 0x27, 0x1e, 0xed, 0x19, 0x8b, 0x19, 0x14,
	0x38, 0x12, 0xd5, 0x21, 0xef, 0xb8, 0xc7, 0xc4, 0xa8, 0x64, 0x31, 0xe1, 0xb8, 0x0d, 0xf4, 0x00,
	0x0a, 0xde, 0x88, 0x1e, 0x13, 0x63, 0x21, 0x8b, 0x0d, 0x6f, 0x44, 0x1b, 0xe8, 0x6b, 0x28, 0x32,
	0x5b, 0xc7, 0xc4, 0xb8, 0x94, 0x41, 0xa7, 0xc0, 0xb0, 0x0d, 0xe9, 0xd8, 0xd8, 0xd0, 0xb3, 0x39,
	0xf6, 0x3a, 0x74, 0x6c, 0x6c, 0x2c, 0x65, 0x74, 0xec, 0x75, 0xe4, 0xd8, 0xd8, 0x40, 0x59, 0x1d,
	0x7b, 0x8d, 0x74, 0x50, 0xad, 0xc0, 0x58, 0x66, 0x45, 0xce, 0xb2, 0x64, 0x05, 0xe8, 0x01, 0x14,
	0x03, 0xd2, 0x27, 0x1d, 0x6a, 0x5c, 0xe1, 0x34, 0x57, 0xc3, 0x4a, 0x3b, 0xe2, 0xab, 0x51, 0x51,
	0xed, 0xcf, 0x99, 0x12, 0x88, 0x56, 0xa0, 0xd0, 0x77, 0x06, 0x0e, 0x35, 0x8c, 0x75, 0x65, 0x63,
	0x81, 0x91, 0x73, 0x11, 0x2d, 0x43, 0x3e, 0x38, 0x75, 0x86, 0xc6, 0x35, 0xb9, 0xcc, 0x25, 0xf4,
	0x25, 0x14, 0x7c, 0xcb, 0xed, 0x12, 0xe3, 0x17, 0x9c, 0x7f, 0x21, 0xe4, 0x37, 0xd9, 0x22, 0x53,
	0xe6, 0xbb, 0xe8, 0x1e, 0x14, 0x06, 0xac, 0x07, 0x8c, 0x55, 0x0e, 0xbb, 0x12, 0xc2, 0x12, 0x8d,
	0xc1, 0xe0, 0x1c, 0x85, 0xee, 0x40, 0xae, 0x67, 0x05, 0xc6, 0xf5, 0x24, 0x78, 0xdf, 0x0a, 0x1a,
	0x1f, 0x86, 0x3e, 0x09, 0x02, 0xc7, 0x73, 0x59, 0x6c, 0x7b, 0x56, 0x80, 0xbe, 0x05, 0xad, 0x67,
	0x05, 0xc7, 0x7d, 0xeb, 0x84, 0xf4, 0x0d, 0x9c, 0x21, 0x56, 0xf3, 0x3d, 0x2b, 0x38, 0x60, 0x68,
	0xf4, 0x0d, 0x94, 0x98, 0xea, 0x29, 0x39, 0x33, 0x6e, 0x66, 0x50, 0x2c, 0xf6, 0xac, 0xe0, 0x19,
	0x39, 0x63, 0xa9, 0x61, 0x6a, 0x8e, 0x6d, 0xdc, 0xca, 0x92, 0x9a, 0x9e, 0x15, 0x34, 0x6d, 0x16,
	0xd5, 0x8e, 0x37, 0x72, 0xa9, 0x71, 0x43, 0x66, 0x47, 0x88, 0xe8, 0x11, 0x14, 0xdf, 0x39, 0xa4,
	0x6f, 0x07, 0x46, 0x35, 0x8b, 0x0b, 0x02, 0x8b, 0x1e, 0xc3, 0xbc, 0xed, 0x04, 0xd4, 0x71, 0x3b,
	0xd4, 0xf8, 0x22, 0xcb, 0x99, 0x43, 0x34, 0x7a, 0x04, 0x9a, 0xd5, 0xed, 0xfa, 0xa4, 0x6b, 0x51,
	0x62, 0xac, 0x71, 0xd5, 0xe5, 0x30, 0xbe, 0xdb, 0x72, 0x83, 0x0d, 0xf5, 0xfd, 0x39, 0x73, 0x02,
	0x44, 0xf7, 0xa1, 0xe8, 0x13, 0xd7, 0x26, 0xbe, 0xb1, 0xce, 0x55, 0x56, 0xa6, 0xac, 0x45, 0x1e,
	0x0a, 0xdc, 0x4e, 0x19, 0xb4, 0x20, 0x2c, 0x2e, 0xfc, 0x00, 0x0a, 0xbc, 0x1e, 0xd8, 0x20, 0x0e,
	0xa8, 0xe5, 0x53, 0x3e, 0xbe, 0x0a, 0xa6, 0x10, 0x10, 0x82, 0x7c, 0x40, 0xbd, 0x21, 0x9f, 0x53,
	0x05, 0x93, 0x7f, 0xe3, 0x13, 0xb8, 0x1c, 0x77, 0xc7, 0x24, 0xef, 0x47, 0x24, 0xa0, 0x33, 0x26,
	0xf9, 0x37, 0x50, 0xb1, 0x62, 0x60, 0x39, 0xd0, 0x97, 0xce, 0x9f, 0x8b, 0x98, 0x09, 0x18, 0x6e,
	0x40, 0x25, 0x6e, 0x63, 0x8a, 0x46, 0xc9, 0x46, 0xf3, 0x6f, 0x05, 0xb4, 0x68, 0x8f, 0x1d, 0xc6,
	0xb5, 0x06, 0x44, 0x3a, 0xc8, 0xbf, 0xd1, 0x3d, 0xc8, 0x53, 0xe2, 0x0f, 0xe4, 0x20, 0x8e, 0x7a,
	0xb0, 0x4d, 0xfc, 0x41, 0xcc, 0x01, 0xd6, 0x53, 0x0c, 0x86, 0x7e, 0x03, 0x30, 0x24, 0x7e, 0x87,
	0xb8, 0xd4, 0xe9, 0x13, 0x23, 0xc7, 0x95, 0xae, 0x87, 0x4a, 0x2f, 0xa2, 0x9d, 0xa4, 0x6a, 0x4c,
	0x05, 0xfd, 0x1a, 0xb4, 0x9e, 0x13, 0x50, 0xaf, 0xeb, 0x5b, 0x03, 0x23, 0xcf, 0xf5, 0x57, 0xa3,
	0x26, 0x0a, 0x37, 0x92, 0xea, 0x13, 0x85, 0x9d, 0x05, 0x28, 0xc7, 0xce, 0x87, 0x9f, 0xc0, 0xa5,
	0x73, 0x8e, 0xb2, 0x2c, 0xf0, 0x42, 0xe4, 0x07, 0xd2, 0x4c, 0x21, 0xf0, 0x34, 0x3a, 0x7f, 0x12,
	0x0e, 0x2f, 0x98, 0xfc, 0x1b, 0x37, 0xe1, 0x4a, 0xaa, 0xc3, 0x33, 0x28, 0xaa, 0x30, 0x2f, 0x8f,
	0x21, 0x6e, 0x77, 0xc5, 0x8c, 0x64, 0xbc, 0x0f, 0xcb, 0x69, 0xbe, 0xcf, 0x66, 0x72, 0x5c, 0x4a,
	0xfc, 0xb1, 0xd5, 0x97, 0x0e, 0x45, 0x32, 0xfe, 0x87, 0x02, 0x2b, 0x2d, 0x6b, 0x40, 0xec, 0x18,
	0x8d, 0x49, 0x82, 0x51, 0x9f, 0xa2, 0xf6, 0xb9, 0x12, 0x10, 0x4f, 0x8c, 0xfb, 0x61, 0xf0, 0xd2,
	0xb5, 0x12, 0x8d, 0xd3, 0x70, 0xa9, 0x7f, 0x96, 0xac, 0x90, 0xea, 0x5b, 0x58, 0x9a, 0x82, 0x20,
	0x1d, 0x72, 0x6c, 0xf2, 0x88, 0x3a, 0x61, 0x9f, 0xa8, 0x0e, 0x85, 0x31, 0x6b, 0x23, 0x59, 0x27,
	0xd7, 0x52, 0xfa, 0x52, 0x18, 0x34, 0x05, 0x6e, 0x4b, 0x7d, 0xac, 0xe0, 0x56, 0x82, 0x5b, 0x1e,
	0xe3, 0x5b, 0x28, 0x9d, 0x8c, 0x3a, 0xa7, 0x84, 0x86, 0xbd, 0xb0, 0x36, 0x93, 0x6b, 0x87, 0xe3,
	0xcc, 0x10, 0x8f, 0xbf, 0x87, 0xab, 0x33, 0x30, 0x68, 0x63, 0xe2, 0xf1, 0xcc, 0x11, 0x20, 0x4e,
	0xb2, 0x1c, 0x3f, 0x89, 0x22, 0xdd, 0xc5, 0x07, 0xb0, 0x94, 0x18, 0xe1, 0x6c, 0x42, 0xa1, 0x5f,
	0x41, 0x99, 0x44, 0x2b, 0x61, 0xcf, 0xa5, 0x8f, 0x7c, 0x33, 0x8e, 0xc4, 0xff, 0x52, 0x60, 0x21,
	0xb1, 0x8d, 0xee, 0x41, 0xce, 0x72, 0x6d, 0xe9, 0xdf, 0xb5, 0x54, 0x0a, 0x66, 0x92, 0xdd, 0x1c,
	0x96, 0x6b, 0xa3, 0xaf, 0x40, 0xf5, 0xfc, 0xf3, 0xb1, 0x4e, 0x43, 0xab, 0x9e, 0xcf, 0x6e, 0x24,
	0xd7, 0xa3, 0xb2, 0x19, 0x67, 0xdf, 0x48, 0xae, 0xc7, 0x47, 0x6c, 0xc7, 0x73, 0x6d, 0x87, 0xc5,
	0x4f, 0x76, 0xdf, 0x72, 0x4c, 0xe1, 0x69, 0xb8, 0xc7, 0xba, 0x2e, 0x02, 0xee, 0x54, 0x00, 0x26,
	0xa7, 0xc3, 0x3f, 0x42, 0x25, 0x0e, 0x4d, 0x29, 0x96, 0xbb, 0xc9, 0x62, 0x99, 0x95, 0x0e, 0x01,
	0x42, 0xf5, 0xb8, 0x4f, 0xec, 0x10, 0x8b, 0x93, 0xb9, 0x16, 0x59, 0x89, 0xb9, 0x83, 0x6f, 0xc3,
	0xa5, 0x73, 0x4f, 0x04, 0x96, 0xd4, 0x81, 0xe5, 0x9f, 0x8a, 0x1c, 0x69, 0xa6, 0x10, 0x70, 0x07,
	0x34, 0x01, 0x64, 0x6e, 0x6e, 0x40, 0x71, 0xcc, 0x9f, 0xeb, 0x32, 0x09, 0xe7, 0x1e, 0xf1, 0xec,
	0x7e, 0x10, 0xfb, 0x08, 0x43, 0x9e, 0xbd, 0xd4, 0xa5, 0xf7, 0x89, 0x37, 0x3c, 0x9b, 0x83, 0x6c,
	0x6f, 0x67, 0x9e, 0xdd, 0x3a, 0xac, 0xfe, 0xf0, 0x4f, 0x0a, 0x40, 0x64, 0x25, 0x40, 0x3b, 0x00,
	0x41, 0x24, 0xc9, 0x92, 0xc1, 0xc9, 0x97, 0x0d, 0xff, 0xc7, 0x64, 0xf2, 0x29, 0xba, 0x32, 0xa6,
	0x55, 0x7d, 0x11, 0x1e, 0xf0, 0xa2, 0x8e, 0xbc, 0x9d, 0x0c, 0xf2, 0xd2, 0x94, 0x8d, 0x78, 0x27,
	0xfe, 0x11, 0x8a, 0xe2, 0x98, 0x8c, 0xa8, 0xeb, 0xd8, 0x21, 0x51, 0xd7, 0xb1, 0x59, 0xec, 0xc4,
	0x0b, 0x45, 0x0e, 0x29, 0x2e, 0xa0, 0xaf, 0x20, 0x6f, 0x5b, 0xd4, 0x92, 0x55, 0x75, 0x75, 0x2a,
	0x85, 0x47, 0xfc, 0x3f, 0x28, 0x93, 0x83, 0xf0, 0x8f, 0x90, 0x67, 0xd1, 0xc9, 0x4c, 0x8e, 0x20,
	0xff, 0xce, 0xf7, 0x06, 0x9c, 0x5c, 0x33, 0xf9, 0x37, 0x5a, 0x04, 0x95, 0x7a, 0xbc, 0x26, 0x35,
	0x53, 0xa5, 0x5e, 0xe4, 0x40, 0x21, 0x8b, 0x03, 0x7f, 0x55, 0xa1, 0xcc, 0x9f, 0x6a, 0x72, 0xc8,
	0xfc, 0x5f, 0x93, 0x8d, 0x76, 0xa7, 0x26, 0x2f, 0xc3, 0xde, 0xb8, 0x78, 0xf2, 0xee, 0xcf, 0x25,
	0x27, 0x2d, 0x7a, 0x94, 0xa8, 0x0c, 0xd1, 0x7c, 0x68, 0xba, 0x32, 0xd8, 0x7d, 0x39, 0xc1, 0xc5,
	0x9e, 0x37, 0x85, 0x6c, 0xcf, 0x9b, 0xc9, 0x73, 0xae, 0x18, 0x3e, 0x92, 0xb9, 0x18, 0x2b, 0xd9,
	0x55, 0x80, 0x86, 0xed, 0x50, 0x19, 0xab, 0x45, 0x50, 0xa3, 0x9c, 0xa9, 0x8e, 0x8d, 0x5d, 0xa8,
	0xf0, 0xff, 0xea, 0x1a, 0xfd, 0xa8, 0xb7, 0x52, 0xde, 0x35, 0xbf, 0x8c, 0x22, 0xac, 0xa6, 0x45,
	0x38, 0x8a, 0xef, 0xba, 0x8c, 0x6f, 0x6e, 0x3a, 0xbe, 0x22, 0xba, 0x78, 0x0d, 0x4a, 0xdc, 0x5e,
	0x73, 0x37, 0xdd, 0x14, 0x7e, 0x00, 0x9a, 0xf4, 0x65, 0x16, 0x44, 0x9e, 0x41, 0x8d, 0xce, 0xf0,
	0x0c, 0x4a, 0x4d, 0xd7, 0x26, 0x1f, 0x66, 0x2a, 0xa4, 0xd7, 0x65, 0x74, 0x5f, 0xe7, 0x62, 0xf7,
	0x35, 0xbe, 0x03, 0x5a, 0xdb, 0x19, 0x90, 0x80, 0x5a, 0x83, 0x21, 0x5a, 0x05, 0x8d, 0x86, 0x82,
	0xa4, 0x9c, 0x2c, 0xe0, 0x12, 0x14, 0x1a, 0x83, 0x21, 0x3d, 0xc3, 0x77, 0x01, 0xb1, 0x09, 0xcd,
	0x0f, 0x16, 0x98, 0x24, 0x18, 0x7a, 0x6e, 0x40, 0xd0, 0x0a, 0x14, 0xb9, 0xf9, 0x70, 0x4e, 0x49,
	0x09, 0xff, 0x16, 0x2e, 0x33, 0x74, 0xd3, 0xb5, 0x9d, 0x0e, 0x99, 0xc0, 0xef, 0x40, 0xc9, 0x11,
	0x4b, 0x72, 0x90, 0x5c, 0x0a, 0xc3, 0x27, 0x0f, 0x67, 0x86, 0xfb, 0xf8, 0xad, 0xb0, 0xc7, 0xff,
	0x79, 0x98, 0x10, 0xdc, 0x84, 0x05, 0x91, 0x06, 0xf1, 0x3f, 0x48, 0x68, 0xb6, 0x22, 0x16, 0x05,
	0x18, 0xad, 0x41, 0x99, 0xe5, 0x21, 0x84, 0xa8, 0x1c, 0x02, 0x6c, 0x49, 0x00, 0x6a, 0x3f, 0x29,
	0xa0, 0x4d, 0xc6, 0xfd, 0x15, 0x58, 0x7a, 0xd5, 0x7a, 0xd6, 0x3a, 0x7c, 0xd3, 0x3a, 0x7e, 0x7a,
	0xd8, 0xda, 0x6d, 0xb6, 0x9b, 0x87, 0x2d, 0x7d, 0x0e, 0x15, 0x41, 0x6d, 0xbc, 0xd4, 0x15, 0x54,
	0x82, 0x5c, 0xab, 0xf1, 0x52, 0x57, 0xd9, 0xc2, 0x5e, 0x5b, 0xcf, 0xb1, 0x85, 0xbd, 0x76, 0x43,
	0xcf, 0xb3, 0x85, 0x83, 0xb6, 0x5e, 0x60, 0x0b, 0x07, 0xed, 0x86, 0x5e, 0x44, 0x00, 0xc5, 0x66,
	0xeb, 0xa8, 0xb9, 0xdb, 0xd0, 0x4b, 0xa8, 0x0c, 0xa5, 0xc3, 0x57, 0x6d, 0x2e, 0xcc, 0x33, 0x61,
	0xa7, 0xd1, 0x7e, 0xd3, 0x68, 0xb4, 0x74, 0x8d, 0xa1, 0xde, 0x34, 0xdb, 0xfb, 0xcd, 0x96, 0x0e,
	0x6c, 0x83, 0x7d, 0x1f, 0xbe, 0x6a, 0xeb, 0x65, 0x54, 0x81, 0xf9, 0xa7, 0x87, 0xad, 0xf6, 0x76,
	0xb3, 0x75, 0xa4, 0x57, 0x6a, 0x4f, 0x40, 0xfb, 0x1d, 0xcb, 0x56, 0xfb, 0x6c, 0x48, 0x18, 0x4e,
	0xfa, 0xa8, 0xcf, 0x31, 0x82, 0xa3, 0xb6, 0xd9, 0x6c, 0xed, 0xe9, 0x0a, 0xdb, 0x68, 0xbd, 0x7a,
	0xde, 0x30, 0x9b, 0x4f, 0x75, 0x15, 0xcd, 0x43, 0x7e, 0xe7, 0xf0, 0xf0, 0x40, 0xcf, 0x3d, 0xfc,
	0x5b, 0x01, 0x0a, 0xe2, 0xe7, 0x98, 0xb7, 0xa0, 0xb5, 0x7d, 0x6b, 0x4c, 0xfc, 0xc0, 0xea, 0x23,
	0x94, 0xf8, 0xf1, 0x84, 0x03, 0xaa, 0x97, 0x13, 0xbf, 0x87, 0x88, 0x16, 0xc2, 0xf8, 0xcf, 0xff,
	0xfc, 0xcf, 0x5f, 0xd4, 0x55, 0x7c, 0xb5, 0x3e, 0x7e, 0x50, 0xe7, 0x39, 0xad, 0x7f, 0xe4, 0x7f,
	0x3e, 0xd5, 0xf9, 0xef, 0x2c, 0x5b, 0x4a, 0xed, 0xbe, 0x82, 0x5e, 0x81, 0xb6, 0x47, 0xa8, 0x9c,
	0xc3, 0xd1, 0xbc, 0x8e, 0x4a, 0xbb, 0x7a, 0xae, 0x85, 0xf0, 0x97, 0x9c, 0x75, 0x0d, 0x5d, 0x9f,
	0x66, 0x15, 0x09, 0xac, 0x7f, 0x74, 0xec, 0x4f, 0xe8, 0x10, 0x4a, 0x7b, 0x84, 0xf2, 0xf9, 0x9b,
	0x42, 0x9a, 0xe8, 0x38, 0x7c, 0x93, 0x53, 0x5e, 0x47, 0x5f, 0x4c, 0x53, 0xb2, 0x84, 0x0b, 0xc2,
	0x37, 0x50, 0xd9, 0x23, 0x74, 0x52, 0xf2, 0x97, 0x12, 0x61, 0x68, 0xee, 0x56, 0x23, 0x33, 0x11,
	0xe6, 0x22, 0xe2, 0xa8, 0x3b, 0xd0, 0x73, 0x1e, 0x80, 0xa3, 0x4e, 0x8f, 0x0c, 0xac, 0x69, 0xd6,
	0x85, 0xc4, 0x02, 0x5e, 0xe7, 0x8c, 0x55, 0x64, 0x4c, 0x33, 0x06, 0x82, 0xe1, 0x3b, 0x80, 0x49,
	0x8f, 0xa1, 0x48, 0x9d, 0x37, 0x60, 0xb5, 0x1a, 0x8a, 0xd3, 0x6d, 0x88, 0x97, 0x38, 0x75, 0x19,
	0x69, 0x11, 0x35, 0xfa, 0x01, 0xca, 0xb1, 0x0e, 0x9c, 0x76, 0xee, 0x8b, 0x38, 0xdd, 0xb9, 0x3e,
	0xc5, 0x6b, 0x9c, 0xef, 0x1a, 0x4a, 0x49, 0xbf, 0xc3, 0x1a, 0x15, 0xbd, 0x15, 0x9e, 0xca, 0x86,
	0x9b, 0x22, 0x4f, 0xf8, 0x9a, 0x6c, 0xe1, 0x8b, 0xb8, 0x79, 0xc3, 0x3e, 0xfc, 0x6f, 0x91, 0x5d,
	0xbe, 0x0e, 0x45, 0xc7, 0xa0, 0x6d, 0xdb, 0xb6, 0x2c, 0xaf, 0xe5, 0x84, 0x0d, 0x59, 0x0e, 0x55,
	0x34, 0x29, 0x86, 0x70, 0xfc, 0xe3, 0x0d, 0x6e, 0x00, 0x63, 0x63, 0x56, 0x95, 0x6d, 0x85, 0xa3,
	0xfc, 0x7b, 0x28, 0x6d, 0xdb, 0x36, 0x2f, 0xb4, 0xec, 0xf4, 0xb7, 0x38, 0xfd, 0x0d, 0xbc, 0x92,
	0x5e, 0x71, 0x5b, 0xe2, 0x86, 0xdd, 0x87, 0xd2, 0xce, 0xa8, 0x7f, 0xba, 0x6d, 0xdb, 0x9f, 0x41,
	0x2d, 0xd3, 0x88, 0x27, 0x69, 0xdc, 0x50, 0xd0, 0x77, 0x30, 0xbf, 0x6d, 0xdb, 0xe2, 0xf7, 0xdc,
	0xa9, 0x40, 0xa7, 0xb1, 0x5c, 0xe3, 0x2c, 0x97, 0xf1, 0xd2, 0x94, 0x83, 0xe8, 0x39, 0x94, 0x77,
	0x49, 0x9f, 0x50, 0xf2, 0xf9, 0x74, 0xb5, 0x14, 0xba, 0x1f, 0xa0, 0x22, 0xe8, 0x66, 0x8f, 0x80,
	0x34, 0x46, 0x39, 0x06, 0x6a, 0x3f, 0x33, 0x06, 0x7e, 0x0f, 0x20, 0xd8, 0x67, 0x4d, 0x82, 0x34,
	0x6e, 0xd9, 0xb6, 0xb5, 0x0b, 0xe7, 0xc1, 0x1f, 0x78, 0x48, 0xf9, 0x95, 0x83, 0xce, 0xdf, 0x40,
	0xa9, 0xac, 0x35, 0xce, 0x7a, 0x0b, 0xaf, 0xcd, 0xe8, 0x87, 0xfa, 0x47, 0x5e, 0xba, 0x9f, 0xb6,
	0x94, 0x1a, 0xea, 0x84, 0x31, 0xfe, 0x0c, 0xfe, 0x3a, 0xe7, 0xbf, 0x53, 0xbb, 0xfd, 0x33, 0xfc,
	0xf5, 0x8f, 0xfc, 0x02, 0xff, 0x84, 0x8e, 0x78, 0x6b, 0xc8, 0xc1, 0x93, 0x9c, 0x33, 0x17, 0x85,
	0x05, 0xcf, 0x9c, 0x3d, 0x5b, 0x4a, 0xed, 0xa4, 0xc8, 0x5f, 0x60, 0x5f, 0xff, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x6f, 0x12, 0x0a, 0x91, 0x18, 0x00, 0x00,
}
