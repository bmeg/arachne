// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: gripql.proto

package gripql

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Condition int32

const (
	Condition_UNKNOWN_CONDITION Condition = 0
	Condition_EQ                Condition = 1
	Condition_NEQ               Condition = 2
	Condition_GT                Condition = 3
	Condition_GTE               Condition = 4
	Condition_LT                Condition = 5
	Condition_LTE               Condition = 6
	Condition_INSIDE            Condition = 7
	Condition_OUTSIDE           Condition = 8
	Condition_BETWEEN           Condition = 9
	Condition_WITHIN            Condition = 10
	Condition_WITHOUT           Condition = 11
	Condition_CONTAINS          Condition = 12
)

// Enum value maps for Condition.
var (
	Condition_name = map[int32]string{
		0:  "UNKNOWN_CONDITION",
		1:  "EQ",
		2:  "NEQ",
		3:  "GT",
		4:  "GTE",
		5:  "LT",
		6:  "LTE",
		7:  "INSIDE",
		8:  "OUTSIDE",
		9:  "BETWEEN",
		10: "WITHIN",
		11: "WITHOUT",
		12: "CONTAINS",
	}
	Condition_value = map[string]int32{
		"UNKNOWN_CONDITION": 0,
		"EQ":                1,
		"NEQ":               2,
		"GT":                3,
		"GTE":               4,
		"LT":                5,
		"LTE":               6,
		"INSIDE":            7,
		"OUTSIDE":           8,
		"BETWEEN":           9,
		"WITHIN":            10,
		"WITHOUT":           11,
		"CONTAINS":          12,
	}
)

func (x Condition) Enum() *Condition {
	p := new(Condition)
	*p = x
	return p
}

func (x Condition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition) Descriptor() protoreflect.EnumDescriptor {
	return file_gripql_proto_enumTypes[0].Descriptor()
}

func (Condition) Type() protoreflect.EnumType {
	return &file_gripql_proto_enumTypes[0]
}

func (x Condition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition.Descriptor instead.
func (Condition) EnumDescriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{0}
}

type JobState int32

const (
	JobState_QUEUED    JobState = 0
	JobState_RUNNING   JobState = 1
	JobState_STREAMING JobState = 2
	JobState_COMPLETE  JobState = 3
	JobState_ERROR     JobState = 4
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "QUEUED",
		1: "RUNNING",
		2: "STREAMING",
		3: "COMPLETE",
		4: "ERROR",
	}
	JobState_value = map[string]int32{
		"QUEUED":    0,
		"RUNNING":   1,
		"STREAMING": 2,
		"COMPLETE":  3,
		"ERROR":     4,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_gripql_proto_enumTypes[1].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_gripql_proto_enumTypes[1]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{1}
}

type FieldType int32

const (
	FieldType_UNKNOWN FieldType = 0
	FieldType_STRING  FieldType = 1
	FieldType_NUMERIC FieldType = 2
	FieldType_BOOL    FieldType = 3
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "NUMERIC",
		3: "BOOL",
	}
	FieldType_value = map[string]int32{
		"UNKNOWN": 0,
		"STRING":  1,
		"NUMERIC": 2,
		"BOOL":    3,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_gripql_proto_enumTypes[2].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_gripql_proto_enumTypes[2]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{2}
}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph    string    `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Vertices []*Vertex `protobuf:"bytes,2,rep,name=vertices,proto3" json:"vertices,omitempty"`
	Edges    []*Edge   `protobuf:"bytes,3,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{0}
}

func (x *Graph) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *Graph) GetVertices() []*Vertex {
	if x != nil {
		return x.Vertices
	}
	return nil
}

func (x *Graph) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

type GraphQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph string            `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Query []*GraphStatement `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *GraphQuery) Reset() {
	*x = GraphQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphQuery) ProtoMessage() {}

func (x *GraphQuery) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphQuery.ProtoReflect.Descriptor instead.
func (*GraphQuery) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{1}
}

func (x *GraphQuery) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *GraphQuery) GetQuery() []*GraphStatement {
	if x != nil {
		return x.Query
	}
	return nil
}

type QuerySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query []*GraphStatement `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *QuerySet) Reset() {
	*x = QuerySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySet) ProtoMessage() {}

func (x *QuerySet) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySet.ProtoReflect.Descriptor instead.
func (*QuerySet) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{2}
}

func (x *QuerySet) GetQuery() []*GraphStatement {
	if x != nil {
		return x.Query
	}
	return nil
}

type MatchQuerySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*QuerySet `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *MatchQuerySet) Reset() {
	*x = MatchQuerySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchQuerySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchQuerySet) ProtoMessage() {}

func (x *MatchQuerySet) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchQuerySet.ProtoReflect.Descriptor instead.
func (*MatchQuerySet) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{3}
}

func (x *MatchQuerySet) GetQueries() []*QuerySet {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GraphStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Statement:
	//	*GraphStatement_V
	//	*GraphStatement_E
	//	*GraphStatement_In
	//	*GraphStatement_Out
	//	*GraphStatement_Both
	//	*GraphStatement_InE
	//	*GraphStatement_OutE
	//	*GraphStatement_BothE
	//	*GraphStatement_InV
	//	*GraphStatement_OutV
	//	*GraphStatement_BothV
	//	*GraphStatement_As
	//	*GraphStatement_Select
	//	*GraphStatement_Limit
	//	*GraphStatement_Skip
	//	*GraphStatement_Range
	//	*GraphStatement_Match
	//	*GraphStatement_Has
	//	*GraphStatement_HasLabel
	//	*GraphStatement_HasKey
	//	*GraphStatement_HasId
	//	*GraphStatement_Count
	//	*GraphStatement_Fields
	//	*GraphStatement_Distinct
	//	*GraphStatement_Aggregate
	//	*GraphStatement_Render
	Statement isGraphStatement_Statement `protobuf_oneof:"statement"`
}

func (x *GraphStatement) Reset() {
	*x = GraphStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphStatement) ProtoMessage() {}

func (x *GraphStatement) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphStatement.ProtoReflect.Descriptor instead.
func (*GraphStatement) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{4}
}

func (m *GraphStatement) GetStatement() isGraphStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (x *GraphStatement) GetV() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_V); ok {
		return x.V
	}
	return nil
}

func (x *GraphStatement) GetE() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_E); ok {
		return x.E
	}
	return nil
}

func (x *GraphStatement) GetIn() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_In); ok {
		return x.In
	}
	return nil
}

func (x *GraphStatement) GetOut() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_Out); ok {
		return x.Out
	}
	return nil
}

func (x *GraphStatement) GetBoth() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_Both); ok {
		return x.Both
	}
	return nil
}

func (x *GraphStatement) GetInE() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_InE); ok {
		return x.InE
	}
	return nil
}

func (x *GraphStatement) GetOutE() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_OutE); ok {
		return x.OutE
	}
	return nil
}

func (x *GraphStatement) GetBothE() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_BothE); ok {
		return x.BothE
	}
	return nil
}

func (x *GraphStatement) GetInV() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_InV); ok {
		return x.InV
	}
	return nil
}

func (x *GraphStatement) GetOutV() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_OutV); ok {
		return x.OutV
	}
	return nil
}

func (x *GraphStatement) GetBothV() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_BothV); ok {
		return x.BothV
	}
	return nil
}

func (x *GraphStatement) GetAs() string {
	if x, ok := x.GetStatement().(*GraphStatement_As); ok {
		return x.As
	}
	return ""
}

func (x *GraphStatement) GetSelect() *SelectStatement {
	if x, ok := x.GetStatement().(*GraphStatement_Select); ok {
		return x.Select
	}
	return nil
}

func (x *GraphStatement) GetLimit() uint32 {
	if x, ok := x.GetStatement().(*GraphStatement_Limit); ok {
		return x.Limit
	}
	return 0
}

func (x *GraphStatement) GetSkip() uint32 {
	if x, ok := x.GetStatement().(*GraphStatement_Skip); ok {
		return x.Skip
	}
	return 0
}

func (x *GraphStatement) GetRange() *Range {
	if x, ok := x.GetStatement().(*GraphStatement_Range); ok {
		return x.Range
	}
	return nil
}

func (x *GraphStatement) GetMatch() *MatchQuerySet {
	if x, ok := x.GetStatement().(*GraphStatement_Match); ok {
		return x.Match
	}
	return nil
}

func (x *GraphStatement) GetHas() *HasExpression {
	if x, ok := x.GetStatement().(*GraphStatement_Has); ok {
		return x.Has
	}
	return nil
}

func (x *GraphStatement) GetHasLabel() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_HasLabel); ok {
		return x.HasLabel
	}
	return nil
}

func (x *GraphStatement) GetHasKey() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_HasKey); ok {
		return x.HasKey
	}
	return nil
}

func (x *GraphStatement) GetHasId() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_HasId); ok {
		return x.HasId
	}
	return nil
}

func (x *GraphStatement) GetCount() string {
	if x, ok := x.GetStatement().(*GraphStatement_Count); ok {
		return x.Count
	}
	return ""
}

func (x *GraphStatement) GetFields() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_Fields); ok {
		return x.Fields
	}
	return nil
}

func (x *GraphStatement) GetDistinct() *_struct.ListValue {
	if x, ok := x.GetStatement().(*GraphStatement_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (x *GraphStatement) GetAggregate() *Aggregations {
	if x, ok := x.GetStatement().(*GraphStatement_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (x *GraphStatement) GetRender() *_struct.Value {
	if x, ok := x.GetStatement().(*GraphStatement_Render); ok {
		return x.Render
	}
	return nil
}

type isGraphStatement_Statement interface {
	isGraphStatement_Statement()
}

type GraphStatement_V struct {
	// Tinkerpop methods
	V *_struct.ListValue `protobuf:"bytes,1,opt,name=v,proto3,oneof"`
}

type GraphStatement_E struct {
	E *_struct.ListValue `protobuf:"bytes,2,opt,name=e,proto3,oneof"`
}

type GraphStatement_In struct {
	In *_struct.ListValue `protobuf:"bytes,10,opt,name=in,proto3,oneof"`
}

type GraphStatement_Out struct {
	Out *_struct.ListValue `protobuf:"bytes,11,opt,name=out,proto3,oneof"`
}

type GraphStatement_Both struct {
	Both *_struct.ListValue `protobuf:"bytes,14,opt,name=both,proto3,oneof"`
}

type GraphStatement_InE struct {
	InE *_struct.ListValue `protobuf:"bytes,12,opt,name=in_e,json=inE,proto3,oneof"`
}

type GraphStatement_OutE struct {
	OutE *_struct.ListValue `protobuf:"bytes,13,opt,name=out_e,json=outE,proto3,oneof"`
}

type GraphStatement_BothE struct {
	BothE *_struct.ListValue `protobuf:"bytes,15,opt,name=both_e,json=bothE,proto3,oneof"`
}

type GraphStatement_InV struct {
	InV *_struct.ListValue `protobuf:"bytes,16,opt,name=in_v,json=inV,proto3,oneof"`
}

type GraphStatement_OutV struct {
	OutV *_struct.ListValue `protobuf:"bytes,17,opt,name=out_v,json=outV,proto3,oneof"`
}

type GraphStatement_BothV struct {
	BothV *_struct.ListValue `protobuf:"bytes,18,opt,name=both_v,json=bothV,proto3,oneof"`
}

type GraphStatement_As struct {
	As string `protobuf:"bytes,20,opt,name=as,proto3,oneof"`
}

type GraphStatement_Select struct {
	Select *SelectStatement `protobuf:"bytes,21,opt,name=select,proto3,oneof"`
}

type GraphStatement_Limit struct {
	Limit uint32 `protobuf:"varint,24,opt,name=limit,proto3,oneof"`
}

type GraphStatement_Skip struct {
	Skip uint32 `protobuf:"varint,25,opt,name=skip,proto3,oneof"`
}

type GraphStatement_Range struct {
	Range *Range `protobuf:"bytes,33,opt,name=range,proto3,oneof"`
}

type GraphStatement_Match struct {
	Match *MatchQuerySet `protobuf:"bytes,28,opt,name=match,proto3,oneof"`
}

type GraphStatement_Has struct {
	Has *HasExpression `protobuf:"bytes,29,opt,name=has,proto3,oneof"`
}

type GraphStatement_HasLabel struct {
	HasLabel *_struct.ListValue `protobuf:"bytes,34,opt,name=has_label,json=hasLabel,proto3,oneof"`
}

type GraphStatement_HasKey struct {
	HasKey *_struct.ListValue `protobuf:"bytes,35,opt,name=has_key,json=hasKey,proto3,oneof"`
}

type GraphStatement_HasId struct {
	HasId *_struct.ListValue `protobuf:"bytes,36,opt,name=has_id,json=hasId,proto3,oneof"`
}

type GraphStatement_Count struct {
	Count string `protobuf:"bytes,30,opt,name=count,proto3,oneof"`
}

type GraphStatement_Fields struct {
	// custom methods
	Fields *_struct.ListValue `protobuf:"bytes,26,opt,name=fields,proto3,oneof"`
}

type GraphStatement_Distinct struct {
	Distinct *_struct.ListValue `protobuf:"bytes,27,opt,name=distinct,proto3,oneof"`
}

type GraphStatement_Aggregate struct {
	Aggregate *Aggregations `protobuf:"bytes,31,opt,name=aggregate,proto3,oneof"`
}

type GraphStatement_Render struct {
	Render *_struct.Value `protobuf:"bytes,32,opt,name=render,proto3,oneof"`
}

func (*GraphStatement_V) isGraphStatement_Statement() {}

func (*GraphStatement_E) isGraphStatement_Statement() {}

func (*GraphStatement_In) isGraphStatement_Statement() {}

func (*GraphStatement_Out) isGraphStatement_Statement() {}

func (*GraphStatement_Both) isGraphStatement_Statement() {}

func (*GraphStatement_InE) isGraphStatement_Statement() {}

func (*GraphStatement_OutE) isGraphStatement_Statement() {}

func (*GraphStatement_BothE) isGraphStatement_Statement() {}

func (*GraphStatement_InV) isGraphStatement_Statement() {}

func (*GraphStatement_OutV) isGraphStatement_Statement() {}

func (*GraphStatement_BothV) isGraphStatement_Statement() {}

func (*GraphStatement_As) isGraphStatement_Statement() {}

func (*GraphStatement_Select) isGraphStatement_Statement() {}

func (*GraphStatement_Limit) isGraphStatement_Statement() {}

func (*GraphStatement_Skip) isGraphStatement_Statement() {}

func (*GraphStatement_Range) isGraphStatement_Statement() {}

func (*GraphStatement_Match) isGraphStatement_Statement() {}

func (*GraphStatement_Has) isGraphStatement_Statement() {}

func (*GraphStatement_HasLabel) isGraphStatement_Statement() {}

func (*GraphStatement_HasKey) isGraphStatement_Statement() {}

func (*GraphStatement_HasId) isGraphStatement_Statement() {}

func (*GraphStatement_Count) isGraphStatement_Statement() {}

func (*GraphStatement_Fields) isGraphStatement_Statement() {}

func (*GraphStatement_Distinct) isGraphStatement_Statement() {}

func (*GraphStatement_Aggregate) isGraphStatement_Statement() {}

func (*GraphStatement_Render) isGraphStatement_Statement() {}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop  int32 `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{5}
}

func (x *Range) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetStop() int32 {
	if x != nil {
		return x.Stop
	}
	return 0
}

type AggregationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph        string       `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Aggregations []*Aggregate `protobuf:"bytes,2,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *AggregationsRequest) Reset() {
	*x = AggregationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationsRequest) ProtoMessage() {}

func (x *AggregationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationsRequest.ProtoReflect.Descriptor instead.
func (*AggregationsRequest) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{6}
}

func (x *AggregationsRequest) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *AggregationsRequest) GetAggregations() []*Aggregate {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type Aggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregations []*Aggregate `protobuf:"bytes,1,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
}

func (x *Aggregations) Reset() {
	*x = Aggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregations) ProtoMessage() {}

func (x *Aggregations) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregations.ProtoReflect.Descriptor instead.
func (*Aggregations) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{7}
}

func (x *Aggregations) GetAggregations() []*Aggregate {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type Aggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Aggregation:
	//	*Aggregate_Term
	//	*Aggregate_Percentile
	//	*Aggregate_Histogram
	Aggregation isAggregate_Aggregation `protobuf_oneof:"aggregation"`
}

func (x *Aggregate) Reset() {
	*x = Aggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregate) ProtoMessage() {}

func (x *Aggregate) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregate.ProtoReflect.Descriptor instead.
func (*Aggregate) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{8}
}

func (x *Aggregate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Aggregate) GetAggregation() isAggregate_Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (x *Aggregate) GetTerm() *TermAggregation {
	if x, ok := x.GetAggregation().(*Aggregate_Term); ok {
		return x.Term
	}
	return nil
}

func (x *Aggregate) GetPercentile() *PercentileAggregation {
	if x, ok := x.GetAggregation().(*Aggregate_Percentile); ok {
		return x.Percentile
	}
	return nil
}

func (x *Aggregate) GetHistogram() *HistogramAggregation {
	if x, ok := x.GetAggregation().(*Aggregate_Histogram); ok {
		return x.Histogram
	}
	return nil
}

type isAggregate_Aggregation interface {
	isAggregate_Aggregation()
}

type Aggregate_Term struct {
	Term *TermAggregation `protobuf:"bytes,2,opt,name=term,proto3,oneof"`
}

type Aggregate_Percentile struct {
	Percentile *PercentileAggregation `protobuf:"bytes,3,opt,name=percentile,proto3,oneof"`
}

type Aggregate_Histogram struct {
	Histogram *HistogramAggregation `protobuf:"bytes,4,opt,name=histogram,proto3,oneof"`
}

func (*Aggregate_Term) isAggregate_Aggregation() {}

func (*Aggregate_Percentile) isAggregate_Aggregation() {}

func (*Aggregate_Histogram) isAggregate_Aggregation() {}

type TermAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *TermAggregation) Reset() {
	*x = TermAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermAggregation) ProtoMessage() {}

func (x *TermAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermAggregation.ProtoReflect.Descriptor instead.
func (*TermAggregation) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{9}
}

func (x *TermAggregation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TermAggregation) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PercentileAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string    `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Percents []float64 `protobuf:"fixed64,3,rep,packed,name=percents,proto3" json:"percents,omitempty"`
}

func (x *PercentileAggregation) Reset() {
	*x = PercentileAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentileAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentileAggregation) ProtoMessage() {}

func (x *PercentileAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentileAggregation.ProtoReflect.Descriptor instead.
func (*PercentileAggregation) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{10}
}

func (x *PercentileAggregation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PercentileAggregation) GetPercents() []float64 {
	if x != nil {
		return x.Percents
	}
	return nil
}

type HistogramAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *HistogramAggregation) Reset() {
	*x = HistogramAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramAggregation) ProtoMessage() {}

func (x *HistogramAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramAggregation.ProtoReflect.Descriptor instead.
func (*HistogramAggregation) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{11}
}

func (x *HistogramAggregation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *HistogramAggregation) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type NamedAggregationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregations map[string]*AggregationResult `protobuf:"bytes,3,rep,name=aggregations,proto3" json:"aggregations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NamedAggregationResult) Reset() {
	*x = NamedAggregationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedAggregationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedAggregationResult) ProtoMessage() {}

func (x *NamedAggregationResult) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedAggregationResult.ProtoReflect.Descriptor instead.
func (*NamedAggregationResult) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{12}
}

func (x *NamedAggregationResult) GetAggregations() map[string]*AggregationResult {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

type AggregationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*AggregationResultBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *AggregationResult) Reset() {
	*x = AggregationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationResult) ProtoMessage() {}

func (x *AggregationResult) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationResult.ProtoReflect.Descriptor instead.
func (*AggregationResult) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{13}
}

func (x *AggregationResult) GetBuckets() []*AggregationResultBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type AggregationResultBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *_struct.Value `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value float64        `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AggregationResultBucket) Reset() {
	*x = AggregationResultBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationResultBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationResultBucket) ProtoMessage() {}

func (x *AggregationResultBucket) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationResultBucket.ProtoReflect.Descriptor instead.
func (*AggregationResultBucket) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{14}
}

func (x *AggregationResultBucket) GetKey() *_struct.Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AggregationResultBucket) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type HasExpressionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expressions []*HasExpression `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
}

func (x *HasExpressionList) Reset() {
	*x = HasExpressionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasExpressionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasExpressionList) ProtoMessage() {}

func (x *HasExpressionList) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasExpressionList.ProtoReflect.Descriptor instead.
func (*HasExpressionList) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{15}
}

func (x *HasExpressionList) GetExpressions() []*HasExpression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type HasExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*HasExpression_And
	//	*HasExpression_Or
	//	*HasExpression_Not
	//	*HasExpression_Condition
	Expression isHasExpression_Expression `protobuf_oneof:"expression"`
}

func (x *HasExpression) Reset() {
	*x = HasExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasExpression) ProtoMessage() {}

func (x *HasExpression) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasExpression.ProtoReflect.Descriptor instead.
func (*HasExpression) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{16}
}

func (m *HasExpression) GetExpression() isHasExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *HasExpression) GetAnd() *HasExpressionList {
	if x, ok := x.GetExpression().(*HasExpression_And); ok {
		return x.And
	}
	return nil
}

func (x *HasExpression) GetOr() *HasExpressionList {
	if x, ok := x.GetExpression().(*HasExpression_Or); ok {
		return x.Or
	}
	return nil
}

func (x *HasExpression) GetNot() *HasExpression {
	if x, ok := x.GetExpression().(*HasExpression_Not); ok {
		return x.Not
	}
	return nil
}

func (x *HasExpression) GetCondition() *HasCondition {
	if x, ok := x.GetExpression().(*HasExpression_Condition); ok {
		return x.Condition
	}
	return nil
}

type isHasExpression_Expression interface {
	isHasExpression_Expression()
}

type HasExpression_And struct {
	And *HasExpressionList `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type HasExpression_Or struct {
	Or *HasExpressionList `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type HasExpression_Not struct {
	Not *HasExpression `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}

type HasExpression_Condition struct {
	Condition *HasCondition `protobuf:"bytes,4,opt,name=condition,proto3,oneof"`
}

func (*HasExpression_And) isHasExpression_Expression() {}

func (*HasExpression_Or) isHasExpression_Expression() {}

func (*HasExpression_Not) isHasExpression_Expression() {}

func (*HasExpression_Condition) isHasExpression_Expression() {}

type HasCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     *_struct.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Condition Condition      `protobuf:"varint,3,opt,name=condition,proto3,enum=gripql.Condition" json:"condition,omitempty"`
}

func (x *HasCondition) Reset() {
	*x = HasCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasCondition) ProtoMessage() {}

func (x *HasCondition) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasCondition.ProtoReflect.Descriptor instead.
func (*HasCondition) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{17}
}

func (x *HasCondition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HasCondition) GetValue() *_struct.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HasCondition) GetCondition() Condition {
	if x != nil {
		return x.Condition
	}
	return Condition_UNKNOWN_CONDITION
}

type SelectStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Marks []string `protobuf:"bytes,1,rep,name=marks,proto3" json:"marks,omitempty"`
}

func (x *SelectStatement) Reset() {
	*x = SelectStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStatement) ProtoMessage() {}

func (x *SelectStatement) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStatement.ProtoReflect.Descriptor instead.
func (*SelectStatement) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{18}
}

func (x *SelectStatement) GetMarks() []string {
	if x != nil {
		return x.Marks
	}
	return nil
}

type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*Selection_Vertex
	//	*Selection_Edge
	Result isSelection_Result `protobuf_oneof:"result"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{19}
}

func (m *Selection) GetResult() isSelection_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Selection) GetVertex() *Vertex {
	if x, ok := x.GetResult().(*Selection_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (x *Selection) GetEdge() *Edge {
	if x, ok := x.GetResult().(*Selection_Edge); ok {
		return x.Edge
	}
	return nil
}

type isSelection_Result interface {
	isSelection_Result()
}

type Selection_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3,oneof"`
}

type Selection_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}

func (*Selection_Vertex) isSelection_Result() {}

func (*Selection_Edge) isSelection_Result() {}

type Selections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selections map[string]*Selection `protobuf:"bytes,1,rep,name=selections,proto3" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Selections) Reset() {
	*x = Selections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selections) ProtoMessage() {}

func (x *Selections) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selections.ProtoReflect.Descriptor instead.
func (*Selections) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{20}
}

func (x *Selections) GetSelections() map[string]*Selection {
	if x != nil {
		return x.Selections
	}
	return nil
}

type Vertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid   string          `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Label string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Data  *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Vertex) Reset() {
	*x = Vertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertex) ProtoMessage() {}

func (x *Vertex) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertex.ProtoReflect.Descriptor instead.
func (*Vertex) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{21}
}

func (x *Vertex) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *Vertex) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Vertex) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gid   string          `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Label string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	From  string          `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To    string          `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Data  *_struct.Struct `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{22}
}

func (x *Edge) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *Edge) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Edge) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Edge) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Edge) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*QueryResult_Vertex
	//	*QueryResult_Edge
	//	*QueryResult_Aggregations
	//	*QueryResult_Selections
	//	*QueryResult_Render
	//	*QueryResult_Count
	Result isQueryResult_Result `protobuf_oneof:"result"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{23}
}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *QueryResult) GetVertex() *Vertex {
	if x, ok := x.GetResult().(*QueryResult_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (x *QueryResult) GetEdge() *Edge {
	if x, ok := x.GetResult().(*QueryResult_Edge); ok {
		return x.Edge
	}
	return nil
}

func (x *QueryResult) GetAggregations() *NamedAggregationResult {
	if x, ok := x.GetResult().(*QueryResult_Aggregations); ok {
		return x.Aggregations
	}
	return nil
}

func (x *QueryResult) GetSelections() *Selections {
	if x, ok := x.GetResult().(*QueryResult_Selections); ok {
		return x.Selections
	}
	return nil
}

func (x *QueryResult) GetRender() *_struct.Value {
	if x, ok := x.GetResult().(*QueryResult_Render); ok {
		return x.Render
	}
	return nil
}

func (x *QueryResult) GetCount() uint32 {
	if x, ok := x.GetResult().(*QueryResult_Count); ok {
		return x.Count
	}
	return 0
}

type isQueryResult_Result interface {
	isQueryResult_Result()
}

type QueryResult_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3,oneof"`
}

type QueryResult_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}

type QueryResult_Aggregations struct {
	Aggregations *NamedAggregationResult `protobuf:"bytes,3,opt,name=aggregations,proto3,oneof"`
}

type QueryResult_Selections struct {
	Selections *Selections `protobuf:"bytes,4,opt,name=selections,proto3,oneof"`
}

type QueryResult_Render struct {
	Render *_struct.Value `protobuf:"bytes,5,opt,name=render,proto3,oneof"`
}

type QueryResult_Count struct {
	Count uint32 `protobuf:"varint,6,opt,name=count,proto3,oneof"`
}

func (*QueryResult_Vertex) isQueryResult_Result() {}

func (*QueryResult_Edge) isQueryResult_Result() {}

func (*QueryResult_Aggregations) isQueryResult_Result() {}

func (*QueryResult_Selections) isQueryResult_Result() {}

func (*QueryResult_Render) isQueryResult_Result() {}

func (*QueryResult_Count) isQueryResult_Result() {}

type QueryJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Graph string `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
}

func (x *QueryJob) Reset() {
	*x = QueryJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJob) ProtoMessage() {}

func (x *QueryJob) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJob.ProtoReflect.Descriptor instead.
func (*QueryJob) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{24}
}

func (x *QueryJob) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryJob) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Graph string            `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
	State JobState          `protobuf:"varint,3,opt,name=state,proto3,enum=gripql.JobState" json:"state,omitempty"`
	Count uint64            `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Query []*GraphStatement `protobuf:"bytes,5,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{25}
}

func (x *JobStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobStatus) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *JobStatus) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_QUEUED
}

func (x *JobStatus) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *JobStatus) GetQuery() []*GraphStatement {
	if x != nil {
		return x.Query
	}
	return nil
}

type EditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EditResult) Reset() {
	*x = EditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditResult) ProtoMessage() {}

func (x *EditResult) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditResult.ProtoReflect.Descriptor instead.
func (*EditResult) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{26}
}

func (x *EditResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BulkEditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertCount int32 `protobuf:"varint,1,opt,name=insert_count,json=insertCount,proto3" json:"insert_count,omitempty"`
	ErrorCount  int32 `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
}

func (x *BulkEditResult) Reset() {
	*x = BulkEditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkEditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkEditResult) ProtoMessage() {}

func (x *BulkEditResult) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkEditResult.ProtoReflect.Descriptor instead.
func (*BulkEditResult) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{27}
}

func (x *BulkEditResult) GetInsertCount() int32 {
	if x != nil {
		return x.InsertCount
	}
	return 0
}

func (x *BulkEditResult) GetErrorCount() int32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type GraphElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph  string  `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Vertex *Vertex `protobuf:"bytes,2,opt,name=vertex,proto3" json:"vertex,omitempty"`
	Edge   *Edge   `protobuf:"bytes,3,opt,name=edge,proto3" json:"edge,omitempty"`
}

func (x *GraphElement) Reset() {
	*x = GraphElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphElement) ProtoMessage() {}

func (x *GraphElement) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphElement.ProtoReflect.Descriptor instead.
func (*GraphElement) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{28}
}

func (x *GraphElement) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *GraphElement) GetVertex() *Vertex {
	if x != nil {
		return x.Vertex
	}
	return nil
}

func (x *GraphElement) GetEdge() *Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

type GraphID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph string `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
}

func (x *GraphID) Reset() {
	*x = GraphID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphID) ProtoMessage() {}

func (x *GraphID) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphID.ProtoReflect.Descriptor instead.
func (*GraphID) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{29}
}

func (x *GraphID) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

type ElementID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph string `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ElementID) Reset() {
	*x = ElementID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementID) ProtoMessage() {}

func (x *ElementID) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementID.ProtoReflect.Descriptor instead.
func (*ElementID) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{30}
}

func (x *ElementID) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *ElementID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IndexID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph string `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *IndexID) Reset() {
	*x = IndexID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexID) ProtoMessage() {}

func (x *IndexID) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexID.ProtoReflect.Descriptor instead.
func (*IndexID) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{31}
}

func (x *IndexID) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *IndexID) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IndexID) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{32}
}

func (x *Timestamp) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{33}
}

type ListGraphsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graphs []string `protobuf:"bytes,1,rep,name=graphs,proto3" json:"graphs,omitempty"`
}

func (x *ListGraphsResponse) Reset() {
	*x = ListGraphsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGraphsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGraphsResponse) ProtoMessage() {}

func (x *ListGraphsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGraphsResponse.ProtoReflect.Descriptor instead.
func (*ListGraphsResponse) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{34}
}

func (x *ListGraphsResponse) GetGraphs() []string {
	if x != nil {
		return x.Graphs
	}
	return nil
}

type ListIndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices []*IndexID `protobuf:"bytes,1,rep,name=indices,proto3" json:"indices,omitempty"`
}

func (x *ListIndicesResponse) Reset() {
	*x = ListIndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIndicesResponse) ProtoMessage() {}

func (x *ListIndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIndicesResponse.ProtoReflect.Descriptor instead.
func (*ListIndicesResponse) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{35}
}

func (x *ListIndicesResponse) GetIndices() []*IndexID {
	if x != nil {
		return x.Indices
	}
	return nil
}

type ListLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VertexLabels []string `protobuf:"bytes,1,rep,name=vertex_labels,json=vertexLabels,proto3" json:"vertex_labels,omitempty"`
	EdgeLabels   []string `protobuf:"bytes,2,rep,name=edge_labels,json=edgeLabels,proto3" json:"edge_labels,omitempty"`
}

func (x *ListLabelsResponse) Reset() {
	*x = ListLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripql_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsResponse) ProtoMessage() {}

func (x *ListLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gripql_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsResponse.ProtoReflect.Descriptor instead.
func (*ListLabelsResponse) Descriptor() ([]byte, []int) {
	return file_gripql_proto_rawDescGZIP(), []int{36}
}

func (x *ListLabelsResponse) GetVertexLabels() []string {
	if x != nil {
		return x.VertexLabels
	}
	return nil
}

func (x *ListLabelsResponse) GetEdgeLabels() []string {
	if x != nil {
		return x.EdgeLabels
	}
	return nil
}

var File_gripql_proto protoreflect.FileDescriptor

var file_gripql_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x12, 0x2a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x56, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x3b, 0x0a,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xc2, 0x09, 0x0a, 0x0e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x76, 0x12, 0x2a, 0x0a, 0x01, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x01, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x5f, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x69, 0x6e, 0x45, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x75, 0x74, 0x45, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x68, 0x5f, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x68, 0x45, 0x12, 0x2f,
	0x0a, 0x04, 0x69, 0x6e, 0x5f, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x56, 0x12,
	0x31, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x75,
	0x74, 0x56, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x68, 0x5f, 0x76, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x6f, 0x74, 0x68, 0x56, 0x12, 0x10, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x29, 0x0a, 0x03, 0x68, 0x61, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x68, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x06, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x68, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x31, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x22, 0x62, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x35, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdc, 0x01,
	0x0a, 0x09, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x3f,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x0d, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x0f,
	0x54, 0x65, 0x72, 0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x14, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xca,
	0x01, 0x0a, 0x16, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x5a, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x11, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x39, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x17, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x29, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x7f, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x63, 0x0a, 0x09, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71,
	0x6c, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x50, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71,
	0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1c, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x0e, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0c, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x26, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52,
	0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a,
	0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x29, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x22, 0x40, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x44, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x5a,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x64, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2a, 0xa2, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x54, 0x48,
	0x49, 0x4e, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0c, 0x2a,
	0x4b, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x3b, 0x0a, 0x09,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x32, 0xbe, 0x07, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x12, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12,
	0x4d, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x67, 0x72, 0x69,
	0x70, 0x71, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f,
	0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x51,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x10, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71,
	0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x1a, 0x11, 0x2e, 0x67, 0x72, 0x69,
	0x70, 0x71, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x61, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x10, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f,
	0x62, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x7d, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4f, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x7d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x57, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x1a, 0x11, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x49, 0x44, 0x1a, 0x0d, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x12, 0x0d, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x12, 0x5c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x0f, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44,
	0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5a,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x1a, 0x1a, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x7d, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0xfa, 0x06, 0x0a, 0x04, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x12, 0x14, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x3a, 0x06, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x12, 0x59, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x45, 0x64, 0x67, 0x65, 0x12,
	0x14, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x7d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x3a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x4c, 0x0a, 0x07, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x12, 0x14, 0x2e, 0x67, 0x72, 0x69,
	0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x28, 0x01, 0x12, 0x4a, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x69,
	0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x12, 0x4d, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71,
	0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70,
	0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x12, 0x5c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71,
	0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x67, 0x72,
	0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x58, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x5b, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x1a, 0x12, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x44, 0x1a, 0x12, 0x2e,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7d, 0x2f, 0x7b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x7d, 0x12, 0x53, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x0d, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x12,
	0x2e, 0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x7d, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6d, 0x65, 0x67, 0x2f, 0x67, 0x72, 0x69, 0x70, 0x2f,
	0x67, 0x72, 0x69, 0x70, 0x71, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gripql_proto_rawDescOnce sync.Once
	file_gripql_proto_rawDescData = file_gripql_proto_rawDesc
)

func file_gripql_proto_rawDescGZIP() []byte {
	file_gripql_proto_rawDescOnce.Do(func() {
		file_gripql_proto_rawDescData = protoimpl.X.CompressGZIP(file_gripql_proto_rawDescData)
	})
	return file_gripql_proto_rawDescData
}

var file_gripql_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gripql_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_gripql_proto_goTypes = []interface{}{
	(Condition)(0),                  // 0: gripql.Condition
	(JobState)(0),                   // 1: gripql.JobState
	(FieldType)(0),                  // 2: gripql.FieldType
	(*Graph)(nil),                   // 3: gripql.Graph
	(*GraphQuery)(nil),              // 4: gripql.GraphQuery
	(*QuerySet)(nil),                // 5: gripql.QuerySet
	(*MatchQuerySet)(nil),           // 6: gripql.MatchQuerySet
	(*GraphStatement)(nil),          // 7: gripql.GraphStatement
	(*Range)(nil),                   // 8: gripql.Range
	(*AggregationsRequest)(nil),     // 9: gripql.AggregationsRequest
	(*Aggregations)(nil),            // 10: gripql.Aggregations
	(*Aggregate)(nil),               // 11: gripql.Aggregate
	(*TermAggregation)(nil),         // 12: gripql.TermAggregation
	(*PercentileAggregation)(nil),   // 13: gripql.PercentileAggregation
	(*HistogramAggregation)(nil),    // 14: gripql.HistogramAggregation
	(*NamedAggregationResult)(nil),  // 15: gripql.NamedAggregationResult
	(*AggregationResult)(nil),       // 16: gripql.AggregationResult
	(*AggregationResultBucket)(nil), // 17: gripql.AggregationResultBucket
	(*HasExpressionList)(nil),       // 18: gripql.HasExpressionList
	(*HasExpression)(nil),           // 19: gripql.HasExpression
	(*HasCondition)(nil),            // 20: gripql.HasCondition
	(*SelectStatement)(nil),         // 21: gripql.SelectStatement
	(*Selection)(nil),               // 22: gripql.Selection
	(*Selections)(nil),              // 23: gripql.Selections
	(*Vertex)(nil),                  // 24: gripql.Vertex
	(*Edge)(nil),                    // 25: gripql.Edge
	(*QueryResult)(nil),             // 26: gripql.QueryResult
	(*QueryJob)(nil),                // 27: gripql.QueryJob
	(*JobStatus)(nil),               // 28: gripql.JobStatus
	(*EditResult)(nil),              // 29: gripql.EditResult
	(*BulkEditResult)(nil),          // 30: gripql.BulkEditResult
	(*GraphElement)(nil),            // 31: gripql.GraphElement
	(*GraphID)(nil),                 // 32: gripql.GraphID
	(*ElementID)(nil),               // 33: gripql.ElementID
	(*IndexID)(nil),                 // 34: gripql.IndexID
	(*Timestamp)(nil),               // 35: gripql.Timestamp
	(*Empty)(nil),                   // 36: gripql.Empty
	(*ListGraphsResponse)(nil),      // 37: gripql.ListGraphsResponse
	(*ListIndicesResponse)(nil),     // 38: gripql.ListIndicesResponse
	(*ListLabelsResponse)(nil),      // 39: gripql.ListLabelsResponse
	nil,                             // 40: gripql.NamedAggregationResult.AggregationsEntry
	nil,                             // 41: gripql.Selections.SelectionsEntry
	(*_struct.ListValue)(nil),       // 42: google.protobuf.ListValue
	(*_struct.Value)(nil),           // 43: google.protobuf.Value
	(*_struct.Struct)(nil),          // 44: google.protobuf.Struct
}
var file_gripql_proto_depIdxs = []int32{
	24, // 0: gripql.Graph.vertices:type_name -> gripql.Vertex
	25, // 1: gripql.Graph.edges:type_name -> gripql.Edge
	7,  // 2: gripql.GraphQuery.query:type_name -> gripql.GraphStatement
	7,  // 3: gripql.QuerySet.query:type_name -> gripql.GraphStatement
	5,  // 4: gripql.MatchQuerySet.queries:type_name -> gripql.QuerySet
	42, // 5: gripql.GraphStatement.v:type_name -> google.protobuf.ListValue
	42, // 6: gripql.GraphStatement.e:type_name -> google.protobuf.ListValue
	42, // 7: gripql.GraphStatement.in:type_name -> google.protobuf.ListValue
	42, // 8: gripql.GraphStatement.out:type_name -> google.protobuf.ListValue
	42, // 9: gripql.GraphStatement.both:type_name -> google.protobuf.ListValue
	42, // 10: gripql.GraphStatement.in_e:type_name -> google.protobuf.ListValue
	42, // 11: gripql.GraphStatement.out_e:type_name -> google.protobuf.ListValue
	42, // 12: gripql.GraphStatement.both_e:type_name -> google.protobuf.ListValue
	42, // 13: gripql.GraphStatement.in_v:type_name -> google.protobuf.ListValue
	42, // 14: gripql.GraphStatement.out_v:type_name -> google.protobuf.ListValue
	42, // 15: gripql.GraphStatement.both_v:type_name -> google.protobuf.ListValue
	21, // 16: gripql.GraphStatement.select:type_name -> gripql.SelectStatement
	8,  // 17: gripql.GraphStatement.range:type_name -> gripql.Range
	6,  // 18: gripql.GraphStatement.match:type_name -> gripql.MatchQuerySet
	19, // 19: gripql.GraphStatement.has:type_name -> gripql.HasExpression
	42, // 20: gripql.GraphStatement.has_label:type_name -> google.protobuf.ListValue
	42, // 21: gripql.GraphStatement.has_key:type_name -> google.protobuf.ListValue
	42, // 22: gripql.GraphStatement.has_id:type_name -> google.protobuf.ListValue
	42, // 23: gripql.GraphStatement.fields:type_name -> google.protobuf.ListValue
	42, // 24: gripql.GraphStatement.distinct:type_name -> google.protobuf.ListValue
	10, // 25: gripql.GraphStatement.aggregate:type_name -> gripql.Aggregations
	43, // 26: gripql.GraphStatement.render:type_name -> google.protobuf.Value
	11, // 27: gripql.AggregationsRequest.aggregations:type_name -> gripql.Aggregate
	11, // 28: gripql.Aggregations.aggregations:type_name -> gripql.Aggregate
	12, // 29: gripql.Aggregate.term:type_name -> gripql.TermAggregation
	13, // 30: gripql.Aggregate.percentile:type_name -> gripql.PercentileAggregation
	14, // 31: gripql.Aggregate.histogram:type_name -> gripql.HistogramAggregation
	40, // 32: gripql.NamedAggregationResult.aggregations:type_name -> gripql.NamedAggregationResult.AggregationsEntry
	17, // 33: gripql.AggregationResult.buckets:type_name -> gripql.AggregationResultBucket
	43, // 34: gripql.AggregationResultBucket.key:type_name -> google.protobuf.Value
	19, // 35: gripql.HasExpressionList.expressions:type_name -> gripql.HasExpression
	18, // 36: gripql.HasExpression.and:type_name -> gripql.HasExpressionList
	18, // 37: gripql.HasExpression.or:type_name -> gripql.HasExpressionList
	19, // 38: gripql.HasExpression.not:type_name -> gripql.HasExpression
	20, // 39: gripql.HasExpression.condition:type_name -> gripql.HasCondition
	43, // 40: gripql.HasCondition.value:type_name -> google.protobuf.Value
	0,  // 41: gripql.HasCondition.condition:type_name -> gripql.Condition
	24, // 42: gripql.Selection.vertex:type_name -> gripql.Vertex
	25, // 43: gripql.Selection.edge:type_name -> gripql.Edge
	41, // 44: gripql.Selections.selections:type_name -> gripql.Selections.SelectionsEntry
	44, // 45: gripql.Vertex.data:type_name -> google.protobuf.Struct
	44, // 46: gripql.Edge.data:type_name -> google.protobuf.Struct
	24, // 47: gripql.QueryResult.vertex:type_name -> gripql.Vertex
	25, // 48: gripql.QueryResult.edge:type_name -> gripql.Edge
	15, // 49: gripql.QueryResult.aggregations:type_name -> gripql.NamedAggregationResult
	23, // 50: gripql.QueryResult.selections:type_name -> gripql.Selections
	43, // 51: gripql.QueryResult.render:type_name -> google.protobuf.Value
	1,  // 52: gripql.JobStatus.state:type_name -> gripql.JobState
	7,  // 53: gripql.JobStatus.query:type_name -> gripql.GraphStatement
	24, // 54: gripql.GraphElement.vertex:type_name -> gripql.Vertex
	25, // 55: gripql.GraphElement.edge:type_name -> gripql.Edge
	34, // 56: gripql.ListIndicesResponse.indices:type_name -> gripql.IndexID
	16, // 57: gripql.NamedAggregationResult.AggregationsEntry.value:type_name -> gripql.AggregationResult
	22, // 58: gripql.Selections.SelectionsEntry.value:type_name -> gripql.Selection
	4,  // 59: gripql.Query.Traversal:input_type -> gripql.GraphQuery
	4,  // 60: gripql.Query.Job:input_type -> gripql.GraphQuery
	27, // 61: gripql.Query.GetJob:input_type -> gripql.QueryJob
	27, // 62: gripql.Query.GetResults:input_type -> gripql.QueryJob
	33, // 63: gripql.Query.GetVertex:input_type -> gripql.ElementID
	33, // 64: gripql.Query.GetEdge:input_type -> gripql.ElementID
	32, // 65: gripql.Query.GetTimestamp:input_type -> gripql.GraphID
	32, // 66: gripql.Query.GetSchema:input_type -> gripql.GraphID
	36, // 67: gripql.Query.ListGraphs:input_type -> gripql.Empty
	32, // 68: gripql.Query.ListIndices:input_type -> gripql.GraphID
	32, // 69: gripql.Query.ListLabels:input_type -> gripql.GraphID
	31, // 70: gripql.Edit.AddVertex:input_type -> gripql.GraphElement
	31, // 71: gripql.Edit.AddEdge:input_type -> gripql.GraphElement
	31, // 72: gripql.Edit.BulkAdd:input_type -> gripql.GraphElement
	32, // 73: gripql.Edit.AddGraph:input_type -> gripql.GraphID
	32, // 74: gripql.Edit.DeleteGraph:input_type -> gripql.GraphID
	33, // 75: gripql.Edit.DeleteVertex:input_type -> gripql.ElementID
	33, // 76: gripql.Edit.DeleteEdge:input_type -> gripql.ElementID
	34, // 77: gripql.Edit.AddIndex:input_type -> gripql.IndexID
	34, // 78: gripql.Edit.DeleteIndex:input_type -> gripql.IndexID
	3,  // 79: gripql.Edit.AddSchema:input_type -> gripql.Graph
	26, // 80: gripql.Query.Traversal:output_type -> gripql.QueryResult
	27, // 81: gripql.Query.Job:output_type -> gripql.QueryJob
	28, // 82: gripql.Query.GetJob:output_type -> gripql.JobStatus
	26, // 83: gripql.Query.GetResults:output_type -> gripql.QueryResult
	24, // 84: gripql.Query.GetVertex:output_type -> gripql.Vertex
	25, // 85: gripql.Query.GetEdge:output_type -> gripql.Edge
	35, // 86: gripql.Query.GetTimestamp:output_type -> gripql.Timestamp
	3,  // 87: gripql.Query.GetSchema:output_type -> gripql.Graph
	37, // 88: gripql.Query.ListGraphs:output_type -> gripql.ListGraphsResponse
	38, // 89: gripql.Query.ListIndices:output_type -> gripql.ListIndicesResponse
	39, // 90: gripql.Query.ListLabels:output_type -> gripql.ListLabelsResponse
	29, // 91: gripql.Edit.AddVertex:output_type -> gripql.EditResult
	29, // 92: gripql.Edit.AddEdge:output_type -> gripql.EditResult
	30, // 93: gripql.Edit.BulkAdd:output_type -> gripql.BulkEditResult
	29, // 94: gripql.Edit.AddGraph:output_type -> gripql.EditResult
	29, // 95: gripql.Edit.DeleteGraph:output_type -> gripql.EditResult
	29, // 96: gripql.Edit.DeleteVertex:output_type -> gripql.EditResult
	29, // 97: gripql.Edit.DeleteEdge:output_type -> gripql.EditResult
	29, // 98: gripql.Edit.AddIndex:output_type -> gripql.EditResult
	29, // 99: gripql.Edit.DeleteIndex:output_type -> gripql.EditResult
	29, // 100: gripql.Edit.AddSchema:output_type -> gripql.EditResult
	80, // [80:101] is the sub-list for method output_type
	59, // [59:80] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_gripql_proto_init() }
func file_gripql_proto_init() {
	if File_gripql_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gripql_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchQuerySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentileAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedAggregationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationResultBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasExpressionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkEditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGraphsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripql_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gripql_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GraphStatement_V)(nil),
		(*GraphStatement_E)(nil),
		(*GraphStatement_In)(nil),
		(*GraphStatement_Out)(nil),
		(*GraphStatement_Both)(nil),
		(*GraphStatement_InE)(nil),
		(*GraphStatement_OutE)(nil),
		(*GraphStatement_BothE)(nil),
		(*GraphStatement_InV)(nil),
		(*GraphStatement_OutV)(nil),
		(*GraphStatement_BothV)(nil),
		(*GraphStatement_As)(nil),
		(*GraphStatement_Select)(nil),
		(*GraphStatement_Limit)(nil),
		(*GraphStatement_Skip)(nil),
		(*GraphStatement_Range)(nil),
		(*GraphStatement_Match)(nil),
		(*GraphStatement_Has)(nil),
		(*GraphStatement_HasLabel)(nil),
		(*GraphStatement_HasKey)(nil),
		(*GraphStatement_HasId)(nil),
		(*GraphStatement_Count)(nil),
		(*GraphStatement_Fields)(nil),
		(*GraphStatement_Distinct)(nil),
		(*GraphStatement_Aggregate)(nil),
		(*GraphStatement_Render)(nil),
	}
	file_gripql_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Aggregate_Term)(nil),
		(*Aggregate_Percentile)(nil),
		(*Aggregate_Histogram)(nil),
	}
	file_gripql_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*HasExpression_And)(nil),
		(*HasExpression_Or)(nil),
		(*HasExpression_Not)(nil),
		(*HasExpression_Condition)(nil),
	}
	file_gripql_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Selection_Vertex)(nil),
		(*Selection_Edge)(nil),
	}
	file_gripql_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*QueryResult_Vertex)(nil),
		(*QueryResult_Edge)(nil),
		(*QueryResult_Aggregations)(nil),
		(*QueryResult_Selections)(nil),
		(*QueryResult_Render)(nil),
		(*QueryResult_Count)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gripql_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gripql_proto_goTypes,
		DependencyIndexes: file_gripql_proto_depIdxs,
		EnumInfos:         file_gripql_proto_enumTypes,
		MessageInfos:      file_gripql_proto_msgTypes,
	}.Build()
	File_gripql_proto = out.File
	file_gripql_proto_rawDesc = nil
	file_gripql_proto_goTypes = nil
	file_gripql_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error)
	Job(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*QueryJob, error)
	GetJob(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (*JobStatus, error)
	GetResults(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (Query_GetResultsClient, error)
	GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error)
	GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error)
	GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error)
	GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Graph, error)
	ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListGraphsResponse, error)
	ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListIndicesResponse, error)
	ListLabels(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListLabelsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[0], "/gripql.Query/Traversal", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryTraversalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_TraversalClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryTraversalClient struct {
	grpc.ClientStream
}

func (x *queryTraversalClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) Job(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*QueryJob, error) {
	out := new(QueryJob)
	err := c.cc.Invoke(ctx, "/gripql.Query/Job", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetJob(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetResults(ctx context.Context, in *QueryJob, opts ...grpc.CallOption) (Query_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Query_serviceDesc.Streams[1], "/gripql.Query/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_GetResultsClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryGetResultsClient struct {
	grpc.ClientStream
}

func (x *queryGetResultsClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/gripql.Query/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListGraphsResponse, error) {
	out := new(ListGraphsResponse)
	err := c.cc.Invoke(ctx, "/gripql.Query/ListGraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListIndicesResponse, error) {
	out := new(ListIndicesResponse)
	err := c.cc.Invoke(ctx, "/gripql.Query/ListIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListLabels(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*ListLabelsResponse, error) {
	out := new(ListLabelsResponse)
	err := c.cc.Invoke(ctx, "/gripql.Query/ListLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Traversal(*GraphQuery, Query_TraversalServer) error
	Job(context.Context, *GraphQuery) (*QueryJob, error)
	GetJob(context.Context, *QueryJob) (*JobStatus, error)
	GetResults(*QueryJob, Query_GetResultsServer) error
	GetVertex(context.Context, *ElementID) (*Vertex, error)
	GetEdge(context.Context, *ElementID) (*Edge, error)
	GetTimestamp(context.Context, *GraphID) (*Timestamp, error)
	GetSchema(context.Context, *GraphID) (*Graph, error)
	ListGraphs(context.Context, *Empty) (*ListGraphsResponse, error)
	ListIndices(context.Context, *GraphID) (*ListIndicesResponse, error)
	ListLabels(context.Context, *GraphID) (*ListLabelsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Traversal(*GraphQuery, Query_TraversalServer) error {
	return status.Errorf(codes.Unimplemented, "method Traversal not implemented")
}
func (*UnimplementedQueryServer) Job(context.Context, *GraphQuery) (*QueryJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Job not implemented")
}
func (*UnimplementedQueryServer) GetJob(context.Context, *QueryJob) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedQueryServer) GetResults(*QueryJob, Query_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (*UnimplementedQueryServer) GetVertex(context.Context, *ElementID) (*Vertex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertex not implemented")
}
func (*UnimplementedQueryServer) GetEdge(context.Context, *ElementID) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdge not implemented")
}
func (*UnimplementedQueryServer) GetTimestamp(context.Context, *GraphID) (*Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestamp not implemented")
}
func (*UnimplementedQueryServer) GetSchema(context.Context, *GraphID) (*Graph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedQueryServer) ListGraphs(context.Context, *Empty) (*ListGraphsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGraphs not implemented")
}
func (*UnimplementedQueryServer) ListIndices(context.Context, *GraphID) (*ListIndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndices not implemented")
}
func (*UnimplementedQueryServer) ListLabels(context.Context, *GraphID) (*ListLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Traversal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Traversal(m, &queryTraversalServer{stream})
}

type Query_TraversalServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryTraversalServer struct {
	grpc.ServerStream
}

func (x *queryTraversalServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_Job_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Job(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/Job",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Job(ctx, req.(*GraphQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetJob(ctx, req.(*QueryJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).GetResults(m, &queryGetResultsServer{stream})
}

type Query_GetResultsServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryGetResultsServer struct {
	grpc.ServerStream
}

func (x *queryGetResultsServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestamp(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListGraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListGraphs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListIndices(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Query/ListLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListLabels(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Job",
			Handler:    _Query_Job_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Query_GetJob_Handler,
		},
		{
			MethodName: "GetVertex",
			Handler:    _Query_GetVertex_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _Query_GetEdge_Handler,
		},
		{
			MethodName: "GetTimestamp",
			Handler:    _Query_GetTimestamp_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
		{
			MethodName: "ListGraphs",
			Handler:    _Query_ListGraphs_Handler,
		},
		{
			MethodName: "ListIndices",
			Handler:    _Query_ListIndices_Handler,
		},
		{
			MethodName: "ListLabels",
			Handler:    _Query_ListLabels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Traversal",
			Handler:       _Query_Traversal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResults",
			Handler:       _Query_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripql.proto",
}

// EditClient is the client API for Edit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EditClient interface {
	AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error)
	AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	AddSchema(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*EditResult, error)
}

type editClient struct {
	cc grpc.ClientConnInterface
}

func NewEditClient(cc grpc.ClientConnInterface) EditClient {
	return &editClient{cc}
}

func (c *editClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Edit_serviceDesc.Streams[0], "/gripql.Edit/BulkAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &editBulkAddClient{stream}
	return x, nil
}

type Edit_BulkAddClient interface {
	Send(*GraphElement) error
	CloseAndRecv() (*BulkEditResult, error)
	grpc.ClientStream
}

type editBulkAddClient struct {
	grpc.ClientStream
}

func (x *editBulkAddClient) Send(m *GraphElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *editBulkAddClient) CloseAndRecv() (*BulkEditResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkEditResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *editClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/DeleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddSchema(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := c.cc.Invoke(ctx, "/gripql.Edit/AddSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditServer is the server API for Edit service.
type EditServer interface {
	AddVertex(context.Context, *GraphElement) (*EditResult, error)
	AddEdge(context.Context, *GraphElement) (*EditResult, error)
	BulkAdd(Edit_BulkAddServer) error
	AddGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteVertex(context.Context, *ElementID) (*EditResult, error)
	DeleteEdge(context.Context, *ElementID) (*EditResult, error)
	AddIndex(context.Context, *IndexID) (*EditResult, error)
	DeleteIndex(context.Context, *IndexID) (*EditResult, error)
	AddSchema(context.Context, *Graph) (*EditResult, error)
}

// UnimplementedEditServer can be embedded to have forward compatible implementations.
type UnimplementedEditServer struct {
}

func (*UnimplementedEditServer) AddVertex(context.Context, *GraphElement) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVertex not implemented")
}
func (*UnimplementedEditServer) AddEdge(context.Context, *GraphElement) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEdge not implemented")
}
func (*UnimplementedEditServer) BulkAdd(Edit_BulkAddServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkAdd not implemented")
}
func (*UnimplementedEditServer) AddGraph(context.Context, *GraphID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGraph not implemented")
}
func (*UnimplementedEditServer) DeleteGraph(context.Context, *GraphID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGraph not implemented")
}
func (*UnimplementedEditServer) DeleteVertex(context.Context, *ElementID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertex not implemented")
}
func (*UnimplementedEditServer) DeleteEdge(context.Context, *ElementID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdge not implemented")
}
func (*UnimplementedEditServer) AddIndex(context.Context, *IndexID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIndex not implemented")
}
func (*UnimplementedEditServer) DeleteIndex(context.Context, *IndexID) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (*UnimplementedEditServer) AddSchema(context.Context, *Graph) (*EditResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchema not implemented")
}

func RegisterEditServer(s *grpc.Server, srv EditServer) {
	s.RegisterService(&_Edit_serviceDesc, srv)
}

func _Edit_AddVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddVertex(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddEdge(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_BulkAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EditServer).BulkAdd(&editBulkAddServer{stream})
}

type Edit_BulkAddServer interface {
	SendAndClose(*BulkEditResult) error
	Recv() (*GraphElement, error)
	grpc.ServerStream
}

type editBulkAddServer struct {
	grpc.ServerStream
}

func (x *editBulkAddServer) SendAndClose(m *BulkEditResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *editBulkAddServer) Recv() (*GraphElement, error) {
	m := new(GraphElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Edit_AddGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Graph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripql.Edit/AddSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddSchema(ctx, req.(*Graph))
	}
	return interceptor(ctx, in, info, handler)
}

var _Edit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripql.Edit",
	HandlerType: (*EditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVertex",
			Handler:    _Edit_AddVertex_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _Edit_AddEdge_Handler,
		},
		{
			MethodName: "AddGraph",
			Handler:    _Edit_AddGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Edit_DeleteGraph_Handler,
		},
		{
			MethodName: "DeleteVertex",
			Handler:    _Edit_DeleteVertex_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _Edit_DeleteEdge_Handler,
		},
		{
			MethodName: "AddIndex",
			Handler:    _Edit_AddIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _Edit_DeleteIndex_Handler,
		},
		{
			MethodName: "AddSchema",
			Handler:    _Edit_AddSchema_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkAdd",
			Handler:       _Edit_BulkAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gripql.proto",
}
