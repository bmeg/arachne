
// Code generated by protoc-gen-grpc-rest-direct. DO NOT EDIT.
package gripql

import (
	"io"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)


// QueryDirectClient is a shim to connect Query client directly server
type QueryDirectClient struct {
	server QueryServer
}
 // NewQueryDirectClient creates new QueryDirectClient
func NewQueryDirectClient(server QueryServer) *QueryDirectClient {
	return &QueryDirectClient{server}
}

//Traversal streaming output shim
type directQueryTraversal struct {
  ctx context.Context
  c   chan *QueryResult
}

func (dsm *directQueryTraversal) Recv() (*QueryResult, error) {
	value, ok := <-dsm.c
	if !ok {
		return nil, io.EOF
	}
	return value, nil
}
func (dsm *directQueryTraversal) Send(a *QueryResult) error {
	dsm.c <- a
	return nil
}
func (dsm *directQueryTraversal) close() {
	close(dsm.c)
}
func (dsm *directQueryTraversal) Context() context.Context {
	return dsm.ctx
}
func (dsm *directQueryTraversal) CloseSend() error             { return nil }
func (dsm *directQueryTraversal) SetTrailer(metadata.MD)       {}
func (dsm *directQueryTraversal) SetHeader(metadata.MD) error  { return nil }
func (dsm *directQueryTraversal) SendHeader(metadata.MD) error { return nil }
func (dsm *directQueryTraversal) SendMsg(m interface{}) error  { return nil }
func (dsm *directQueryTraversal) RecvMsg(m interface{}) error  { return nil }
func (dsm *directQueryTraversal) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directQueryTraversal) Trailer() metadata.MD         { return nil }
func (dir *QueryDirectClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	w := &directQueryTraversal{ctx, make(chan *QueryResult, 100)}
	go func() {
		dir.server.Traversal(in, w)
		w.close()
	}()
	return w, nil
}


//Aggregate shim
func (shim *QueryDirectClient) Aggregate(ctx context.Context, in *AggregationsRequest, opts ...grpc.CallOption) (*NamedAggregationResult, error) {
	return shim.server.Aggregate(ctx, in)
}

//GetVertex shim
func (shim *QueryDirectClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	return shim.server.GetVertex(ctx, in)
}

//GetEdge shim
func (shim *QueryDirectClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	return shim.server.GetEdge(ctx, in)
}

//GetTimestamp shim
func (shim *QueryDirectClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	return shim.server.GetTimestamp(ctx, in)
}

//ListGraphs streaming output shim
type directQueryListGraphs struct {
  ctx context.Context
  c   chan *GraphID
}

func (dsm *directQueryListGraphs) Recv() (*GraphID, error) {
	value, ok := <-dsm.c
	if !ok {
		return nil, io.EOF
	}
	return value, nil
}
func (dsm *directQueryListGraphs) Send(a *GraphID) error {
	dsm.c <- a
	return nil
}
func (dsm *directQueryListGraphs) close() {
	close(dsm.c)
}
func (dsm *directQueryListGraphs) Context() context.Context {
	return dsm.ctx
}
func (dsm *directQueryListGraphs) CloseSend() error             { return nil }
func (dsm *directQueryListGraphs) SetTrailer(metadata.MD)       {}
func (dsm *directQueryListGraphs) SetHeader(metadata.MD) error  { return nil }
func (dsm *directQueryListGraphs) SendHeader(metadata.MD) error { return nil }
func (dsm *directQueryListGraphs) SendMsg(m interface{}) error  { return nil }
func (dsm *directQueryListGraphs) RecvMsg(m interface{}) error  { return nil }
func (dsm *directQueryListGraphs) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directQueryListGraphs) Trailer() metadata.MD         { return nil }
func (dir *QueryDirectClient) ListGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_ListGraphsClient, error) {
	w := &directQueryListGraphs{ctx, make(chan *GraphID, 100)}
	go func() {
		dir.server.ListGraphs(in, w)
		w.close()
	}()
	return w, nil
}


//ListIndices streaming output shim
type directQueryListIndices struct {
  ctx context.Context
  c   chan *IndexID
}

func (dsm *directQueryListIndices) Recv() (*IndexID, error) {
	value, ok := <-dsm.c
	if !ok {
		return nil, io.EOF
	}
	return value, nil
}
func (dsm *directQueryListIndices) Send(a *IndexID) error {
	dsm.c <- a
	return nil
}
func (dsm *directQueryListIndices) close() {
	close(dsm.c)
}
func (dsm *directQueryListIndices) Context() context.Context {
	return dsm.ctx
}
func (dsm *directQueryListIndices) CloseSend() error             { return nil }
func (dsm *directQueryListIndices) SetTrailer(metadata.MD)       {}
func (dsm *directQueryListIndices) SetHeader(metadata.MD) error  { return nil }
func (dsm *directQueryListIndices) SendHeader(metadata.MD) error { return nil }
func (dsm *directQueryListIndices) SendMsg(m interface{}) error  { return nil }
func (dsm *directQueryListIndices) RecvMsg(m interface{}) error  { return nil }
func (dsm *directQueryListIndices) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directQueryListIndices) Trailer() metadata.MD         { return nil }
func (dir *QueryDirectClient) ListIndices(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (Query_ListIndicesClient, error) {
	w := &directQueryListIndices{ctx, make(chan *IndexID, 100)}
	go func() {
		dir.server.ListIndices(in, w)
		w.close()
	}()
	return w, nil
}


//GetSchema shim
func (shim *QueryDirectClient) GetSchema(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*GraphSchema, error) {
	return shim.server.GetSchema(ctx, in)
}

// ComputeDirectClient is a shim to connect Compute client directly server
type ComputeDirectClient struct {
	server ComputeServer
}
 // NewComputeDirectClient creates new ComputeDirectClient
func NewComputeDirectClient(server ComputeServer) *ComputeDirectClient {
	return &ComputeDirectClient{server}
}

//Project shim
func (shim *ComputeDirectClient) Project(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*GraphID, error) {
	return shim.server.Project(ctx, in)
}

//Compute shim
func (shim *ComputeDirectClient) Compute(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.Compute(ctx, in)
}

// EditDirectClient is a shim to connect Edit client directly server
type EditDirectClient struct {
	server EditServer
}
 // NewEditDirectClient creates new EditDirectClient
func NewEditDirectClient(server EditServer) *EditDirectClient {
	return &EditDirectClient{server}
}

//AddVertex shim
func (shim *EditDirectClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddVertex(ctx, in)
}

//AddEdge shim
func (shim *EditDirectClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddEdge(ctx, in)
}

//BulkAdd streaming input shim
type directEditBulkAdd struct {
  ctx context.Context
  c   chan *GraphElement
  out chan *EditResult
}

func (dsm *directEditBulkAdd) Recv() (*GraphElement, error) {
	value, ok := <-dsm.c
	if !ok {
		return nil, io.EOF
	}
	return value, nil
}

func (dsm *directEditBulkAdd) Send(a *GraphElement) error {
	dsm.c <- a
	return nil
}

func (dsm *directEditBulkAdd) Context() context.Context {
	return dsm.ctx
}

func (dsm *directEditBulkAdd) SendAndClose(o *EditResult) error {
  dsm.out <- o
  close(dsm.out)
  return nil
}

func (dsm *directEditBulkAdd) CloseAndRecv() (*EditResult, error) {
  close(dsm.c)
  out := <- dsm.out
  return out, nil
}

func (dsm *directEditBulkAdd) CloseSend() error             { return nil }
func (dsm *directEditBulkAdd) SetTrailer(metadata.MD)       {}
func (dsm *directEditBulkAdd) SetHeader(metadata.MD) error  { return nil }
func (dsm *directEditBulkAdd) SendHeader(metadata.MD) error { return nil }
func (dsm *directEditBulkAdd) SendMsg(m interface{}) error  { return nil }
func (dsm *directEditBulkAdd) RecvMsg(m interface{}) error  { return nil }
func (dsm *directEditBulkAdd) Header() (metadata.MD, error) { return nil, nil }
func (dsm *directEditBulkAdd) Trailer() metadata.MD         { return nil }

func (dir *EditDirectClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	w := &directEditBulkAdd{ctx, make(chan *GraphElement, 100), make(chan *EditResult, 3)}
	go func() {
		dir.server.BulkAdd(w)
	}()
	return w, nil
}


//AddGraph shim
func (shim *EditDirectClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddGraph(ctx, in)
}

//DeleteGraph shim
func (shim *EditDirectClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteGraph(ctx, in)
}

//DeleteVertex shim
func (shim *EditDirectClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteVertex(ctx, in)
}

//DeleteEdge shim
func (shim *EditDirectClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteEdge(ctx, in)
}

//AddIndex shim
func (shim *EditDirectClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.AddIndex(ctx, in)
}

//DeleteIndex shim
func (shim *EditDirectClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	return shim.server.DeleteIndex(ctx, in)
}
