# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import exec_pb2 as exec__pb2


class ExecutorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Compile = channel.unary_unary(
        '/executor.Executor/Compile',
        request_serializer=exec__pb2.Code.SerializeToString,
        response_deserializer=exec__pb2.CompileResult.FromString,
        )
    self.Process = channel.stream_stream(
        '/executor.Executor/Process',
        request_serializer=exec__pb2.Input.SerializeToString,
        response_deserializer=exec__pb2.Result.FromString,
        )


class ExecutorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Compile(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Process(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExecutorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Compile': grpc.unary_unary_rpc_method_handler(
          servicer.Compile,
          request_deserializer=exec__pb2.Code.FromString,
          response_serializer=exec__pb2.CompileResult.SerializeToString,
      ),
      'Process': grpc.stream_stream_rpc_method_handler(
          servicer.Process,
          request_deserializer=exec__pb2.Input.FromString,
          response_serializer=exec__pb2.Result.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'executor.Executor', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
