// Code generated by protoc-gen-go. DO NOT EDIT.
// source: digdriver.proto

package dig

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Collection struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Collection) Reset()         { *m = Collection{} }
func (m *Collection) String() string { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()    {}
func (*Collection) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{1}
}

func (m *Collection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collection.Unmarshal(m, b)
}
func (m *Collection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collection.Marshal(b, m, deterministic)
}
func (m *Collection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collection.Merge(m, src)
}
func (m *Collection) XXX_Size() int {
	return xxx_messageInfo_Collection.Size(m)
}
func (m *Collection) XXX_DiscardUnknown() {
	xxx_messageInfo_Collection.DiscardUnknown(m)
}

var xxx_messageInfo_Collection proto.InternalMessageInfo

func (m *Collection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RowID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowID) Reset()         { *m = RowID{} }
func (m *RowID) String() string { return proto.CompactTextString(m) }
func (*RowID) ProtoMessage()    {}
func (*RowID) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{2}
}

func (m *RowID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowID.Unmarshal(m, b)
}
func (m *RowID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowID.Marshal(b, m, deterministic)
}
func (m *RowID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowID.Merge(m, src)
}
func (m *RowID) XXX_Size() int {
	return xxx_messageInfo_RowID.Size(m)
}
func (m *RowID) XXX_DiscardUnknown() {
	xxx_messageInfo_RowID.DiscardUnknown(m)
}

var xxx_messageInfo_RowID proto.InternalMessageInfo

func (m *RowID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RowRequest struct {
	Collection           string   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RequestID            uint64   `protobuf:"varint,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowRequest) Reset()         { *m = RowRequest{} }
func (m *RowRequest) String() string { return proto.CompactTextString(m) }
func (*RowRequest) ProtoMessage()    {}
func (*RowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{3}
}

func (m *RowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowRequest.Unmarshal(m, b)
}
func (m *RowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowRequest.Marshal(b, m, deterministic)
}
func (m *RowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowRequest.Merge(m, src)
}
func (m *RowRequest) XXX_Size() int {
	return xxx_messageInfo_RowRequest.Size(m)
}
func (m *RowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RowRequest proto.InternalMessageInfo

func (m *RowRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *RowRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RowRequest) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type FieldRequest struct {
	Collection           string   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldRequest) Reset()         { *m = FieldRequest{} }
func (m *FieldRequest) String() string { return proto.CompactTextString(m) }
func (*FieldRequest) ProtoMessage()    {}
func (*FieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{4}
}

func (m *FieldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldRequest.Unmarshal(m, b)
}
func (m *FieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldRequest.Marshal(b, m, deterministic)
}
func (m *FieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldRequest.Merge(m, src)
}
func (m *FieldRequest) XXX_Size() int {
	return xxx_messageInfo_FieldRequest.Size(m)
}
func (m *FieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FieldRequest proto.InternalMessageInfo

func (m *FieldRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *FieldRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Row struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RequestID            uint64          `protobuf:"varint,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{5}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Row) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Row) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type CollectionInfo struct {
	SearchFields         []string `protobuf:"bytes,1,rep,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_09c56c430a23bc8e, []int{6}
}

func (m *CollectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionInfo.Unmarshal(m, b)
}
func (m *CollectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionInfo.Marshal(b, m, deterministic)
}
func (m *CollectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionInfo.Merge(m, src)
}
func (m *CollectionInfo) XXX_Size() int {
	return xxx_messageInfo_CollectionInfo.Size(m)
}
func (m *CollectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionInfo proto.InternalMessageInfo

func (m *CollectionInfo) GetSearchFields() []string {
	if m != nil {
		return m.SearchFields
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "dig.Empty")
	proto.RegisterType((*Collection)(nil), "dig.Collection")
	proto.RegisterType((*RowID)(nil), "dig.RowID")
	proto.RegisterType((*RowRequest)(nil), "dig.RowRequest")
	proto.RegisterType((*FieldRequest)(nil), "dig.FieldRequest")
	proto.RegisterType((*Row)(nil), "dig.Row")
	proto.RegisterType((*CollectionInfo)(nil), "dig.CollectionInfo")
}

func init() { proto.RegisterFile("digdriver.proto", fileDescriptor_09c56c430a23bc8e) }

var fileDescriptor_09c56c430a23bc8e = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0xef, 0xd2, 0x30,
	0x10, 0xc7, 0xd3, 0x0d, 0x7e, 0xb8, 0x03, 0x21, 0x54, 0x13, 0x08, 0x21, 0x66, 0x99, 0x89, 0x2e,
	0xd1, 0x8c, 0x05, 0xe3, 0x83, 0xaf, 0x3a, 0x25, 0x7b, 0x2d, 0x6f, 0xbc, 0xe8, 0x58, 0xcb, 0x6c,
	0x32, 0x28, 0x6e, 0x1d, 0x0b, 0x7f, 0x91, 0xff, 0xa6, 0xe1, 0x3a, 0x1c, 0xa2, 0x89, 0xbf, 0xb7,
	0xf6, 0x7b, 0x9f, 0xfb, 0x5e, 0xef, 0x7a, 0x30, 0xe2, 0x32, 0xe3, 0x85, 0x3c, 0x89, 0x22, 0x38,
	0x16, 0x4a, 0x2b, 0x6a, 0x73, 0x99, 0xcd, 0xe6, 0x99, 0x52, 0x59, 0x2e, 0x16, 0x28, 0x6d, 0xab,
	0xdd, 0xa2, 0xd4, 0x45, 0x95, 0x6a, 0x83, 0x78, 0x3d, 0xe8, 0x7e, 0xde, 0x1f, 0xf5, 0xd9, 0x73,
	0x01, 0x3e, 0xa9, 0x3c, 0x17, 0xa9, 0x96, 0xea, 0x40, 0x29, 0x74, 0x0e, 0xc9, 0x5e, 0x4c, 0x89,
	0x4b, 0x7c, 0x87, 0xe1, 0xd9, 0x9b, 0x40, 0x97, 0xa9, 0x3a, 0x8e, 0xe8, 0x10, 0x2c, 0xc9, 0x9b,
	0x90, 0x25, 0xb9, 0xb7, 0x01, 0x60, 0xaa, 0x66, 0xe2, 0x47, 0x25, 0x4a, 0x4d, 0x5f, 0x00, 0xa4,
	0xbf, 0x8d, 0x1a, 0xea, 0x46, 0x69, 0xb2, 0xad, 0x6b, 0x36, 0x9d, 0x83, 0x53, 0x98, 0xd4, 0x38,
	0x9a, 0xda, 0x2e, 0xf1, 0x3b, 0xac, 0x15, 0xbc, 0x0d, 0x0c, 0xbe, 0x48, 0x91, 0xf3, 0xc7, 0xba,
	0x3f, 0x87, 0xee, 0xee, 0xc2, 0x37, 0x05, 0xcc, 0xe5, 0xa2, 0x9e, 0x92, 0xbc, 0x12, 0xe8, 0xef,
	0x30, 0x73, 0xf1, 0xbe, 0x81, 0xcd, 0x54, 0x7d, 0xdf, 0x0e, 0x7d, 0x03, 0x1d, 0x9e, 0xe8, 0x04,
	0x1d, 0xfa, 0xcb, 0x49, 0x60, 0xe6, 0x17, 0x5c, 0xe7, 0x17, 0xac, 0x71, 0x7e, 0x0c, 0xa1, 0xff,
	0xbc, 0xfe, 0x3d, 0x0c, 0xdb, 0xa1, 0xc6, 0x87, 0x9d, 0xa2, 0x2f, 0xe1, 0x69, 0x29, 0x92, 0x22,
	0xfd, 0xfe, 0x15, 0x5f, 0x56, 0x4e, 0x89, 0x6b, 0xfb, 0x0e, 0x1b, 0x18, 0x11, 0x5b, 0x2d, 0x97,
	0x3f, 0x2d, 0x70, 0x22, 0x99, 0xad, 0x55, 0x55, 0xa4, 0x82, 0x2e, 0x60, 0xb8, 0x12, 0xba, 0xf5,
	0x29, 0x29, 0x04, 0x5c, 0x66, 0x01, 0xfe, 0xdb, 0x6c, 0x84, 0xe7, 0x36, 0x1a, 0x12, 0xfa, 0x01,
	0xc6, 0x7f, 0x24, 0x60, 0xe1, 0x7b, 0x6e, 0xf6, 0xec, 0x4e, 0x40, 0xea, 0x35, 0x3c, 0xac, 0x84,
	0x8e, 0xa3, 0xf2, 0x6f, 0xde, 0x14, 0xc5, 0x0d, 0x08, 0x09, 0x7d, 0x05, 0xbd, 0x95, 0xd0, 0x4c,
	0xd5, 0xff, 0x20, 0x9f, 0x5c, 0xc9, 0x90, 0xd0, 0xb7, 0xd0, 0x6f, 0xb8, 0x8f, 0xe7, 0x38, 0x6a,
	0xd8, 0x76, 0x5b, 0x5a, 0xd6, 0x27, 0x21, 0x69, 0x5a, 0x35, 0x34, 0xce, 0x82, 0x8e, 0x31, 0x7e,
	0xbb, 0x02, 0xb7, 0xf6, 0xdb, 0x07, 0xfc, 0x95, 0x77, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0x01, 0x11, 0x9e, 0xfb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DigSourceClient is the client API for DigSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DigSourceClient interface {
	GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DigSource_GetCollectionsClient, error)
	GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error)
	GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetIDsClient, error)
	GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetRowsClient, error)
	GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (DigSource_GetRowsByIDClient, error)
	GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (DigSource_GetRowsByFieldClient, error)
}

type digSourceClient struct {
	cc *grpc.ClientConn
}

func NewDigSourceClient(cc *grpc.ClientConn) DigSourceClient {
	return &digSourceClient{cc}
}

func (c *digSourceClient) GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DigSource_GetCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[0], "/dig.DigSource/GetCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type digSourceGetCollectionsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/dig.DigSource/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digSourceClient) GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[1], "/dig.DigSource/GetIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetIDsClient interface {
	Recv() (*RowID, error)
	grpc.ClientStream
}

type digSourceGetIDsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetIDsClient) Recv() (*RowID, error) {
	m := new(RowID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[2], "/dig.DigSource/GetRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetRowsClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (DigSource_GetRowsByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[3], "/dig.DigSource/GetRowsByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsByIDClient{stream}
	return x, nil
}

type DigSource_GetRowsByIDClient interface {
	Send(*RowRequest) error
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsByIDClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsByIDClient) Send(m *RowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *digSourceGetRowsByIDClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (DigSource_GetRowsByFieldClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[4], "/dig.DigSource/GetRowsByField", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsByFieldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetRowsByFieldClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsByFieldClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsByFieldClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DigSourceServer is the server API for DigSource service.
type DigSourceServer interface {
	GetCollections(*Empty, DigSource_GetCollectionsServer) error
	GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error)
	GetIDs(*Collection, DigSource_GetIDsServer) error
	GetRows(*Collection, DigSource_GetRowsServer) error
	GetRowsByID(DigSource_GetRowsByIDServer) error
	GetRowsByField(*FieldRequest, DigSource_GetRowsByFieldServer) error
}

// UnimplementedDigSourceServer can be embedded to have forward compatible implementations.
type UnimplementedDigSourceServer struct {
}

func (*UnimplementedDigSourceServer) GetCollections(req *Empty, srv DigSource_GetCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (*UnimplementedDigSourceServer) GetCollectionInfo(ctx context.Context, req *Collection) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (*UnimplementedDigSourceServer) GetIDs(req *Collection, srv DigSource_GetIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (*UnimplementedDigSourceServer) GetRows(req *Collection, srv DigSource_GetRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRows not implemented")
}
func (*UnimplementedDigSourceServer) GetRowsByID(srv DigSource_GetRowsByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByID not implemented")
}
func (*UnimplementedDigSourceServer) GetRowsByField(req *FieldRequest, srv DigSource_GetRowsByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByField not implemented")
}

func RegisterDigSourceServer(s *grpc.Server, srv DigSourceServer) {
	s.RegisterService(&_DigSource_serviceDesc, srv)
}

func _DigSource_GetCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetCollections(m, &digSourceGetCollectionsServer{stream})
}

type DigSource_GetCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type digSourceGetCollectionsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigSourceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dig.DigSource/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigSourceServer).GetCollectionInfo(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigSource_GetIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetIDs(m, &digSourceGetIDsServer{stream})
}

type DigSource_GetIDsServer interface {
	Send(*RowID) error
	grpc.ServerStream
}

type digSourceGetIDsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetIDsServer) Send(m *RowID) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetRows(m, &digSourceGetRowsServer{stream})
}

type DigSource_GetRowsServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type digSourceGetRowsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetRowsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DigSourceServer).GetRowsByID(&digSourceGetRowsByIDServer{stream})
}

type DigSource_GetRowsByIDServer interface {
	Send(*Row) error
	Recv() (*RowRequest, error)
	grpc.ServerStream
}

type digSourceGetRowsByIDServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsByIDServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func (x *digSourceGetRowsByIDServer) Recv() (*RowRequest, error) {
	m := new(RowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DigSource_GetRowsByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetRowsByField(m, &digSourceGetRowsByFieldServer{stream})
}

type DigSource_GetRowsByFieldServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type digSourceGetRowsByFieldServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsByFieldServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _DigSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dig.DigSource",
	HandlerType: (*DigSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionInfo",
			Handler:    _DigSource_GetCollectionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollections",
			Handler:       _DigSource_GetCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIDs",
			Handler:       _DigSource_GetIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRows",
			Handler:       _DigSource_GetRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRowsByID",
			Handler:       _DigSource_GetRowsByID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRowsByField",
			Handler:       _DigSource_GetRowsByField_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "digdriver.proto",
}
