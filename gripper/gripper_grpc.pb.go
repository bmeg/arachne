// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gripper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GripperSourceClient is the client API for GripperSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GripperSourceClient interface {
	GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GripperSource_GetCollectionsClient, error)
	GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error)
	GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GripperSource_GetIDsClient, error)
	GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GripperSource_GetRowsClient, error)
	GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (GripperSource_GetRowsByIDClient, error)
	GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (GripperSource_GetRowsByFieldClient, error)
}

type gripperSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewGripperSourceClient(cc grpc.ClientConnInterface) GripperSourceClient {
	return &gripperSourceClient{cc}
}

func (c *gripperSourceClient) GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GripperSource_GetCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GripperSource_serviceDesc.Streams[0], "/gripper.GripperSource/GetCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripperSourceGetCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GripperSource_GetCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type gripperSourceGetCollectionsClient struct {
	grpc.ClientStream
}

func (x *gripperSourceGetCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripperSourceClient) GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/gripper.GripperSource/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gripperSourceClient) GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GripperSource_GetIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GripperSource_serviceDesc.Streams[1], "/gripper.GripperSource/GetIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripperSourceGetIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GripperSource_GetIDsClient interface {
	Recv() (*RowID, error)
	grpc.ClientStream
}

type gripperSourceGetIDsClient struct {
	grpc.ClientStream
}

func (x *gripperSourceGetIDsClient) Recv() (*RowID, error) {
	m := new(RowID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripperSourceClient) GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (GripperSource_GetRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GripperSource_serviceDesc.Streams[2], "/gripper.GripperSource/GetRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripperSourceGetRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GripperSource_GetRowsClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type gripperSourceGetRowsClient struct {
	grpc.ClientStream
}

func (x *gripperSourceGetRowsClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripperSourceClient) GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (GripperSource_GetRowsByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GripperSource_serviceDesc.Streams[3], "/gripper.GripperSource/GetRowsByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripperSourceGetRowsByIDClient{stream}
	return x, nil
}

type GripperSource_GetRowsByIDClient interface {
	Send(*RowRequest) error
	Recv() (*Row, error)
	grpc.ClientStream
}

type gripperSourceGetRowsByIDClient struct {
	grpc.ClientStream
}

func (x *gripperSourceGetRowsByIDClient) Send(m *RowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gripperSourceGetRowsByIDClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gripperSourceClient) GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (GripperSource_GetRowsByFieldClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GripperSource_serviceDesc.Streams[4], "/gripper.GripperSource/GetRowsByField", opts...)
	if err != nil {
		return nil, err
	}
	x := &gripperSourceGetRowsByFieldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GripperSource_GetRowsByFieldClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type gripperSourceGetRowsByFieldClient struct {
	grpc.ClientStream
}

func (x *gripperSourceGetRowsByFieldClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GripperSourceServer is the server API for GripperSource service.
// All implementations must embed UnimplementedGripperSourceServer
// for forward compatibility
type GripperSourceServer interface {
	GetCollections(*Empty, GripperSource_GetCollectionsServer) error
	GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error)
	GetIDs(*Collection, GripperSource_GetIDsServer) error
	GetRows(*Collection, GripperSource_GetRowsServer) error
	GetRowsByID(GripperSource_GetRowsByIDServer) error
	GetRowsByField(*FieldRequest, GripperSource_GetRowsByFieldServer) error
	mustEmbedUnimplementedGripperSourceServer()
}

// UnimplementedGripperSourceServer must be embedded to have forward compatible implementations.
type UnimplementedGripperSourceServer struct {
}

func (UnimplementedGripperSourceServer) GetCollections(*Empty, GripperSource_GetCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedGripperSourceServer) GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedGripperSourceServer) GetIDs(*Collection, GripperSource_GetIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (UnimplementedGripperSourceServer) GetRows(*Collection, GripperSource_GetRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRows not implemented")
}
func (UnimplementedGripperSourceServer) GetRowsByID(GripperSource_GetRowsByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByID not implemented")
}
func (UnimplementedGripperSourceServer) GetRowsByField(*FieldRequest, GripperSource_GetRowsByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByField not implemented")
}
func (UnimplementedGripperSourceServer) mustEmbedUnimplementedGripperSourceServer() {}

// UnsafeGripperSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GripperSourceServer will
// result in compilation errors.
type UnsafeGripperSourceServer interface {
	mustEmbedUnimplementedGripperSourceServer()
}

func RegisterGripperSourceServer(s grpc.ServiceRegistrar, srv GripperSourceServer) {
	s.RegisterService(&_GripperSource_serviceDesc, srv)
}

func _GripperSource_GetCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripperSourceServer).GetCollections(m, &gripperSourceGetCollectionsServer{stream})
}

type GripperSource_GetCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type gripperSourceGetCollectionsServer struct {
	grpc.ServerStream
}

func (x *gripperSourceGetCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _GripperSource_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GripperSourceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripper.GripperSource/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GripperSourceServer).GetCollectionInfo(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _GripperSource_GetIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripperSourceServer).GetIDs(m, &gripperSourceGetIDsServer{stream})
}

type GripperSource_GetIDsServer interface {
	Send(*RowID) error
	grpc.ServerStream
}

type gripperSourceGetIDsServer struct {
	grpc.ServerStream
}

func (x *gripperSourceGetIDsServer) Send(m *RowID) error {
	return x.ServerStream.SendMsg(m)
}

func _GripperSource_GetRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripperSourceServer).GetRows(m, &gripperSourceGetRowsServer{stream})
}

type GripperSource_GetRowsServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type gripperSourceGetRowsServer struct {
	grpc.ServerStream
}

func (x *gripperSourceGetRowsServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func _GripperSource_GetRowsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GripperSourceServer).GetRowsByID(&gripperSourceGetRowsByIDServer{stream})
}

type GripperSource_GetRowsByIDServer interface {
	Send(*Row) error
	Recv() (*RowRequest, error)
	grpc.ServerStream
}

type gripperSourceGetRowsByIDServer struct {
	grpc.ServerStream
}

func (x *gripperSourceGetRowsByIDServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gripperSourceGetRowsByIDServer) Recv() (*RowRequest, error) {
	m := new(RowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GripperSource_GetRowsByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GripperSourceServer).GetRowsByField(m, &gripperSourceGetRowsByFieldServer{stream})
}

type GripperSource_GetRowsByFieldServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type gripperSourceGetRowsByFieldServer struct {
	grpc.ServerStream
}

func (x *gripperSourceGetRowsByFieldServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _GripperSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripper.GripperSource",
	HandlerType: (*GripperSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionInfo",
			Handler:    _GripperSource_GetCollectionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollections",
			Handler:       _GripperSource_GetCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIDs",
			Handler:       _GripperSource_GetIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRows",
			Handler:       _GripperSource_GetRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRowsByID",
			Handler:       _GripperSource_GetRowsByID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRowsByField",
			Handler:       _GripperSource_GetRowsByField_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripper.proto",
}
