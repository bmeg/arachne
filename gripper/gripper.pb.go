// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: gripper.proto

package gripper

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{0}
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{1}
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RowID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RowID) Reset() {
	*x = RowID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowID) ProtoMessage() {}

func (x *RowID) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowID.ProtoReflect.Descriptor instead.
func (*RowID) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{2}
}

func (x *RowID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	RequestID  uint64 `protobuf:"varint,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *RowRequest) Reset() {
	*x = RowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRequest) ProtoMessage() {}

func (x *RowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRequest.ProtoReflect.Descriptor instead.
func (*RowRequest) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{3}
}

func (x *RowRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *RowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RowRequest) GetRequestID() uint64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

type FieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Field      string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Value      string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FieldRequest) Reset() {
	*x = FieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRequest) ProtoMessage() {}

func (x *FieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRequest.ProtoReflect.Descriptor instead.
func (*FieldRequest) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{4}
}

func (x *FieldRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *FieldRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FieldRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data      *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	RequestID uint64          `protobuf:"varint,3,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{5}
}

func (x *Row) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Row) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Row) GetRequestID() uint64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

type CollectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchFields []string `protobuf:"bytes,1,rep,name=search_fields,json=searchFields,proto3" json:"search_fields,omitempty"`
}

func (x *CollectionInfo) Reset() {
	*x = CollectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gripper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfo) ProtoMessage() {}

func (x *CollectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gripper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfo.ProtoReflect.Descriptor instead.
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return file_gripper_proto_rawDescGZIP(), []int{6}
}

func (x *CollectionInfo) GetSearchFields() []string {
	if x != nil {
		return x.SearchFields
	}
	return nil
}

var File_gripper_proto protoreflect.FileDescriptor

var file_gripper_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x17, 0x0a, 0x05, 0x52, 0x6f, 0x77, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x0a, 0x52, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x60, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0xd7, 0x02, 0x0a, 0x09,
	0x44, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x2e, 0x67, 0x72,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x67, 0x72,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x30, 0x01, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x67,
	0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x77, 0x49, 0x44, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x77, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x77,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x67, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x77, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x15,
	0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x77, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gripper_proto_rawDescOnce sync.Once
	file_gripper_proto_rawDescData = file_gripper_proto_rawDesc
)

func file_gripper_proto_rawDescGZIP() []byte {
	file_gripper_proto_rawDescOnce.Do(func() {
		file_gripper_proto_rawDescData = protoimpl.X.CompressGZIP(file_gripper_proto_rawDescData)
	})
	return file_gripper_proto_rawDescData
}

var file_gripper_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_gripper_proto_goTypes = []interface{}{
	(*Empty)(nil),          // 0: gripper.Empty
	(*Collection)(nil),     // 1: gripper.Collection
	(*RowID)(nil),          // 2: gripper.RowID
	(*RowRequest)(nil),     // 3: gripper.RowRequest
	(*FieldRequest)(nil),   // 4: gripper.FieldRequest
	(*Row)(nil),            // 5: gripper.Row
	(*CollectionInfo)(nil), // 6: gripper.CollectionInfo
	(*_struct.Struct)(nil), // 7: google.protobuf.Struct
}
var file_gripper_proto_depIdxs = []int32{
	7, // 0: gripper.Row.data:type_name -> google.protobuf.Struct
	0, // 1: gripper.DigSource.GetCollections:input_type -> gripper.Empty
	1, // 2: gripper.DigSource.GetCollectionInfo:input_type -> gripper.Collection
	1, // 3: gripper.DigSource.GetIDs:input_type -> gripper.Collection
	1, // 4: gripper.DigSource.GetRows:input_type -> gripper.Collection
	3, // 5: gripper.DigSource.GetRowsByID:input_type -> gripper.RowRequest
	4, // 6: gripper.DigSource.GetRowsByField:input_type -> gripper.FieldRequest
	1, // 7: gripper.DigSource.GetCollections:output_type -> gripper.Collection
	6, // 8: gripper.DigSource.GetCollectionInfo:output_type -> gripper.CollectionInfo
	2, // 9: gripper.DigSource.GetIDs:output_type -> gripper.RowID
	5, // 10: gripper.DigSource.GetRows:output_type -> gripper.Row
	5, // 11: gripper.DigSource.GetRowsByID:output_type -> gripper.Row
	5, // 12: gripper.DigSource.GetRowsByField:output_type -> gripper.Row
	7, // [7:13] is the sub-list for method output_type
	1, // [1:7] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_gripper_proto_init() }
func file_gripper_proto_init() {
	if File_gripper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gripper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gripper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gripper_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gripper_proto_goTypes,
		DependencyIndexes: file_gripper_proto_depIdxs,
		MessageInfos:      file_gripper_proto_msgTypes,
	}.Build()
	File_gripper_proto = out.File
	file_gripper_proto_rawDesc = nil
	file_gripper_proto_goTypes = nil
	file_gripper_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DigSourceClient is the client API for DigSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DigSourceClient interface {
	GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DigSource_GetCollectionsClient, error)
	GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error)
	GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetIDsClient, error)
	GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetRowsClient, error)
	GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (DigSource_GetRowsByIDClient, error)
	GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (DigSource_GetRowsByFieldClient, error)
}

type digSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewDigSourceClient(cc grpc.ClientConnInterface) DigSourceClient {
	return &digSourceClient{cc}
}

func (c *digSourceClient) GetCollections(ctx context.Context, in *Empty, opts ...grpc.CallOption) (DigSource_GetCollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[0], "/gripper.DigSource/GetCollections", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetCollectionsClient interface {
	Recv() (*Collection, error)
	grpc.ClientStream
}

type digSourceGetCollectionsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetCollectionsClient) Recv() (*Collection, error) {
	m := new(Collection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetCollectionInfo(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/gripper.DigSource/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digSourceClient) GetIDs(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[1], "/gripper.DigSource/GetIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetIDsClient interface {
	Recv() (*RowID, error)
	grpc.ClientStream
}

type digSourceGetIDsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetIDsClient) Recv() (*RowID, error) {
	m := new(RowID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRows(ctx context.Context, in *Collection, opts ...grpc.CallOption) (DigSource_GetRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[2], "/gripper.DigSource/GetRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetRowsClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (DigSource_GetRowsByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[3], "/gripper.DigSource/GetRowsByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsByIDClient{stream}
	return x, nil
}

type DigSource_GetRowsByIDClient interface {
	Send(*RowRequest) error
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsByIDClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsByIDClient) Send(m *RowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *digSourceGetRowsByIDClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *digSourceClient) GetRowsByField(ctx context.Context, in *FieldRequest, opts ...grpc.CallOption) (DigSource_GetRowsByFieldClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DigSource_serviceDesc.Streams[4], "/gripper.DigSource/GetRowsByField", opts...)
	if err != nil {
		return nil, err
	}
	x := &digSourceGetRowsByFieldClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DigSource_GetRowsByFieldClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type digSourceGetRowsByFieldClient struct {
	grpc.ClientStream
}

func (x *digSourceGetRowsByFieldClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DigSourceServer is the server API for DigSource service.
type DigSourceServer interface {
	GetCollections(*Empty, DigSource_GetCollectionsServer) error
	GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error)
	GetIDs(*Collection, DigSource_GetIDsServer) error
	GetRows(*Collection, DigSource_GetRowsServer) error
	GetRowsByID(DigSource_GetRowsByIDServer) error
	GetRowsByField(*FieldRequest, DigSource_GetRowsByFieldServer) error
}

// UnimplementedDigSourceServer can be embedded to have forward compatible implementations.
type UnimplementedDigSourceServer struct {
}

func (*UnimplementedDigSourceServer) GetCollections(*Empty, DigSource_GetCollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (*UnimplementedDigSourceServer) GetCollectionInfo(context.Context, *Collection) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (*UnimplementedDigSourceServer) GetIDs(*Collection, DigSource_GetIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (*UnimplementedDigSourceServer) GetRows(*Collection, DigSource_GetRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRows not implemented")
}
func (*UnimplementedDigSourceServer) GetRowsByID(DigSource_GetRowsByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByID not implemented")
}
func (*UnimplementedDigSourceServer) GetRowsByField(*FieldRequest, DigSource_GetRowsByFieldServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByField not implemented")
}

func RegisterDigSourceServer(s *grpc.Server, srv DigSourceServer) {
	s.RegisterService(&_DigSource_serviceDesc, srv)
}

func _DigSource_GetCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetCollections(m, &digSourceGetCollectionsServer{stream})
}

type DigSource_GetCollectionsServer interface {
	Send(*Collection) error
	grpc.ServerStream
}

type digSourceGetCollectionsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetCollectionsServer) Send(m *Collection) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigSourceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gripper.DigSource/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigSourceServer).GetCollectionInfo(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _DigSource_GetIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetIDs(m, &digSourceGetIDsServer{stream})
}

type DigSource_GetIDsServer interface {
	Send(*RowID) error
	grpc.ServerStream
}

type digSourceGetIDsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetIDsServer) Send(m *RowID) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Collection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetRows(m, &digSourceGetRowsServer{stream})
}

type DigSource_GetRowsServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type digSourceGetRowsServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func _DigSource_GetRowsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DigSourceServer).GetRowsByID(&digSourceGetRowsByIDServer{stream})
}

type DigSource_GetRowsByIDServer interface {
	Send(*Row) error
	Recv() (*RowRequest, error)
	grpc.ServerStream
}

type digSourceGetRowsByIDServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsByIDServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func (x *digSourceGetRowsByIDServer) Recv() (*RowRequest, error) {
	m := new(RowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DigSource_GetRowsByField_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FieldRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DigSourceServer).GetRowsByField(m, &digSourceGetRowsByFieldServer{stream})
}

type DigSource_GetRowsByFieldServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type digSourceGetRowsByFieldServer struct {
	grpc.ServerStream
}

func (x *digSourceGetRowsByFieldServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _DigSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gripper.DigSource",
	HandlerType: (*DigSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollectionInfo",
			Handler:    _DigSource_GetCollectionInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollections",
			Handler:       _DigSource_GetCollections_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIDs",
			Handler:       _DigSource_GetIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRows",
			Handler:       _DigSource_GetRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRowsByID",
			Handler:       _DigSource_GetRowsByID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRowsByField",
			Handler:       _DigSource_GetRowsByField_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gripper.proto",
}
