// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multidriver.proto

package multidriver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Row struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{1}
}

func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (m *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(m, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Row) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type CollectionRequest struct {
	Collection           string   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionRequest) Reset()         { *m = CollectionRequest{} }
func (m *CollectionRequest) String() string { return proto.CompactTextString(m) }
func (*CollectionRequest) ProtoMessage()    {}
func (*CollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{2}
}

func (m *CollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRequest.Unmarshal(m, b)
}
func (m *CollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRequest.Marshal(b, m, deterministic)
}
func (m *CollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRequest.Merge(m, src)
}
func (m *CollectionRequest) XXX_Size() int {
	return xxx_messageInfo_CollectionRequest.Size(m)
}
func (m *CollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRequest proto.InternalMessageInfo

func (m *CollectionRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

type RowRequest struct {
	Collection           string   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowRequest) Reset()         { *m = RowRequest{} }
func (m *RowRequest) String() string { return proto.CompactTextString(m) }
func (*RowRequest) ProtoMessage()    {}
func (*RowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{3}
}

func (m *RowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowRequest.Unmarshal(m, b)
}
func (m *RowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowRequest.Marshal(b, m, deterministic)
}
func (m *RowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowRequest.Merge(m, src)
}
func (m *RowRequest) XXX_Size() int {
	return xxx_messageInfo_RowRequest.Size(m)
}
func (m *RowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RowRequest proto.InternalMessageInfo

func (m *RowRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *RowRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RowID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RowID) Reset()         { *m = RowID{} }
func (m *RowID) String() string { return proto.CompactTextString(m) }
func (*RowID) ProtoMessage()    {}
func (*RowID) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{4}
}

func (m *RowID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowID.Unmarshal(m, b)
}
func (m *RowID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowID.Marshal(b, m, deterministic)
}
func (m *RowID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowID.Merge(m, src)
}
func (m *RowID) XXX_Size() int {
	return xxx_messageInfo_RowID.Size(m)
}
func (m *RowID) XXX_DiscardUnknown() {
	xxx_messageInfo_RowID.DiscardUnknown(m)
}

var xxx_messageInfo_RowID proto.InternalMessageInfo

func (m *RowID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ServiceInfo struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceInfo) Reset()         { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()    {}
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ce68ecaad82f6d3, []int{5}
}

func (m *ServiceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInfo.Unmarshal(m, b)
}
func (m *ServiceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInfo.Marshal(b, m, deterministic)
}
func (m *ServiceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInfo.Merge(m, src)
}
func (m *ServiceInfo) XXX_Size() int {
	return xxx_messageInfo_ServiceInfo.Size(m)
}
func (m *ServiceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "multidriver.Empty")
	proto.RegisterType((*Row)(nil), "multidriver.Row")
	proto.RegisterType((*CollectionRequest)(nil), "multidriver.CollectionRequest")
	proto.RegisterType((*RowRequest)(nil), "multidriver.RowRequest")
	proto.RegisterType((*RowID)(nil), "multidriver.RowID")
	proto.RegisterType((*ServiceInfo)(nil), "multidriver.ServiceInfo")
}

func init() {
	proto.RegisterFile("multidriver.proto", fileDescriptor_4ce68ecaad82f6d3)
}

var fileDescriptor_4ce68ecaad82f6d3 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x6a, 0xc2, 0x40,
	0x10, 0xc6, 0xd9, 0xb4, 0x2a, 0x9d, 0x50, 0xa9, 0x7b, 0x31, 0x48, 0x11, 0xd9, 0x53, 0xa0, 0x10,
	0x83, 0x5e, 0x6d, 0x0f, 0x36, 0x25, 0xa4, 0xc7, 0xf5, 0x09, 0x34, 0x59, 0x65, 0x21, 0x3a, 0x36,
	0x99, 0x18, 0x7c, 0x90, 0xbe, 0x6f, 0x21, 0xc6, 0x76, 0x4d, 0x29, 0xf6, 0xfa, 0xfd, 0xf9, 0xf1,
	0xed, 0x0e, 0xf4, 0xb6, 0x45, 0x4a, 0x3a, 0xc9, 0xf4, 0x41, 0x65, 0xde, 0x3e, 0x43, 0x42, 0x6e,
	0x1b, 0xd2, 0xe0, 0x71, 0x83, 0xb8, 0x49, 0xd5, 0xb8, 0xb2, 0x56, 0xc5, 0x7a, 0x9c, 0x53, 0x56,
	0xc4, 0x74, 0x8a, 0x8a, 0x0e, 0xb4, 0xde, 0xb6, 0x7b, 0x3a, 0x8a, 0x39, 0xdc, 0x48, 0x2c, 0x79,
	0x17, 0x2c, 0x9d, 0x38, 0x6c, 0xc4, 0xdc, 0x3b, 0x69, 0xe9, 0x84, 0x3f, 0xc1, 0x6d, 0xb2, 0xa4,
	0xa5, 0x63, 0x8d, 0x98, 0x6b, 0x4f, 0xfa, 0xde, 0x09, 0xe6, 0x9d, 0x61, 0xde, 0xa2, 0x82, 0xc9,
	0x2a, 0x24, 0xa6, 0xd0, 0x7b, 0xc5, 0x34, 0x55, 0x31, 0x69, 0xdc, 0x49, 0xf5, 0x51, 0xa8, 0x9c,
	0xf8, 0x10, 0x20, 0xfe, 0x16, 0x6b, 0xb2, 0xa1, 0x88, 0x19, 0x80, 0xc4, 0xf2, 0x9f, 0xe9, 0x7a,
	0x9f, 0x75, 0xde, 0x27, 0xfa, 0xd0, 0x92, 0x58, 0x46, 0x41, 0x73, 0xb8, 0xb8, 0x07, 0x7b, 0xa1,
	0xb2, 0x83, 0x8e, 0x55, 0xb4, 0x5b, 0xe3, 0xe4, 0xd3, 0x02, 0xf8, 0xd9, 0xc6, 0xdf, 0xa1, 0x1b,
	0x2a, 0x32, 0x02, 0x7c, 0xe8, 0x99, 0xff, 0xf8, 0xeb, 0x19, 0x03, 0xe7, 0xc2, 0x37, 0x9b, 0x2f,
	0xd0, 0x0e, 0x15, 0x45, 0x41, 0x7e, 0x95, 0xc1, 0x2f, 0xfc, 0x6a, 0xb7, 0xcf, 0xf8, 0x33, 0x74,
	0x42, 0x45, 0x12, 0xcb, 0xeb, 0x80, 0x87, 0x26, 0xc0, 0x67, 0x7c, 0x06, 0x76, 0x5d, 0x9f, 0x1f,
	0xa3, 0x80, 0xf7, 0x9b, 0x91, 0x3f, 0xbb, 0x2e, 0xf3, 0xd9, 0xaa, 0x5d, 0x5d, 0x72, 0xfa, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x3e, 0x1e, 0x6a, 0xde, 0x46, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CollectionClient is the client API for Collection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectionClient interface {
	GetServiceInfo(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*ServiceInfo, error)
	GetIDs(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (Collection_GetIDsClient, error)
	GetRows(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (Collection_GetRowsClient, error)
	GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (Collection_GetRowsByIDClient, error)
}

type collectionClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionClient(cc grpc.ClientConnInterface) CollectionClient {
	return &collectionClient{cc}
}

func (c *collectionClient) GetServiceInfo(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/multidriver.Collection/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionClient) GetIDs(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (Collection_GetIDsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collection_serviceDesc.Streams[0], "/multidriver.Collection/GetIDs", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetIDsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetIDsClient interface {
	Recv() (*RowID, error)
	grpc.ClientStream
}

type collectionGetIDsClient struct {
	grpc.ClientStream
}

func (x *collectionGetIDsClient) Recv() (*RowID, error) {
	m := new(RowID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetRows(ctx context.Context, in *CollectionRequest, opts ...grpc.CallOption) (Collection_GetRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collection_serviceDesc.Streams[1], "/multidriver.Collection/GetRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetRowsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Collection_GetRowsClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type collectionGetRowsClient struct {
	grpc.ClientStream
}

func (x *collectionGetRowsClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectionClient) GetRowsByID(ctx context.Context, opts ...grpc.CallOption) (Collection_GetRowsByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collection_serviceDesc.Streams[2], "/multidriver.Collection/GetRowsByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectionGetRowsByIDClient{stream}
	return x, nil
}

type Collection_GetRowsByIDClient interface {
	Send(*RowRequest) error
	Recv() (*Row, error)
	grpc.ClientStream
}

type collectionGetRowsByIDClient struct {
	grpc.ClientStream
}

func (x *collectionGetRowsByIDClient) Send(m *RowRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectionGetRowsByIDClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectionServer is the server API for Collection service.
type CollectionServer interface {
	GetServiceInfo(context.Context, *CollectionRequest) (*ServiceInfo, error)
	GetIDs(*CollectionRequest, Collection_GetIDsServer) error
	GetRows(*CollectionRequest, Collection_GetRowsServer) error
	GetRowsByID(Collection_GetRowsByIDServer) error
}

// UnimplementedCollectionServer can be embedded to have forward compatible implementations.
type UnimplementedCollectionServer struct {
}

func (*UnimplementedCollectionServer) GetServiceInfo(ctx context.Context, req *CollectionRequest) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (*UnimplementedCollectionServer) GetIDs(req *CollectionRequest, srv Collection_GetIDsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIDs not implemented")
}
func (*UnimplementedCollectionServer) GetRows(req *CollectionRequest, srv Collection_GetRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRows not implemented")
}
func (*UnimplementedCollectionServer) GetRowsByID(srv Collection_GetRowsByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRowsByID not implemented")
}

func RegisterCollectionServer(s *grpc.Server, srv CollectionServer) {
	s.RegisterService(&_Collection_serviceDesc, srv)
}

func _Collection_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multidriver.Collection/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServer).GetServiceInfo(ctx, req.(*CollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collection_GetIDs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetIDs(m, &collectionGetIDsServer{stream})
}

type Collection_GetIDsServer interface {
	Send(*RowID) error
	grpc.ServerStream
}

type collectionGetIDsServer struct {
	grpc.ServerStream
}

func (x *collectionGetIDsServer) Send(m *RowID) error {
	return x.ServerStream.SendMsg(m)
}

func _Collection_GetRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CollectionServer).GetRows(m, &collectionGetRowsServer{stream})
}

type Collection_GetRowsServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type collectionGetRowsServer struct {
	grpc.ServerStream
}

func (x *collectionGetRowsServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func _Collection_GetRowsByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectionServer).GetRowsByID(&collectionGetRowsByIDServer{stream})
}

type Collection_GetRowsByIDServer interface {
	Send(*Row) error
	Recv() (*RowRequest, error)
	grpc.ServerStream
}

type collectionGetRowsByIDServer struct {
	grpc.ServerStream
}

func (x *collectionGetRowsByIDServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectionGetRowsByIDServer) Recv() (*RowRequest, error) {
	m := new(RowRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Collection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multidriver.Collection",
	HandlerType: (*CollectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _Collection_GetServiceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIDs",
			Handler:       _Collection_GetIDs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRows",
			Handler:       _Collection_GetRows_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRowsByID",
			Handler:       _Collection_GetRowsByID_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "multidriver.proto",
}
