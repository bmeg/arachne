// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aql.proto

/*
Package aql is a generated protocol buffer package.

It is generated from these files:
	aql.proto

It has these top-level messages:
	Graph
	GraphQuery
	QuerySet
	MatchQuerySet
	GraphStatement
	AggregationsRequest
	Aggregations
	Aggregate
	TermAggregation
	PercentileAggregation
	HistogramAggregation
	NamedAggregationResult
	AggregationResult
	AggregationResultBucket
	WhereExpressionList
	WhereExpression
	WhereCondition
	SelectStatement
	Selection
	Selections
	Vertex
	Edge
	QueryResult
	EditResult
	GraphElement
	GraphID
	ElementID
	IndexID
	Timestamp
	JobStatus
	JobQuery
	JobListQuery
	Empty
*/
package aql

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Condition int32

const (
	Condition_UNKNOWN_CONDITION Condition = 0
	Condition_EQ                Condition = 1
	Condition_NEQ               Condition = 2
	Condition_GT                Condition = 3
	Condition_GTE               Condition = 4
	Condition_LT                Condition = 5
	Condition_LTE               Condition = 6
	Condition_IN                Condition = 7
	Condition_CONTAINS          Condition = 8
)

var Condition_name = map[int32]string{
	0: "UNKNOWN_CONDITION",
	1: "EQ",
	2: "NEQ",
	3: "GT",
	4: "GTE",
	5: "LT",
	6: "LTE",
	7: "IN",
	8: "CONTAINS",
}
var Condition_value = map[string]int32{
	"UNKNOWN_CONDITION": 0,
	"EQ":                1,
	"NEQ":               2,
	"GT":                3,
	"GTE":               4,
	"LT":                5,
	"LTE":               6,
	"IN":                7,
	"CONTAINS":          8,
}

func (x Condition) String() string {
	return proto.EnumName(Condition_name, int32(x))
}
func (Condition) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobState int32

const (
	JobState_UNKNOWN_STATE JobState = 0
	JobState_QUEUED        JobState = 1
	JobState_RUNNING       JobState = 2
	JobState_DONE          JobState = 3
	JobState_ERROR         JobState = 4
)

var JobState_name = map[int32]string{
	0: "UNKNOWN_STATE",
	1: "QUEUED",
	2: "RUNNING",
	3: "DONE",
	4: "ERROR",
}
var JobState_value = map[string]int32{
	"UNKNOWN_STATE": 0,
	"QUEUED":        1,
	"RUNNING":       2,
	"DONE":          3,
	"ERROR":         4,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}
func (JobState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Graph struct {
	Graph    string    `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Vertices []*Vertex `protobuf:"bytes,2,rep,name=vertices" json:"vertices,omitempty"`
	Edges    []*Edge   `protobuf:"bytes,3,rep,name=edges" json:"edges,omitempty"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (m *Graph) String() string            { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Graph) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *Graph) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

func (m *Graph) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type GraphQuery struct {
	Graph string            `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Query []*GraphStatement `protobuf:"bytes,2,rep,name=query" json:"query,omitempty"`
}

func (m *GraphQuery) Reset()                    { *m = GraphQuery{} }
func (m *GraphQuery) String() string            { return proto.CompactTextString(m) }
func (*GraphQuery) ProtoMessage()               {}
func (*GraphQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GraphQuery) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphQuery) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type QuerySet struct {
	Query []*GraphStatement `protobuf:"bytes,1,rep,name=query" json:"query,omitempty"`
}

func (m *QuerySet) Reset()                    { *m = QuerySet{} }
func (m *QuerySet) String() string            { return proto.CompactTextString(m) }
func (*QuerySet) ProtoMessage()               {}
func (*QuerySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QuerySet) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

type MatchQuerySet struct {
	Queries []*QuerySet `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *MatchQuerySet) Reset()                    { *m = MatchQuerySet{} }
func (m *MatchQuerySet) String() string            { return proto.CompactTextString(m) }
func (*MatchQuerySet) ProtoMessage()               {}
func (*MatchQuerySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MatchQuerySet) GetQueries() []*QuerySet {
	if m != nil {
		return m.Queries
	}
	return nil
}

type GraphStatement struct {
	// Types that are valid to be assigned to Statement:
	//	*GraphStatement_V
	//	*GraphStatement_E
	//	*GraphStatement_In
	//	*GraphStatement_Out
	//	*GraphStatement_InEdge
	//	*GraphStatement_OutEdge
	//	*GraphStatement_Both
	//	*GraphStatement_BothEdge
	//	*GraphStatement_Mark
	//	*GraphStatement_Select
	//	*GraphStatement_Limit
	//	*GraphStatement_Offset
	//	*GraphStatement_Fields
	//	*GraphStatement_Distinct
	//	*GraphStatement_Match
	//	*GraphStatement_Where
	//	*GraphStatement_Count
	//	*GraphStatement_Aggregate
	//	*GraphStatement_Render
	Statement isGraphStatement_Statement `protobuf_oneof:"statement"`
}

func (m *GraphStatement) Reset()                    { *m = GraphStatement{} }
func (m *GraphStatement) String() string            { return proto.CompactTextString(m) }
func (*GraphStatement) ProtoMessage()               {}
func (*GraphStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isGraphStatement_Statement interface{ isGraphStatement_Statement() }

type GraphStatement_V struct {
	V *google_protobuf1.ListValue `protobuf:"bytes,1,opt,name=v,oneof"`
}
type GraphStatement_E struct {
	E *google_protobuf1.ListValue `protobuf:"bytes,2,opt,name=e,oneof"`
}
type GraphStatement_In struct {
	In *google_protobuf1.ListValue `protobuf:"bytes,10,opt,name=in,oneof"`
}
type GraphStatement_Out struct {
	Out *google_protobuf1.ListValue `protobuf:"bytes,11,opt,name=out,oneof"`
}
type GraphStatement_InEdge struct {
	InEdge *google_protobuf1.ListValue `protobuf:"bytes,12,opt,name=in_edge,json=inEdge,oneof"`
}
type GraphStatement_OutEdge struct {
	OutEdge *google_protobuf1.ListValue `protobuf:"bytes,13,opt,name=out_edge,json=outEdge,oneof"`
}
type GraphStatement_Both struct {
	Both *google_protobuf1.ListValue `protobuf:"bytes,14,opt,name=both,oneof"`
}
type GraphStatement_BothEdge struct {
	BothEdge *google_protobuf1.ListValue `protobuf:"bytes,15,opt,name=both_edge,json=bothEdge,oneof"`
}
type GraphStatement_Mark struct {
	Mark string `protobuf:"bytes,20,opt,name=mark,oneof"`
}
type GraphStatement_Select struct {
	Select *SelectStatement `protobuf:"bytes,21,opt,name=select,oneof"`
}
type GraphStatement_Limit struct {
	Limit uint32 `protobuf:"varint,24,opt,name=limit,oneof"`
}
type GraphStatement_Offset struct {
	Offset uint32 `protobuf:"varint,25,opt,name=offset,oneof"`
}
type GraphStatement_Fields struct {
	Fields *google_protobuf1.ListValue `protobuf:"bytes,26,opt,name=fields,oneof"`
}
type GraphStatement_Distinct struct {
	Distinct *google_protobuf1.ListValue `protobuf:"bytes,27,opt,name=distinct,oneof"`
}
type GraphStatement_Match struct {
	Match *MatchQuerySet `protobuf:"bytes,28,opt,name=match,oneof"`
}
type GraphStatement_Where struct {
	Where *WhereExpression `protobuf:"bytes,29,opt,name=where,oneof"`
}
type GraphStatement_Count struct {
	Count string `protobuf:"bytes,30,opt,name=count,oneof"`
}
type GraphStatement_Aggregate struct {
	Aggregate *Aggregations `protobuf:"bytes,31,opt,name=aggregate,oneof"`
}
type GraphStatement_Render struct {
	Render *google_protobuf1.Value `protobuf:"bytes,32,opt,name=render,oneof"`
}

func (*GraphStatement_V) isGraphStatement_Statement()         {}
func (*GraphStatement_E) isGraphStatement_Statement()         {}
func (*GraphStatement_In) isGraphStatement_Statement()        {}
func (*GraphStatement_Out) isGraphStatement_Statement()       {}
func (*GraphStatement_InEdge) isGraphStatement_Statement()    {}
func (*GraphStatement_OutEdge) isGraphStatement_Statement()   {}
func (*GraphStatement_Both) isGraphStatement_Statement()      {}
func (*GraphStatement_BothEdge) isGraphStatement_Statement()  {}
func (*GraphStatement_Mark) isGraphStatement_Statement()      {}
func (*GraphStatement_Select) isGraphStatement_Statement()    {}
func (*GraphStatement_Limit) isGraphStatement_Statement()     {}
func (*GraphStatement_Offset) isGraphStatement_Statement()    {}
func (*GraphStatement_Fields) isGraphStatement_Statement()    {}
func (*GraphStatement_Distinct) isGraphStatement_Statement()  {}
func (*GraphStatement_Match) isGraphStatement_Statement()     {}
func (*GraphStatement_Where) isGraphStatement_Statement()     {}
func (*GraphStatement_Count) isGraphStatement_Statement()     {}
func (*GraphStatement_Aggregate) isGraphStatement_Statement() {}
func (*GraphStatement_Render) isGraphStatement_Statement()    {}

func (m *GraphStatement) GetStatement() isGraphStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *GraphStatement) GetV() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_V); ok {
		return x.V
	}
	return nil
}

func (m *GraphStatement) GetE() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_E); ok {
		return x.E
	}
	return nil
}

func (m *GraphStatement) GetIn() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_In); ok {
		return x.In
	}
	return nil
}

func (m *GraphStatement) GetOut() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Out); ok {
		return x.Out
	}
	return nil
}

func (m *GraphStatement) GetInEdge() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_InEdge); ok {
		return x.InEdge
	}
	return nil
}

func (m *GraphStatement) GetOutEdge() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_OutEdge); ok {
		return x.OutEdge
	}
	return nil
}

func (m *GraphStatement) GetBoth() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Both); ok {
		return x.Both
	}
	return nil
}

func (m *GraphStatement) GetBothEdge() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_BothEdge); ok {
		return x.BothEdge
	}
	return nil
}

func (m *GraphStatement) GetMark() string {
	if x, ok := m.GetStatement().(*GraphStatement_Mark); ok {
		return x.Mark
	}
	return ""
}

func (m *GraphStatement) GetSelect() *SelectStatement {
	if x, ok := m.GetStatement().(*GraphStatement_Select); ok {
		return x.Select
	}
	return nil
}

func (m *GraphStatement) GetLimit() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Limit); ok {
		return x.Limit
	}
	return 0
}

func (m *GraphStatement) GetOffset() uint32 {
	if x, ok := m.GetStatement().(*GraphStatement_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *GraphStatement) GetFields() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Fields); ok {
		return x.Fields
	}
	return nil
}

func (m *GraphStatement) GetDistinct() *google_protobuf1.ListValue {
	if x, ok := m.GetStatement().(*GraphStatement_Distinct); ok {
		return x.Distinct
	}
	return nil
}

func (m *GraphStatement) GetMatch() *MatchQuerySet {
	if x, ok := m.GetStatement().(*GraphStatement_Match); ok {
		return x.Match
	}
	return nil
}

func (m *GraphStatement) GetWhere() *WhereExpression {
	if x, ok := m.GetStatement().(*GraphStatement_Where); ok {
		return x.Where
	}
	return nil
}

func (m *GraphStatement) GetCount() string {
	if x, ok := m.GetStatement().(*GraphStatement_Count); ok {
		return x.Count
	}
	return ""
}

func (m *GraphStatement) GetAggregate() *Aggregations {
	if x, ok := m.GetStatement().(*GraphStatement_Aggregate); ok {
		return x.Aggregate
	}
	return nil
}

func (m *GraphStatement) GetRender() *google_protobuf1.Value {
	if x, ok := m.GetStatement().(*GraphStatement_Render); ok {
		return x.Render
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GraphStatement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GraphStatement_OneofMarshaler, _GraphStatement_OneofUnmarshaler, _GraphStatement_OneofSizer, []interface{}{
		(*GraphStatement_V)(nil),
		(*GraphStatement_E)(nil),
		(*GraphStatement_In)(nil),
		(*GraphStatement_Out)(nil),
		(*GraphStatement_InEdge)(nil),
		(*GraphStatement_OutEdge)(nil),
		(*GraphStatement_Both)(nil),
		(*GraphStatement_BothEdge)(nil),
		(*GraphStatement_Mark)(nil),
		(*GraphStatement_Select)(nil),
		(*GraphStatement_Limit)(nil),
		(*GraphStatement_Offset)(nil),
		(*GraphStatement_Fields)(nil),
		(*GraphStatement_Distinct)(nil),
		(*GraphStatement_Match)(nil),
		(*GraphStatement_Where)(nil),
		(*GraphStatement_Count)(nil),
		(*GraphStatement_Aggregate)(nil),
		(*GraphStatement_Render)(nil),
	}
}

func _GraphStatement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V); err != nil {
			return err
		}
	case *GraphStatement_E:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.E); err != nil {
			return err
		}
	case *GraphStatement_In:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.In); err != nil {
			return err
		}
	case *GraphStatement_Out:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Out); err != nil {
			return err
		}
	case *GraphStatement_InEdge:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InEdge); err != nil {
			return err
		}
	case *GraphStatement_OutEdge:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutEdge); err != nil {
			return err
		}
	case *GraphStatement_Both:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Both); err != nil {
			return err
		}
	case *GraphStatement_BothEdge:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BothEdge); err != nil {
			return err
		}
	case *GraphStatement_Mark:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Mark)
	case *GraphStatement_Select:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Select); err != nil {
			return err
		}
	case *GraphStatement_Limit:
		b.EncodeVarint(24<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Limit))
	case *GraphStatement_Offset:
		b.EncodeVarint(25<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Offset))
	case *GraphStatement_Fields:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fields); err != nil {
			return err
		}
	case *GraphStatement_Distinct:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Distinct); err != nil {
			return err
		}
	case *GraphStatement_Match:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Match); err != nil {
			return err
		}
	case *GraphStatement_Where:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Where); err != nil {
			return err
		}
	case *GraphStatement_Count:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Count)
	case *GraphStatement_Aggregate:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregate); err != nil {
			return err
		}
	case *GraphStatement_Render:
		b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GraphStatement.Statement has unexpected type %T", x)
	}
	return nil
}

func _GraphStatement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GraphStatement)
	switch tag {
	case 1: // statement.v
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_V{msg}
		return true, err
	case 2: // statement.e
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_E{msg}
		return true, err
	case 10: // statement.in
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_In{msg}
		return true, err
	case 11: // statement.out
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Out{msg}
		return true, err
	case 12: // statement.in_edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_InEdge{msg}
		return true, err
	case 13: // statement.out_edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_OutEdge{msg}
		return true, err
	case 14: // statement.both
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Both{msg}
		return true, err
	case 15: // statement.both_edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_BothEdge{msg}
		return true, err
	case 20: // statement.mark
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_Mark{x}
		return true, err
	case 21: // statement.select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Select{msg}
		return true, err
	case 24: // statement.limit
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Limit{uint32(x)}
		return true, err
	case 25: // statement.offset
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Statement = &GraphStatement_Offset{uint32(x)}
		return true, err
	case 26: // statement.fields
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Fields{msg}
		return true, err
	case 27: // statement.distinct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.ListValue)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Distinct{msg}
		return true, err
	case 28: // statement.match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MatchQuerySet)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Match{msg}
		return true, err
	case 29: // statement.where
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereExpression)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Where{msg}
		return true, err
	case 30: // statement.count
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Statement = &GraphStatement_Count{x}
		return true, err
	case 31: // statement.aggregate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Aggregations)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Aggregate{msg}
		return true, err
	case 32: // statement.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Value)
		err := b.DecodeMessage(msg)
		m.Statement = &GraphStatement_Render{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GraphStatement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GraphStatement)
	// statement
	switch x := m.Statement.(type) {
	case *GraphStatement_V:
		s := proto.Size(x.V)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_E:
		s := proto.Size(x.E)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_In:
		s := proto.Size(x.In)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Out:
		s := proto.Size(x.Out)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_InEdge:
		s := proto.Size(x.InEdge)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_OutEdge:
		s := proto.Size(x.OutEdge)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Both:
		s := proto.Size(x.Both)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_BothEdge:
		s := proto.Size(x.BothEdge)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Mark:
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Mark)))
		n += len(x.Mark)
	case *GraphStatement_Select:
		s := proto.Size(x.Select)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Limit:
		n += proto.SizeVarint(24<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Limit))
	case *GraphStatement_Offset:
		n += proto.SizeVarint(25<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Offset))
	case *GraphStatement_Fields:
		s := proto.Size(x.Fields)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Distinct:
		s := proto.Size(x.Distinct)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Match:
		s := proto.Size(x.Match)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Where:
		s := proto.Size(x.Where)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Count:
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Count)))
		n += len(x.Count)
	case *GraphStatement_Aggregate:
		s := proto.Size(x.Aggregate)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GraphStatement_Render:
		s := proto.Size(x.Render)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AggregationsRequest struct {
	Graph        string       `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Aggregations []*Aggregate `protobuf:"bytes,2,rep,name=aggregations" json:"aggregations,omitempty"`
}

func (m *AggregationsRequest) Reset()                    { *m = AggregationsRequest{} }
func (m *AggregationsRequest) String() string            { return proto.CompactTextString(m) }
func (*AggregationsRequest) ProtoMessage()               {}
func (*AggregationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AggregationsRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *AggregationsRequest) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregations struct {
	Aggregations []*Aggregate `protobuf:"bytes,1,rep,name=aggregations" json:"aggregations,omitempty"`
}

func (m *Aggregations) Reset()                    { *m = Aggregations{} }
func (m *Aggregations) String() string            { return proto.CompactTextString(m) }
func (*Aggregations) ProtoMessage()               {}
func (*Aggregations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Aggregations) GetAggregations() []*Aggregate {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type Aggregate struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Aggregation:
	//	*Aggregate_Term
	//	*Aggregate_Percentile
	//	*Aggregate_Histogram
	Aggregation isAggregate_Aggregation `protobuf_oneof:"aggregation"`
}

func (m *Aggregate) Reset()                    { *m = Aggregate{} }
func (m *Aggregate) String() string            { return proto.CompactTextString(m) }
func (*Aggregate) ProtoMessage()               {}
func (*Aggregate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isAggregate_Aggregation interface{ isAggregate_Aggregation() }

type Aggregate_Term struct {
	Term *TermAggregation `protobuf:"bytes,2,opt,name=term,oneof"`
}
type Aggregate_Percentile struct {
	Percentile *PercentileAggregation `protobuf:"bytes,3,opt,name=percentile,oneof"`
}
type Aggregate_Histogram struct {
	Histogram *HistogramAggregation `protobuf:"bytes,4,opt,name=histogram,oneof"`
}

func (*Aggregate_Term) isAggregate_Aggregation()       {}
func (*Aggregate_Percentile) isAggregate_Aggregation() {}
func (*Aggregate_Histogram) isAggregate_Aggregation()  {}

func (m *Aggregate) GetAggregation() isAggregate_Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *Aggregate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Aggregate) GetTerm() *TermAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Term); ok {
		return x.Term
	}
	return nil
}

func (m *Aggregate) GetPercentile() *PercentileAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Percentile); ok {
		return x.Percentile
	}
	return nil
}

func (m *Aggregate) GetHistogram() *HistogramAggregation {
	if x, ok := m.GetAggregation().(*Aggregate_Histogram); ok {
		return x.Histogram
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Aggregate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Aggregate_OneofMarshaler, _Aggregate_OneofUnmarshaler, _Aggregate_OneofSizer, []interface{}{
		(*Aggregate_Term)(nil),
		(*Aggregate_Percentile)(nil),
		(*Aggregate_Histogram)(nil),
	}
}

func _Aggregate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Term); err != nil {
			return err
		}
	case *Aggregate_Percentile:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Percentile); err != nil {
			return err
		}
	case *Aggregate_Histogram:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Histogram); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Aggregate.Aggregation has unexpected type %T", x)
	}
	return nil
}

func _Aggregate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Aggregate)
	switch tag {
	case 2: // aggregation.term
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TermAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Term{msg}
		return true, err
	case 3: // aggregation.percentile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PercentileAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Percentile{msg}
		return true, err
	case 4: // aggregation.histogram
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HistogramAggregation)
		err := b.DecodeMessage(msg)
		m.Aggregation = &Aggregate_Histogram{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Aggregate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Aggregate)
	// aggregation
	switch x := m.Aggregation.(type) {
	case *Aggregate_Term:
		s := proto.Size(x.Term)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Percentile:
		s := proto.Size(x.Percentile)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Aggregate_Histogram:
		s := proto.Size(x.Histogram)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TermAggregation struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Field string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Size  uint32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *TermAggregation) Reset()                    { *m = TermAggregation{} }
func (m *TermAggregation) String() string            { return proto.CompactTextString(m) }
func (*TermAggregation) ProtoMessage()               {}
func (*TermAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TermAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TermAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *TermAggregation) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type PercentileAggregation struct {
	Label    string    `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Field    string    `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Percents []float64 `protobuf:"fixed64,3,rep,packed,name=percents" json:"percents,omitempty"`
}

func (m *PercentileAggregation) Reset()                    { *m = PercentileAggregation{} }
func (m *PercentileAggregation) String() string            { return proto.CompactTextString(m) }
func (*PercentileAggregation) ProtoMessage()               {}
func (*PercentileAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PercentileAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *PercentileAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PercentileAggregation) GetPercents() []float64 {
	if m != nil {
		return m.Percents
	}
	return nil
}

type HistogramAggregation struct {
	Label    string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Field    string `protobuf:"bytes,2,opt,name=field" json:"field,omitempty"`
	Interval uint32 `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
}

func (m *HistogramAggregation) Reset()                    { *m = HistogramAggregation{} }
func (m *HistogramAggregation) String() string            { return proto.CompactTextString(m) }
func (*HistogramAggregation) ProtoMessage()               {}
func (*HistogramAggregation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HistogramAggregation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *HistogramAggregation) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *HistogramAggregation) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type NamedAggregationResult struct {
	Aggregations map[string]*AggregationResult `protobuf:"bytes,3,rep,name=aggregations" json:"aggregations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NamedAggregationResult) Reset()                    { *m = NamedAggregationResult{} }
func (m *NamedAggregationResult) String() string            { return proto.CompactTextString(m) }
func (*NamedAggregationResult) ProtoMessage()               {}
func (*NamedAggregationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NamedAggregationResult) GetAggregations() map[string]*AggregationResult {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

type AggregationResult struct {
	Buckets []*AggregationResultBucket `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (m *AggregationResult) Reset()                    { *m = AggregationResult{} }
func (m *AggregationResult) String() string            { return proto.CompactTextString(m) }
func (*AggregationResult) ProtoMessage()               {}
func (*AggregationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AggregationResult) GetBuckets() []*AggregationResultBucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type AggregationResultBucket struct {
	Key   *google_protobuf1.Value `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value float64                 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *AggregationResultBucket) Reset()                    { *m = AggregationResultBucket{} }
func (m *AggregationResultBucket) String() string            { return proto.CompactTextString(m) }
func (*AggregationResultBucket) ProtoMessage()               {}
func (*AggregationResultBucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AggregationResultBucket) GetKey() *google_protobuf1.Value {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *AggregationResultBucket) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type WhereExpressionList struct {
	Expressions []*WhereExpression `protobuf:"bytes,1,rep,name=expressions" json:"expressions,omitempty"`
}

func (m *WhereExpressionList) Reset()                    { *m = WhereExpressionList{} }
func (m *WhereExpressionList) String() string            { return proto.CompactTextString(m) }
func (*WhereExpressionList) ProtoMessage()               {}
func (*WhereExpressionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WhereExpressionList) GetExpressions() []*WhereExpression {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type WhereExpression struct {
	// Types that are valid to be assigned to Expression:
	//	*WhereExpression_And
	//	*WhereExpression_Or
	//	*WhereExpression_Not
	//	*WhereExpression_Condition
	Expression isWhereExpression_Expression `protobuf_oneof:"expression"`
}

func (m *WhereExpression) Reset()                    { *m = WhereExpression{} }
func (m *WhereExpression) String() string            { return proto.CompactTextString(m) }
func (*WhereExpression) ProtoMessage()               {}
func (*WhereExpression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type isWhereExpression_Expression interface{ isWhereExpression_Expression() }

type WhereExpression_And struct {
	And *WhereExpressionList `protobuf:"bytes,1,opt,name=and,oneof"`
}
type WhereExpression_Or struct {
	Or *WhereExpressionList `protobuf:"bytes,2,opt,name=or,oneof"`
}
type WhereExpression_Not struct {
	Not *WhereExpression `protobuf:"bytes,3,opt,name=not,oneof"`
}
type WhereExpression_Condition struct {
	Condition *WhereCondition `protobuf:"bytes,4,opt,name=condition,oneof"`
}

func (*WhereExpression_And) isWhereExpression_Expression()       {}
func (*WhereExpression_Or) isWhereExpression_Expression()        {}
func (*WhereExpression_Not) isWhereExpression_Expression()       {}
func (*WhereExpression_Condition) isWhereExpression_Expression() {}

func (m *WhereExpression) GetExpression() isWhereExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (m *WhereExpression) GetAnd() *WhereExpressionList {
	if x, ok := m.GetExpression().(*WhereExpression_And); ok {
		return x.And
	}
	return nil
}

func (m *WhereExpression) GetOr() *WhereExpressionList {
	if x, ok := m.GetExpression().(*WhereExpression_Or); ok {
		return x.Or
	}
	return nil
}

func (m *WhereExpression) GetNot() *WhereExpression {
	if x, ok := m.GetExpression().(*WhereExpression_Not); ok {
		return x.Not
	}
	return nil
}

func (m *WhereExpression) GetCondition() *WhereCondition {
	if x, ok := m.GetExpression().(*WhereExpression_Condition); ok {
		return x.Condition
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WhereExpression) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WhereExpression_OneofMarshaler, _WhereExpression_OneofUnmarshaler, _WhereExpression_OneofSizer, []interface{}{
		(*WhereExpression_And)(nil),
		(*WhereExpression_Or)(nil),
		(*WhereExpression_Not)(nil),
		(*WhereExpression_Condition)(nil),
	}
}

func _WhereExpression_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WhereExpression)
	// expression
	switch x := m.Expression.(type) {
	case *WhereExpression_And:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.And); err != nil {
			return err
		}
	case *WhereExpression_Or:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Or); err != nil {
			return err
		}
	case *WhereExpression_Not:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Not); err != nil {
			return err
		}
	case *WhereExpression_Condition:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Condition); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("WhereExpression.Expression has unexpected type %T", x)
	}
	return nil
}

func _WhereExpression_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WhereExpression)
	switch tag {
	case 1: // expression.and
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &WhereExpression_And{msg}
		return true, err
	case 2: // expression.or
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereExpressionList)
		err := b.DecodeMessage(msg)
		m.Expression = &WhereExpression_Or{msg}
		return true, err
	case 3: // expression.not
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereExpression)
		err := b.DecodeMessage(msg)
		m.Expression = &WhereExpression_Not{msg}
		return true, err
	case 4: // expression.condition
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhereCondition)
		err := b.DecodeMessage(msg)
		m.Expression = &WhereExpression_Condition{msg}
		return true, err
	default:
		return false, nil
	}
}

func _WhereExpression_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WhereExpression)
	// expression
	switch x := m.Expression.(type) {
	case *WhereExpression_And:
		s := proto.Size(x.And)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereExpression_Or:
		s := proto.Size(x.Or)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereExpression_Not:
		s := proto.Size(x.Not)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WhereExpression_Condition:
		s := proto.Size(x.Condition)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type WhereCondition struct {
	Key       string                  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value     *google_protobuf1.Value `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Condition Condition               `protobuf:"varint,3,opt,name=condition,enum=aql.Condition" json:"condition,omitempty"`
}

func (m *WhereCondition) Reset()                    { *m = WhereCondition{} }
func (m *WhereCondition) String() string            { return proto.CompactTextString(m) }
func (*WhereCondition) ProtoMessage()               {}
func (*WhereCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WhereCondition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WhereCondition) GetValue() *google_protobuf1.Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *WhereCondition) GetCondition() Condition {
	if m != nil {
		return m.Condition
	}
	return Condition_UNKNOWN_CONDITION
}

type SelectStatement struct {
	Marks []string `protobuf:"bytes,1,rep,name=marks" json:"marks,omitempty"`
}

func (m *SelectStatement) Reset()                    { *m = SelectStatement{} }
func (m *SelectStatement) String() string            { return proto.CompactTextString(m) }
func (*SelectStatement) ProtoMessage()               {}
func (*SelectStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SelectStatement) GetMarks() []string {
	if m != nil {
		return m.Marks
	}
	return nil
}

type Selection struct {
	// Types that are valid to be assigned to Result:
	//	*Selection_Vertex
	//	*Selection_Edge
	Result isSelection_Result `protobuf_oneof:"result"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type isSelection_Result interface{ isSelection_Result() }

type Selection_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,oneof"`
}
type Selection_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,oneof"`
}

func (*Selection_Vertex) isSelection_Result() {}
func (*Selection_Edge) isSelection_Result()   {}

func (m *Selection) GetResult() isSelection_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Selection) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*Selection_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *Selection) GetEdge() *Edge {
	if x, ok := m.GetResult().(*Selection_Edge); ok {
		return x.Edge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Selection) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Selection_OneofMarshaler, _Selection_OneofUnmarshaler, _Selection_OneofSizer, []interface{}{
		(*Selection_Vertex)(nil),
		(*Selection_Edge)(nil),
	}
}

func _Selection_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *Selection_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Selection.Result has unexpected type %T", x)
	}
	return nil
}

func _Selection_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Selection)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &Selection_Edge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Selection_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Selection)
	// result
	switch x := m.Result.(type) {
	case *Selection_Vertex:
		s := proto.Size(x.Vertex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Selection_Edge:
		s := proto.Size(x.Edge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Selections struct {
	Selections map[string]*Selection `protobuf:"bytes,1,rep,name=selections" json:"selections,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Selections) Reset()                    { *m = Selections{} }
func (m *Selections) String() string            { return proto.CompactTextString(m) }
func (*Selections) ProtoMessage()               {}
func (*Selections) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Selections) GetSelections() map[string]*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type Vertex struct {
	Gid   string                   `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Label string                   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Data  *google_protobuf1.Struct `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Vertex) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Vertex) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Vertex) GetData() *google_protobuf1.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type Edge struct {
	Gid   string                   `protobuf:"bytes,1,opt,name=gid" json:"gid,omitempty"`
	Label string                   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	From  string                   `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To    string                   `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Data  *google_protobuf1.Struct `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Edge) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *Edge) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Edge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Edge) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Edge) GetData() *google_protobuf1.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryResult struct {
	// Types that are valid to be assigned to Result:
	//	*QueryResult_Vertex
	//	*QueryResult_Edge
	//	*QueryResult_Aggregations
	//	*QueryResult_Selections
	//	*QueryResult_Render
	//	*QueryResult_Count
	Result isQueryResult_Result `protobuf_oneof:"result"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type isQueryResult_Result interface{ isQueryResult_Result() }

type QueryResult_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,oneof"`
}
type QueryResult_Edge struct {
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,oneof"`
}
type QueryResult_Aggregations struct {
	Aggregations *NamedAggregationResult `protobuf:"bytes,3,opt,name=aggregations,oneof"`
}
type QueryResult_Selections struct {
	Selections *Selections `protobuf:"bytes,4,opt,name=selections,oneof"`
}
type QueryResult_Render struct {
	Render *google_protobuf1.Value `protobuf:"bytes,5,opt,name=render,oneof"`
}
type QueryResult_Count struct {
	Count uint32 `protobuf:"varint,6,opt,name=count,oneof"`
}

func (*QueryResult_Vertex) isQueryResult_Result()       {}
func (*QueryResult_Edge) isQueryResult_Result()         {}
func (*QueryResult_Aggregations) isQueryResult_Result() {}
func (*QueryResult_Selections) isQueryResult_Result()   {}
func (*QueryResult_Render) isQueryResult_Result()       {}
func (*QueryResult_Count) isQueryResult_Result()        {}

func (m *QueryResult) GetResult() isQueryResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *QueryResult) GetVertex() *Vertex {
	if x, ok := m.GetResult().(*QueryResult_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (m *QueryResult) GetEdge() *Edge {
	if x, ok := m.GetResult().(*QueryResult_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *QueryResult) GetAggregations() *NamedAggregationResult {
	if x, ok := m.GetResult().(*QueryResult_Aggregations); ok {
		return x.Aggregations
	}
	return nil
}

func (m *QueryResult) GetSelections() *Selections {
	if x, ok := m.GetResult().(*QueryResult_Selections); ok {
		return x.Selections
	}
	return nil
}

func (m *QueryResult) GetRender() *google_protobuf1.Value {
	if x, ok := m.GetResult().(*QueryResult_Render); ok {
		return x.Render
	}
	return nil
}

func (m *QueryResult) GetCount() uint32 {
	if x, ok := m.GetResult().(*QueryResult_Count); ok {
		return x.Count
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryResult_OneofMarshaler, _QueryResult_OneofUnmarshaler, _QueryResult_OneofSizer, []interface{}{
		(*QueryResult_Vertex)(nil),
		(*QueryResult_Edge)(nil),
		(*QueryResult_Aggregations)(nil),
		(*QueryResult_Selections)(nil),
		(*QueryResult_Render)(nil),
		(*QueryResult_Count)(nil),
	}
}

func _QueryResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vertex); err != nil {
			return err
		}
	case *QueryResult_Edge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Edge); err != nil {
			return err
		}
	case *QueryResult_Aggregations:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Aggregations); err != nil {
			return err
		}
	case *QueryResult_Selections:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selections); err != nil {
			return err
		}
	case *QueryResult_Render:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Render); err != nil {
			return err
		}
	case *QueryResult_Count:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Count))
	case nil:
	default:
		return fmt.Errorf("QueryResult.Result has unexpected type %T", x)
	}
	return nil
}

func _QueryResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryResult)
	switch tag {
	case 1: // result.vertex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vertex)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Vertex{msg}
		return true, err
	case 2: // result.edge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Edge)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Edge{msg}
		return true, err
	case 3: // result.aggregations
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NamedAggregationResult)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Aggregations{msg}
		return true, err
	case 4: // result.selections
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selections)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Selections{msg}
		return true, err
	case 5: // result.render
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.Value)
		err := b.DecodeMessage(msg)
		m.Result = &QueryResult_Render{msg}
		return true, err
	case 6: // result.count
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Result = &QueryResult_Count{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _QueryResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryResult)
	// result
	switch x := m.Result.(type) {
	case *QueryResult_Vertex:
		s := proto.Size(x.Vertex)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Edge:
		s := proto.Size(x.Edge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Aggregations:
		s := proto.Size(x.Aggregations)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Selections:
		s := proto.Size(x.Selections)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Render:
		s := proto.Size(x.Render)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryResult_Count:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Count))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EditResult struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *EditResult) Reset()                    { *m = EditResult{} }
func (m *EditResult) String() string            { return proto.CompactTextString(m) }
func (*EditResult) ProtoMessage()               {}
func (*EditResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EditResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GraphElement struct {
	Graph  string  `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Vertex *Vertex `protobuf:"bytes,2,opt,name=vertex" json:"vertex,omitempty"`
	Edge   *Edge   `protobuf:"bytes,3,opt,name=edge" json:"edge,omitempty"`
}

func (m *GraphElement) Reset()                    { *m = GraphElement{} }
func (m *GraphElement) String() string            { return proto.CompactTextString(m) }
func (*GraphElement) ProtoMessage()               {}
func (*GraphElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GraphElement) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *GraphElement) GetVertex() *Vertex {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *GraphElement) GetEdge() *Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

type GraphID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *GraphID) Reset()                    { *m = GraphID{} }
func (m *GraphID) String() string            { return proto.CompactTextString(m) }
func (*GraphID) ProtoMessage()               {}
func (*GraphID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GraphID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type ElementID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ElementID) Reset()                    { *m = ElementID{} }
func (m *ElementID) String() string            { return proto.CompactTextString(m) }
func (*ElementID) ProtoMessage()               {}
func (*ElementID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ElementID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *ElementID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IndexID struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Field string `protobuf:"bytes,3,opt,name=field" json:"field,omitempty"`
}

func (m *IndexID) Reset()                    { *m = IndexID{} }
func (m *IndexID) String() string            { return proto.CompactTextString(m) }
func (*IndexID) ProtoMessage()               {}
func (*IndexID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *IndexID) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *IndexID) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *IndexID) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type Timestamp struct {
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Timestamp) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type JobStatus struct {
	Id        string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State     JobState          `protobuf:"varint,2,opt,name=state,enum=aql.JobState" json:"state,omitempty"`
	Graph     string            `protobuf:"bytes,3,opt,name=graph" json:"graph,omitempty"`
	Query     []*GraphStatement `protobuf:"bytes,4,rep,name=query" json:"query,omitempty"`
	LineCount uint32            `protobuf:"varint,5,opt,name=line_count,json=lineCount" json:"line_count,omitempty"`
	FileSize  uint32            `protobuf:"varint,6,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (m *JobStatus) Reset()                    { *m = JobStatus{} }
func (m *JobStatus) String() string            { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()               {}
func (*JobStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *JobStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobStatus) GetState() JobState {
	if m != nil {
		return m.State
	}
	return JobState_UNKNOWN_STATE
}

func (m *JobStatus) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *JobStatus) GetQuery() []*GraphStatement {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *JobStatus) GetLineCount() uint32 {
	if m != nil {
		return m.LineCount
	}
	return 0
}

func (m *JobStatus) GetFileSize() uint32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type JobQuery struct {
	Jobid string `protobuf:"bytes,1,opt,name=jobid" json:"jobid,omitempty"`
	Graph string `protobuf:"bytes,2,opt,name=graph" json:"graph,omitempty"`
}

func (m *JobQuery) Reset()                    { *m = JobQuery{} }
func (m *JobQuery) String() string            { return proto.CompactTextString(m) }
func (*JobQuery) ProtoMessage()               {}
func (*JobQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *JobQuery) GetJobid() string {
	if m != nil {
		return m.Jobid
	}
	return ""
}

func (m *JobQuery) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type JobListQuery struct {
	Graph string `protobuf:"bytes,1,opt,name=graph" json:"graph,omitempty"`
}

func (m *JobListQuery) Reset()                    { *m = JobListQuery{} }
func (m *JobListQuery) String() string            { return proto.CompactTextString(m) }
func (*JobListQuery) ProtoMessage()               {}
func (*JobListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *JobListQuery) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func init() {
	proto.RegisterType((*Graph)(nil), "aql.Graph")
	proto.RegisterType((*GraphQuery)(nil), "aql.GraphQuery")
	proto.RegisterType((*QuerySet)(nil), "aql.QuerySet")
	proto.RegisterType((*MatchQuerySet)(nil), "aql.MatchQuerySet")
	proto.RegisterType((*GraphStatement)(nil), "aql.GraphStatement")
	proto.RegisterType((*AggregationsRequest)(nil), "aql.AggregationsRequest")
	proto.RegisterType((*Aggregations)(nil), "aql.Aggregations")
	proto.RegisterType((*Aggregate)(nil), "aql.Aggregate")
	proto.RegisterType((*TermAggregation)(nil), "aql.TermAggregation")
	proto.RegisterType((*PercentileAggregation)(nil), "aql.PercentileAggregation")
	proto.RegisterType((*HistogramAggregation)(nil), "aql.HistogramAggregation")
	proto.RegisterType((*NamedAggregationResult)(nil), "aql.NamedAggregationResult")
	proto.RegisterType((*AggregationResult)(nil), "aql.AggregationResult")
	proto.RegisterType((*AggregationResultBucket)(nil), "aql.AggregationResultBucket")
	proto.RegisterType((*WhereExpressionList)(nil), "aql.WhereExpressionList")
	proto.RegisterType((*WhereExpression)(nil), "aql.WhereExpression")
	proto.RegisterType((*WhereCondition)(nil), "aql.WhereCondition")
	proto.RegisterType((*SelectStatement)(nil), "aql.SelectStatement")
	proto.RegisterType((*Selection)(nil), "aql.Selection")
	proto.RegisterType((*Selections)(nil), "aql.Selections")
	proto.RegisterType((*Vertex)(nil), "aql.Vertex")
	proto.RegisterType((*Edge)(nil), "aql.Edge")
	proto.RegisterType((*QueryResult)(nil), "aql.QueryResult")
	proto.RegisterType((*EditResult)(nil), "aql.EditResult")
	proto.RegisterType((*GraphElement)(nil), "aql.GraphElement")
	proto.RegisterType((*GraphID)(nil), "aql.GraphID")
	proto.RegisterType((*ElementID)(nil), "aql.ElementID")
	proto.RegisterType((*IndexID)(nil), "aql.IndexID")
	proto.RegisterType((*Timestamp)(nil), "aql.Timestamp")
	proto.RegisterType((*JobStatus)(nil), "aql.JobStatus")
	proto.RegisterType((*JobQuery)(nil), "aql.JobQuery")
	proto.RegisterType((*JobListQuery)(nil), "aql.JobListQuery")
	proto.RegisterType((*Empty)(nil), "aql.Empty")
	proto.RegisterEnum("aql.Condition", Condition_name, Condition_value)
	proto.RegisterEnum("aql.JobState", JobState_name, JobState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Query service

type QueryClient interface {
	Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error)
	Aggregate(ctx context.Context, in *AggregationsRequest, opts ...grpc.CallOption) (*NamedAggregationResult, error)
	QueryJob(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*JobStatus, error)
	GetJob(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (Query_GetJobClient, error)
	ListJob(ctx context.Context, in *JobListQuery, opts ...grpc.CallOption) (Query_ListJobClient, error)
	GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error)
	GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error)
	GetGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_GetGraphsClient, error)
	GetIndexList(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (Query_GetIndexListClient, error)
	GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error)
}

type queryClient struct {
	cc *grpc.ClientConn
}

func NewQueryClient(cc *grpc.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Traversal(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (Query_TraversalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[0], c.cc, "/aql.Query/Traversal", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryTraversalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_TraversalClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryTraversalClient struct {
	grpc.ClientStream
}

func (x *queryTraversalClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) Aggregate(ctx context.Context, in *AggregationsRequest, opts ...grpc.CallOption) (*NamedAggregationResult, error) {
	out := new(NamedAggregationResult)
	err := grpc.Invoke(ctx, "/aql.Query/Aggregate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryJob(ctx context.Context, in *GraphQuery, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := grpc.Invoke(ctx, "/aql.Query/QueryJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetJob(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (Query_GetJobClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[1], c.cc, "/aql.Query/GetJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryGetJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_GetJobClient interface {
	Recv() (*QueryResult, error)
	grpc.ClientStream
}

type queryGetJobClient struct {
	grpc.ClientStream
}

func (x *queryGetJobClient) Recv() (*QueryResult, error) {
	m := new(QueryResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) ListJob(ctx context.Context, in *JobListQuery, opts ...grpc.CallOption) (Query_ListJobClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[2], c.cc, "/aql.Query/ListJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryListJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_ListJobClient interface {
	Recv() (*JobStatus, error)
	grpc.ClientStream
}

type queryListJobClient struct {
	grpc.ClientStream
}

func (x *queryListJobClient) Recv() (*JobStatus, error) {
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := grpc.Invoke(ctx, "/aql.Query/GetVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := grpc.Invoke(ctx, "/aql.Query/GetEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetGraphs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Query_GetGraphsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[3], c.cc, "/aql.Query/GetGraphs", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryGetGraphsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_GetGraphsClient interface {
	Recv() (*GraphID, error)
	grpc.ClientStream
}

type queryGetGraphsClient struct {
	grpc.ClientStream
}

func (x *queryGetGraphsClient) Recv() (*GraphID, error) {
	m := new(GraphID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetIndexList(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (Query_GetIndexListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Query_serviceDesc.Streams[4], c.cc, "/aql.Query/GetIndexList", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryGetIndexListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Query_GetIndexListClient interface {
	Recv() (*IndexID, error)
	grpc.ClientStream
}

type queryGetIndexListClient struct {
	grpc.ClientStream
}

func (x *queryGetIndexListClient) Recv() (*IndexID, error) {
	m := new(IndexID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryClient) GetTimestamp(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*Timestamp, error) {
	out := new(Timestamp)
	err := grpc.Invoke(ctx, "/aql.Query/GetTimestamp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service

type QueryServer interface {
	Traversal(*GraphQuery, Query_TraversalServer) error
	Aggregate(context.Context, *AggregationsRequest) (*NamedAggregationResult, error)
	QueryJob(context.Context, *GraphQuery) (*JobStatus, error)
	GetJob(*JobQuery, Query_GetJobServer) error
	ListJob(*JobListQuery, Query_ListJobServer) error
	GetVertex(context.Context, *ElementID) (*Vertex, error)
	GetEdge(context.Context, *ElementID) (*Edge, error)
	GetGraphs(*Empty, Query_GetGraphsServer) error
	GetIndexList(*GraphID, Query_GetIndexListServer) error
	GetTimestamp(context.Context, *GraphID) (*Timestamp, error)
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Traversal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).Traversal(m, &queryTraversalServer{stream})
}

type Query_TraversalServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryTraversalServer struct {
	grpc.ServerStream
}

func (x *queryTraversalServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Query/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Aggregate(ctx, req.(*AggregationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Query/QueryJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryJob(ctx, req.(*GraphQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).GetJob(m, &queryGetJobServer{stream})
}

type Query_GetJobServer interface {
	Send(*QueryResult) error
	grpc.ServerStream
}

type queryGetJobServer struct {
	grpc.ServerStream
}

func (x *queryGetJobServer) Send(m *QueryResult) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_ListJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobListQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).ListJob(m, &queryListJobServer{stream})
}

type Query_ListJobServer interface {
	Send(*JobStatus) error
	grpc.ServerStream
}

type queryListJobServer struct {
	grpc.ServerStream
}

func (x *queryListJobServer) Send(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Query/GetVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Query/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetGraphs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).GetGraphs(m, &queryGetGraphsServer{stream})
}

type Query_GetGraphsServer interface {
	Send(*GraphID) error
	grpc.ServerStream
}

type queryGetGraphsServer struct {
	grpc.ServerStream
}

func (x *queryGetGraphsServer) Send(m *GraphID) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetIndexList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GraphID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).GetIndexList(m, &queryGetIndexListServer{stream})
}

type Query_GetIndexListServer interface {
	Send(*IndexID) error
	grpc.ServerStream
}

type queryGetIndexListServer struct {
	grpc.ServerStream
}

func (x *queryGetIndexListServer) Send(m *IndexID) error {
	return x.ServerStream.SendMsg(m)
}

func _Query_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Query/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTimestamp(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aql.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Aggregate",
			Handler:    _Query_Aggregate_Handler,
		},
		{
			MethodName: "QueryJob",
			Handler:    _Query_QueryJob_Handler,
		},
		{
			MethodName: "GetVertex",
			Handler:    _Query_GetVertex_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _Query_GetEdge_Handler,
		},
		{
			MethodName: "GetTimestamp",
			Handler:    _Query_GetTimestamp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Traversal",
			Handler:       _Query_Traversal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetJob",
			Handler:       _Query_GetJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListJob",
			Handler:       _Query_ListJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGraphs",
			Handler:       _Query_GetGraphs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetIndexList",
			Handler:       _Query_GetIndexList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aql.proto",
}

// Client API for Edit service

type EditClient interface {
	AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error)
	BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error)
	AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error)
	AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
	DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error)
}

type editClient struct {
	cc *grpc.ClientConn
}

func NewEditClient(cc *grpc.ClientConn) EditClient {
	return &editClient{cc}
}

func (c *editClient) AddVertex(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/AddVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddEdge(ctx context.Context, in *GraphElement, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/AddEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) BulkAdd(ctx context.Context, opts ...grpc.CallOption) (Edit_BulkAddClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Edit_serviceDesc.Streams[0], c.cc, "/aql.Edit/BulkAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &editBulkAddClient{stream}
	return x, nil
}

type Edit_BulkAddClient interface {
	Send(*GraphElement) error
	CloseAndRecv() (*EditResult, error)
	grpc.ClientStream
}

type editBulkAddClient struct {
	grpc.ClientStream
}

func (x *editBulkAddClient) Send(m *GraphElement) error {
	return x.ClientStream.SendMsg(m)
}

func (x *editBulkAddClient) CloseAndRecv() (*EditResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EditResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *editClient) AddGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/AddGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/DeleteGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteVertex(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/DeleteVertex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteEdge(ctx context.Context, in *ElementID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/DeleteEdge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) AddIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/AddIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editClient) DeleteIndex(ctx context.Context, in *IndexID, opts ...grpc.CallOption) (*EditResult, error) {
	out := new(EditResult)
	err := grpc.Invoke(ctx, "/aql.Edit/DeleteIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Edit service

type EditServer interface {
	AddVertex(context.Context, *GraphElement) (*EditResult, error)
	AddEdge(context.Context, *GraphElement) (*EditResult, error)
	BulkAdd(Edit_BulkAddServer) error
	AddGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteGraph(context.Context, *GraphID) (*EditResult, error)
	DeleteVertex(context.Context, *ElementID) (*EditResult, error)
	DeleteEdge(context.Context, *ElementID) (*EditResult, error)
	AddIndex(context.Context, *IndexID) (*EditResult, error)
	DeleteIndex(context.Context, *IndexID) (*EditResult, error)
}

func RegisterEditServer(s *grpc.Server, srv EditServer) {
	s.RegisterService(&_Edit_serviceDesc, srv)
}

func _Edit_AddVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/AddVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddVertex(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddEdge(ctx, req.(*GraphElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_BulkAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EditServer).BulkAdd(&editBulkAddServer{stream})
}

type Edit_BulkAddServer interface {
	SendAndClose(*EditResult) error
	Recv() (*GraphElement, error)
	grpc.ServerStream
}

type editBulkAddServer struct {
	grpc.ServerStream
}

func (x *editBulkAddServer) SendAndClose(m *EditResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *editBulkAddServer) Recv() (*GraphElement, error) {
	m := new(GraphElement)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Edit_AddGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/AddGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/DeleteVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteVertex(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElementID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteEdge(ctx, req.(*ElementID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_AddIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).AddIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/AddIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).AddIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Edit_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aql.Edit/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditServer).DeleteIndex(ctx, req.(*IndexID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Edit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aql.Edit",
	HandlerType: (*EditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVertex",
			Handler:    _Edit_AddVertex_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _Edit_AddEdge_Handler,
		},
		{
			MethodName: "AddGraph",
			Handler:    _Edit_AddGraph_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Edit_DeleteGraph_Handler,
		},
		{
			MethodName: "DeleteVertex",
			Handler:    _Edit_DeleteVertex_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _Edit_DeleteEdge_Handler,
		},
		{
			MethodName: "AddIndex",
			Handler:    _Edit_AddIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _Edit_DeleteIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkAdd",
			Handler:       _Edit_BulkAdd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "aql.proto",
}

func init() { proto.RegisterFile("aql.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2049 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x72, 0x13, 0xcb,
	0x19, 0xf6, 0x8c, 0xae, 0xf3, 0xcb, 0x17, 0xb9, 0x31, 0x30, 0x08, 0xfb, 0xd8, 0xd5, 0x70, 0x82,
	0x51, 0x88, 0x65, 0x38, 0x39, 0x84, 0xb8, 0x52, 0x95, 0xb2, 0xb1, 0x4a, 0x18, 0xb0, 0x1c, 0x8f,
	0x05, 0xd4, 0x59, 0x10, 0xd7, 0xc8, 0xd3, 0x96, 0x07, 0xa4, 0x19, 0x33, 0xd3, 0x72, 0x20, 0x94,
	0x93, 0xaa, 0xbc, 0x42, 0xb6, 0xa9, 0xca, 0x53, 0x64, 0x99, 0x5d, 0xde, 0xe0, 0x6c, 0xf2, 0x00,
	0xd9, 0x65, 0x91, 0x57, 0x48, 0xf5, 0xdf, 0x3d, 0x17, 0xdd, 0x8c, 0xa8, 0x3a, 0x2b, 0xab, 0xbb,
	0xbf, 0xff, 0xeb, 0xff, 0xde, 0xff, 0x18, 0x0c, 0xfb, 0x43, 0x77, 0xe3, 0x3c, 0xf0, 0xb9, 0x4f,
	0x32, 0xf6, 0x87, 0x6e, 0x65, 0xb9, 0xe3, 0xfb, 0x9d, 0x2e, 0xab, 0xd9, 0xe7, 0x6e, 0xcd, 0xf6,
	0x3c, 0x9f, 0xdb, 0xdc, 0xf5, 0xbd, 0x50, 0x42, 0xe2, 0x53, 0x5c, 0xb5, 0xfb, 0xa7, 0xb5, 0x90,
	0x07, 0xfd, 0x13, 0x2e, 0x4f, 0x69, 0x07, 0x72, 0x8d, 0xc0, 0x3e, 0x3f, 0x23, 0x4b, 0x90, 0xeb,
	0x88, 0x1f, 0xa6, 0xb6, 0xa6, 0xad, 0x1b, 0x96, 0x5c, 0x90, 0x7b, 0x50, 0xbc, 0x60, 0x01, 0x77,
	0x4f, 0x58, 0x68, 0xea, 0x6b, 0x99, 0xf5, 0xd2, 0xa3, 0xd2, 0x86, 0xb8, 0xfd, 0x35, 0x0b, 0x38,
	0xfb, 0x68, 0xc5, 0x87, 0x64, 0x15, 0x72, 0xcc, 0xe9, 0xb0, 0xd0, 0xcc, 0x20, 0xca, 0x40, 0x54,
	0xdd, 0xe9, 0x30, 0x4b, 0xee, 0xd3, 0x7d, 0x00, 0xbc, 0xe8, 0xb0, 0xcf, 0x82, 0x4f, 0x13, 0x6e,
	0xbb, 0x0f, 0xb9, 0x0f, 0xe2, 0x58, 0x5d, 0x75, 0x0d, 0x49, 0x50, 0xea, 0x88, 0xdb, 0x9c, 0xf5,
	0x98, 0xc7, 0x2d, 0x89, 0xa0, 0xdf, 0x43, 0x11, 0x99, 0x8e, 0x18, 0x4f, 0xc4, 0xb4, 0x2f, 0x8a,
	0x3d, 0x81, 0xb9, 0x7d, 0x9b, 0x9f, 0x9c, 0xc5, 0xb2, 0xf7, 0xa0, 0x20, 0x4e, 0x5c, 0x16, 0x2a,
	0xe9, 0x39, 0x94, 0x8e, 0xce, 0xad, 0xe8, 0x94, 0xfe, 0x2f, 0x0f, 0xf3, 0x83, 0x9c, 0xa4, 0x0a,
	0xda, 0x05, 0x1a, 0x50, 0x7a, 0x54, 0xd9, 0x90, 0x5e, 0xde, 0x88, 0xbc, 0xbc, 0xf1, 0xd2, 0x0d,
	0xf9, 0x6b, 0xbb, 0xdb, 0x67, 0xcf, 0x66, 0x2c, 0xed, 0x42, 0x60, 0x99, 0xa9, 0x4f, 0x83, 0x65,
	0xe4, 0x01, 0xe8, 0xae, 0x67, 0xc2, 0x14, 0x60, 0xdd, 0xf5, 0xc8, 0x06, 0x64, 0xfc, 0x3e, 0x37,
	0x4b, 0x53, 0xc0, 0x05, 0x90, 0x7c, 0x0f, 0x05, 0xd7, 0x3b, 0x16, 0x41, 0x31, 0x67, 0xa7, 0x90,
	0xc9, 0xbb, 0x9e, 0x08, 0x23, 0xf9, 0x15, 0x14, 0xfd, 0x3e, 0x97, 0x72, 0x73, 0x53, 0xc8, 0x15,
	0xfc, 0x3e, 0x47, 0xc1, 0x4d, 0xc8, 0xb6, 0x7d, 0x7e, 0x66, 0xce, 0x4f, 0x21, 0x84, 0x48, 0xf2,
	0x6b, 0x30, 0xc4, 0x5f, 0x79, 0xd7, 0xc2, 0x14, 0x62, 0x45, 0x01, 0xc7, 0xcb, 0x96, 0x20, 0xdb,
	0xb3, 0x83, 0xf7, 0xe6, 0x92, 0x48, 0x2b, 0x41, 0x28, 0x56, 0x64, 0x03, 0xf2, 0x21, 0xeb, 0xb2,
	0x13, 0x6e, 0x5e, 0x47, 0xb6, 0x25, 0x8c, 0xf1, 0x11, 0x6e, 0xc5, 0xe1, 0x14, 0xb6, 0x4a, 0x14,
	0xb9, 0x01, 0xb9, 0xae, 0xdb, 0x73, 0xb9, 0x69, 0xae, 0x69, 0xeb, 0x73, 0xcf, 0x66, 0x2c, 0xb9,
	0x24, 0x26, 0xe4, 0xfd, 0xd3, 0xd3, 0x90, 0x71, 0xf3, 0x96, 0x3a, 0x50, 0x6b, 0xf2, 0x4b, 0xc8,
	0x9f, 0xba, 0xac, 0xeb, 0x84, 0x66, 0x65, 0x1a, 0x9f, 0x4a, 0x2c, 0x79, 0x02, 0x45, 0xc7, 0x0d,
	0xb9, 0xeb, 0x9d, 0x70, 0xf3, 0xf6, 0x34, 0x76, 0x46, 0x68, 0x52, 0x85, 0x5c, 0x4f, 0xe4, 0xb1,
	0xb9, 0x8c, 0x62, 0x04, 0x0d, 0x1a, 0xc8, 0x6c, 0xa1, 0x35, 0x42, 0xc8, 0x03, 0xc8, 0xfd, 0xe1,
	0x8c, 0x05, 0xcc, 0x5c, 0x49, 0x19, 0xff, 0x46, 0xec, 0xd4, 0x3f, 0x9e, 0x07, 0x2c, 0x0c, 0x5d,
	0xdf, 0x13, 0x68, 0x04, 0x09, 0xdb, 0x4f, 0xfc, 0xbe, 0xc7, 0xcd, 0x6f, 0x94, 0x0b, 0xe5, 0x92,
	0x3c, 0x04, 0xc3, 0xee, 0x74, 0x02, 0xd6, 0xb1, 0x39, 0x33, 0x57, 0x91, 0x69, 0x11, 0x99, 0xb6,
	0xd5, 0xae, 0x68, 0x39, 0xcf, 0x66, 0xac, 0x04, 0x45, 0x36, 0x21, 0x1f, 0x30, 0xcf, 0x61, 0x81,
	0xb9, 0x86, 0xf8, 0x1b, 0x23, 0xc6, 0xc5, 0x0e, 0x91, 0xb8, 0x9d, 0x12, 0x18, 0x61, 0x14, 0x0f,
	0x7a, 0x0c, 0xd7, 0xd2, 0xdc, 0x16, 0xfb, 0xd0, 0x67, 0x21, 0x9f, 0xd0, 0x3a, 0x1e, 0xc1, 0xac,
	0x9d, 0x02, 0xab, 0x0e, 0x32, 0x3f, 0xa0, 0x21, 0xb3, 0x06, 0x30, 0x74, 0x07, 0x66, 0xd3, 0x17,
	0x8c, 0x70, 0x68, 0x53, 0x70, 0xfc, 0xa8, 0x81, 0x11, 0x9f, 0x11, 0x02, 0x59, 0xcf, 0xee, 0x31,
	0xa5, 0x1a, 0xfe, 0x26, 0x55, 0xc8, 0x72, 0x16, 0xf4, 0x54, 0xf1, 0x4b, 0xef, 0xb7, 0x58, 0xd0,
	0x4b, 0x5d, 0x2d, 0x12, 0x55, 0x60, 0xc8, 0x6f, 0x00, 0xce, 0x59, 0x70, 0xc2, 0x3c, 0xee, 0x76,
	0x99, 0x99, 0x51, 0x29, 0x21, 0x24, 0x7e, 0x17, 0x6f, 0x0f, 0xca, 0xa5, 0xf0, 0xa2, 0x6e, 0xce,
	0xdc, 0x90, 0xfb, 0x9d, 0xc0, 0xee, 0x99, 0x59, 0x14, 0xbe, 0x85, 0xc2, 0xcf, 0xa2, 0xdd, 0x41,
	0xd9, 0x04, 0xbd, 0x33, 0x07, 0xa5, 0x94, 0x59, 0xf4, 0x10, 0x16, 0x86, 0x54, 0x14, 0x6e, 0xef,
	0xda, 0x6d, 0xd6, 0x8d, 0xdc, 0x8e, 0x0b, 0xb1, 0x8b, 0xb9, 0x8c, 0xd6, 0x19, 0x96, 0x5c, 0x08,
	0x37, 0x84, 0xee, 0x1f, 0xa5, 0x01, 0x73, 0x16, 0xfe, 0xa6, 0xc7, 0x70, 0x7d, 0xac, 0x0d, 0x5f,
	0x45, 0x5c, 0x81, 0xa2, 0xb2, 0x57, 0x3e, 0x34, 0x9a, 0x15, 0xaf, 0xe9, 0xef, 0x61, 0x69, 0x9c,
	0x9d, 0x5f, 0xcb, 0xef, 0x7a, 0x9c, 0x05, 0x17, 0x76, 0x57, 0x29, 0x1f, 0xaf, 0xe9, 0xbf, 0x34,
	0xb8, 0xd1, 0xb4, 0x7b, 0xcc, 0x49, 0x91, 0x5b, 0x2c, 0xec, 0x77, 0x39, 0x39, 0x1c, 0x4a, 0x1c,
	0xf9, 0x06, 0xfe, 0x02, 0x7d, 0x3f, 0x5e, 0x64, 0xa0, 0x6a, 0xea, 0x1e, 0x0f, 0x3e, 0x0d, 0xe6,
	0x55, 0xe5, 0x0d, 0x2c, 0x8e, 0x40, 0x48, 0x19, 0x32, 0xef, 0xd9, 0x27, 0x65, 0x88, 0xf8, 0x29,
	0x6a, 0xfb, 0x42, 0xd4, 0x90, 0xca, 0xae, 0x1b, 0xc3, 0x15, 0x29, 0x6f, 0xb3, 0x24, 0x68, 0x4b,
	0x7f, 0xa2, 0xd1, 0x17, 0x03, 0xc4, 0xca, 0x80, 0xc7, 0x50, 0x68, 0xf7, 0x4f, 0xde, 0x33, 0x1e,
	0x15, 0xce, 0xf2, 0x78, 0xa2, 0x1d, 0x04, 0x59, 0x11, 0x98, 0xfe, 0x00, 0x37, 0x27, 0x60, 0xc8,
	0x7a, 0xa2, 0xeb, 0xc4, 0xca, 0x97, 0x36, 0x2c, 0xa5, 0x6d, 0xd0, 0x94, 0xae, 0x74, 0x1f, 0xae,
	0x0d, 0xf5, 0x28, 0xd1, 0x09, 0xc9, 0x63, 0x28, 0xb1, 0x78, 0x27, 0x2a, 0xd1, 0xb1, 0x2d, 0xcd,
	0x4a, 0x03, 0xe9, 0xbf, 0x35, 0x58, 0x18, 0x02, 0x90, 0x07, 0x90, 0xb1, 0x3d, 0x47, 0xa9, 0x68,
	0x8e, 0xe3, 0x10, 0x57, 0x8a, 0x77, 0xd3, 0xf6, 0x1c, 0x52, 0x05, 0xdd, 0x0f, 0x94, 0x9f, 0xaf,
	0x02, 0xeb, 0x7e, 0x20, 0x8c, 0xf7, 0x7c, 0xae, 0x0a, 0x78, 0x52, 0xc3, 0x15, 0x10, 0xf2, 0x1d,
	0x18, 0x27, 0xbe, 0xe7, 0xb8, 0xc2, 0x7f, 0xaa, 0x66, 0xaf, 0x25, 0xf8, 0xa7, 0xd1, 0x91, 0xa8,
	0xd6, 0x18, 0xb7, 0x33, 0x0b, 0x90, 0xd8, 0x46, 0xff, 0x04, 0xf3, 0x83, 0xe0, 0x69, 0xf2, 0x64,
	0x7c, 0x3c, 0x24, 0x88, 0x3c, 0x48, 0x2b, 0x25, 0x8c, 0x98, 0x57, 0x5d, 0x30, 0xbe, 0x22, 0xa5,
	0x0d, 0xbd, 0x07, 0x0b, 0x43, 0x4f, 0xa9, 0x08, 0xa9, 0x78, 0x78, 0x65, 0x7c, 0x0c, 0x4b, 0x2e,
	0xe8, 0x5b, 0x30, 0x24, 0x50, 0xe8, 0xf8, 0x2d, 0xe4, 0x2f, 0x70, 0x88, 0x54, 0xfe, 0x4f, 0xcf,
	0x95, 0xe2, 0x45, 0x90, 0x87, 0x64, 0x15, 0xb2, 0x38, 0x06, 0x48, 0xbd, 0x93, 0xb1, 0x52, 0xb4,
	0x4c, 0x71, 0xb0, 0x53, 0x14, 0x8f, 0x8c, 0xc8, 0x3b, 0xfa, 0x37, 0x0d, 0x20, 0xe6, 0x0f, 0xc9,
	0x6f, 0x01, 0xc2, 0x78, 0xa5, 0x12, 0x65, 0x35, 0xf5, 0xf0, 0xe3, 0x88, 0x9c, 0xfc, 0x94, 0x45,
	0x98, 0x12, 0xa9, 0xec, 0x47, 0x76, 0x5d, 0x55, 0x80, 0x77, 0x07, 0x1d, 0x3b, 0x3f, 0x78, 0x41,
	0xba, 0xf0, 0xde, 0x42, 0x5e, 0x5a, 0x27, 0x58, 0x3a, 0xae, 0x13, 0xb1, 0x74, 0x5c, 0x27, 0xe9,
	0x51, 0x7a, 0xba, 0x47, 0xfd, 0x1c, 0xb2, 0x8e, 0xcd, 0x6d, 0x95, 0x46, 0x37, 0x47, 0x62, 0x76,
	0x84, 0x83, 0xbc, 0x85, 0x20, 0xfa, 0x67, 0xc8, 0xe2, 0x04, 0x34, 0x2d, 0x39, 0x81, 0xec, 0x69,
	0xe0, 0xf7, 0x90, 0xdc, 0xb0, 0xf0, 0x37, 0x99, 0x07, 0x9d, 0xfb, 0x98, 0x85, 0x86, 0xa5, 0x73,
	0x3f, 0x56, 0x20, 0x37, 0x8d, 0x02, 0x7f, 0xd7, 0xa1, 0x84, 0xc3, 0x87, 0xea, 0x29, 0x3f, 0x51,
	0x80, 0xc9, 0xf6, 0x48, 0x73, 0x15, 0xc0, 0xdb, 0x57, 0x34, 0xd7, 0x67, 0x33, 0x83, 0xcd, 0x94,
	0x3c, 0x1c, 0x48, 0x05, 0x59, 0x65, 0x0b, 0x43, 0xa9, 0x20, 0xde, 0xd2, 0x04, 0x94, 0x9a, 0x5d,
	0x72, 0xd3, 0xcd, 0x2e, 0xc9, 0xe0, 0x94, 0x8f, 0x86, 0x46, 0x5c, 0xa6, 0x12, 0x74, 0x19, 0xa0,
	0xee, 0xb8, 0x5c, 0xf9, 0x67, 0x1e, 0xf4, 0x38, 0x4e, 0xba, 0xeb, 0xd0, 0x33, 0x98, 0xc5, 0xef,
	0x8b, 0x7a, 0x37, 0xae, 0xa1, 0x31, 0x73, 0xce, 0x9d, 0xd8, 0xab, 0xfa, 0x88, 0x57, 0x63, 0x9f,
	0xae, 0x28, 0x9f, 0x66, 0x86, 0x7c, 0x2a, 0x3d, 0x4a, 0x57, 0xa1, 0x80, 0x37, 0xed, 0xed, 0x8e,
	0xbf, 0x84, 0x3e, 0x04, 0x43, 0x69, 0x31, 0x09, 0xa2, 0xb4, 0xd7, 0x63, 0xed, 0x5f, 0x40, 0x61,
	0xcf, 0x73, 0xd8, 0xc7, 0x89, 0x02, 0xe3, 0xb3, 0x30, 0x7e, 0x86, 0x33, 0xa9, 0x67, 0x98, 0xde,
	0x07, 0xa3, 0xe5, 0xf6, 0x58, 0xc8, 0xed, 0xde, 0x39, 0x59, 0x06, 0x83, 0x47, 0x0b, 0x45, 0x99,
	0x6c, 0xd0, 0x7f, 0x6a, 0x60, 0x3c, 0xf7, 0xdb, 0xa2, 0xf5, 0xf4, 0xc3, 0x61, 0x9f, 0x92, 0x3b,
	0x90, 0xc3, 0x79, 0x12, 0x2f, 0x9d, 0x57, 0xdf, 0x76, 0x0a, 0xce, 0x2c, 0x79, 0x96, 0xe8, 0x9b,
	0x19, 0xfb, 0x2d, 0x9a, 0xfd, 0xd2, 0x47, 0x25, 0x59, 0x01, 0xe8, 0xba, 0x1e, 0x3b, 0x96, 0xe1,
	0xcf, 0xe1, 0xdc, 0x60, 0x88, 0x9d, 0xa7, 0x38, 0x39, 0xdf, 0x06, 0xe3, 0xd4, 0xed, 0xb2, 0x63,
	0x1c, 0x89, 0xf2, 0x72, 0xaa, 0x10, 0x1b, 0x47, 0x62, 0x2c, 0x7a, 0x0c, 0xc5, 0xe7, 0x7e, 0x3b,
	0xfe, 0x28, 0x7e, 0xe7, 0xb7, 0x63, 0x03, 0xe4, 0x22, 0x51, 0x4f, 0x4f, 0x87, 0xe8, 0x2e, 0xcc,
	0x3e, 0xf7, 0xdb, 0xe2, 0xc9, 0xb9, 0xe2, 0x83, 0x9a, 0x16, 0x20, 0x57, 0xef, 0x9d, 0xf3, 0x4f,
	0xd5, 0xf7, 0x60, 0x24, 0xcf, 0xc3, 0x75, 0x58, 0x7c, 0xd5, 0x7c, 0xd1, 0x3c, 0x78, 0xd3, 0x3c,
	0x7e, 0x7a, 0xd0, 0xdc, 0xdd, 0x6b, 0xed, 0x1d, 0x34, 0xcb, 0x33, 0x24, 0x0f, 0x7a, 0xfd, 0xb0,
	0xac, 0x91, 0x02, 0x64, 0x9a, 0xf5, 0xc3, 0xb2, 0x2e, 0x36, 0x1a, 0xad, 0x72, 0x46, 0x6c, 0x34,
	0x5a, 0xf5, 0x72, 0x56, 0x6c, 0xbc, 0x6c, 0x95, 0x73, 0x62, 0xe3, 0x65, 0xab, 0x5e, 0xce, 0x8b,
	0x8d, 0xbd, 0x66, 0xb9, 0x40, 0x66, 0xa1, 0xf8, 0xf4, 0xa0, 0xd9, 0xda, 0xde, 0x6b, 0x1e, 0x95,
	0x8b, 0xd5, 0x17, 0x68, 0x13, 0xba, 0x89, 0x2c, 0xc2, 0x5c, 0x74, 0xd7, 0x51, 0x6b, 0xbb, 0x55,
	0x2f, 0xcf, 0x10, 0x80, 0xfc, 0xe1, 0xab, 0xfa, 0xab, 0xfa, 0x6e, 0x59, 0x23, 0x25, 0x28, 0x58,
	0xaf, 0x9a, 0xcd, 0xbd, 0x66, 0xa3, 0xac, 0x93, 0x22, 0x64, 0x77, 0x0f, 0x9a, 0xf5, 0x72, 0x86,
	0x18, 0x90, 0xab, 0x5b, 0xd6, 0x81, 0x55, 0xce, 0x3e, 0xfa, 0x47, 0x1e, 0x72, 0xd2, 0xc4, 0x16,
	0x18, 0xad, 0xc0, 0xbe, 0x60, 0x41, 0x68, 0x77, 0xc9, 0x42, 0x12, 0x0f, 0x3c, 0xad, 0x94, 0x93,
	0xef, 0x76, 0x59, 0x60, 0x94, 0xfe, 0xe5, 0xc7, 0xff, 0xfc, 0x55, 0x5f, 0xa6, 0x37, 0x6b, 0x17,
	0x0f, 0x6b, 0xe8, 0x8f, 0xda, 0x67, 0xfc, 0x73, 0x59, 0xc3, 0xb8, 0x6d, 0x69, 0xd5, 0x4d, 0x8d,
	0xbc, 0x4b, 0xcf, 0xef, 0xe6, 0xc8, 0x17, 0x8d, 0xfa, 0xea, 0xa8, 0x5c, 0xd5, 0x6f, 0xe8, 0xcf,
	0xf0, 0xa6, 0x35, 0x7a, 0x7b, 0xf4, 0xa6, 0xf8, 0x6b, 0x68, 0x4b, 0xab, 0x92, 0x7d, 0xf5, 0x4f,
	0x8b, 0xe7, 0x7e, 0x7b, 0xd4, 0x80, 0xf9, 0x74, 0x72, 0xf6, 0x43, 0xba, 0x86, 0xa4, 0x15, 0x7a,
	0x7d, 0x94, 0xf4, 0x9d, 0xdf, 0x16, 0x74, 0x16, 0xe4, 0x1b, 0x8c, 0x0b, 0xb2, 0x38, 0xb1, 0x27,
	0xf9, 0xe2, 0x5b, 0x24, 0x5b, 0x25, 0x2b, 0x63, 0xc9, 0x6a, 0x9f, 0x31, 0xd5, 0x2e, 0x37, 0x35,
	0xb2, 0x0f, 0x05, 0x91, 0x54, 0x82, 0x74, 0x31, 0x22, 0x8d, 0xb3, 0x6c, 0x44, 0xc7, 0x15, 0xa4,
	0xbd, 0x49, 0xc6, 0xeb, 0xb8, 0xa9, 0x91, 0x03, 0x30, 0x1a, 0x8c, 0xab, 0x77, 0x4f, 0x4a, 0xc7,
	0x9d, 0xa5, 0x92, 0xee, 0x5d, 0x57, 0x69, 0x28, 0xbb, 0x5a, 0xed, 0xb3, 0xeb, 0x5c, 0x92, 0x3d,
	0x28, 0x34, 0x98, 0xfc, 0xc7, 0xc2, 0x30, 0x5d, 0xd2, 0xe7, 0xe8, 0x1d, 0x24, 0x5b, 0x21, 0x63,
	0x02, 0x22, 0x3a, 0xa0, 0xa4, 0xda, 0x42, 0xdd, 0x30, 0x02, 0x21, 0x01, 0x29, 0x2c, 0x8a, 0xa5,
	0x32, 0x9b, 0x84, 0x66, 0x6f, 0x97, 0x2e, 0x22, 0x57, 0x89, 0x18, 0x31, 0x17, 0xba, 0x69, 0xb6,
	0xc1, 0x38, 0x76, 0x3c, 0x1c, 0x4b, 0x07, 0x44, 0x14, 0x81, 0xea, 0x87, 0x74, 0x15, 0x09, 0x6e,
	0x91, 0x31, 0x79, 0xe8, 0x0a, 0xc8, 0xa6, 0x26, 0x3e, 0x20, 0x1a, 0x8c, 0x27, 0x3d, 0x6f, 0x90,
	0x4e, 0x1a, 0x1a, 0x9f, 0x5e, 0x65, 0x5d, 0xdc, 0x18, 0x1f, 0xfd, 0x37, 0x27, 0x06, 0x02, 0x97,
	0x93, 0x1f, 0xc0, 0xd8, 0x76, 0x1c, 0x15, 0x82, 0xc5, 0x84, 0x58, 0x39, 0xae, 0xb2, 0xa0, 0xdc,
	0x16, 0x3d, 0x4c, 0x74, 0x1d, 0xe9, 0x29, 0x35, 0x27, 0x45, 0x62, 0x2b, 0x7a, 0x67, 0x8e, 0xa0,
	0xb0, 0xed, 0x38, 0x18, 0x8c, 0x69, 0x88, 0xef, 0x22, 0xf1, 0x37, 0xf4, 0xc6, 0xf8, 0xa8, 0x6c,
	0xc9, 0xf7, 0x7e, 0x07, 0x0a, 0x3b, 0xfd, 0xee, 0xfb, 0x6d, 0xc7, 0x99, 0x8a, 0x54, 0x85, 0x87,
	0x26, 0xe1, 0x59, 0xd7, 0xc8, 0x2e, 0x14, 0xb7, 0x1d, 0x47, 0xfe, 0x63, 0x73, 0xd0, 0x97, 0x23,
	0xf2, 0xb7, 0x50, 0xfe, 0x1a, 0x5d, 0x1c, 0x51, 0x8a, 0x34, 0xa0, 0xb4, 0xcb, 0xba, 0x8c, 0xb3,
	0xaf, 0x21, 0xaa, 0x8e, 0x21, 0x7a, 0x0d, 0xb3, 0x92, 0x68, 0x42, 0x21, 0x8c, 0x70, 0xa9, 0x62,
	0xa8, 0x7e, 0xa1, 0x18, 0x2c, 0x00, 0xc9, 0x3b, 0xb6, 0x1e, 0x46, 0x58, 0x55, 0xde, 0x54, 0xaf,
	0xac, 0x8a, 0x57, 0xe8, 0x3a, 0xcc, 0x5d, 0x32, 0x90, 0xc7, 0xa3, 0x7c, 0x55, 0xe4, 0xbb, 0x4b,
	0x57, 0x27, 0x24, 0x76, 0xed, 0x33, 0x3e, 0xf2, 0x97, 0xa2, 0x57, 0xbd, 0x8d, 0x7c, 0x39, 0x15,
	0x73, 0x0d, 0x99, 0xef, 0x57, 0xef, 0x7d, 0x81, 0xb9, 0xf6, 0x19, 0x07, 0x86, 0xcb, 0x76, 0x1e,
	0xc7, 0xb2, 0xef, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x61, 0x4e, 0x7f, 0x1b, 0x17, 0x00,
	0x00,
}
